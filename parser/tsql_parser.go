// Code generated from tsql.g4 by ANTLR 4.7.1. DO NOT EDIT.

package parser // tsql

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 443, 3134,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169,
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 3, 2, 7, 2, 346, 10, 2,
	12, 2, 14, 2, 349, 11, 2, 3, 2, 3, 2, 3, 3, 3, 3, 5, 3, 355, 10, 3, 3,
	4, 3, 4, 5, 4, 359, 10, 4, 6, 4, 361, 10, 4, 13, 4, 14, 4, 362, 3, 5, 3,
	5, 3, 5, 3, 5, 5, 5, 369, 10, 5, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 375, 10,
	6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 5, 7, 392, 10, 7, 3, 8, 3, 8, 5, 8, 396, 10, 8, 3,
	8, 5, 8, 399, 10, 8, 3, 8, 3, 8, 5, 8, 403, 10, 8, 3, 8, 3, 8, 5, 8, 407,
	10, 8, 3, 8, 3, 8, 5, 8, 411, 10, 8, 3, 8, 3, 8, 3, 8, 5, 8, 416, 10, 8,
	3, 8, 3, 8, 3, 8, 5, 8, 421, 10, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8,
	428, 10, 8, 3, 8, 5, 8, 431, 10, 8, 3, 8, 3, 8, 5, 8, 435, 10, 8, 3, 8,
	5, 8, 438, 10, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 446, 10, 8,
	3, 8, 5, 8, 449, 10, 8, 3, 8, 3, 8, 3, 8, 5, 8, 454, 10, 8, 3, 8, 5, 8,
	457, 10, 8, 3, 8, 3, 8, 3, 8, 5, 8, 462, 10, 8, 3, 8, 3, 8, 3, 8, 5, 8,
	467, 10, 8, 3, 8, 5, 8, 470, 10, 8, 3, 8, 3, 8, 3, 8, 5, 8, 475, 10, 8,
	3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 481, 10, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8,
	5, 8, 488, 10, 8, 3, 8, 3, 8, 5, 8, 492, 10, 8, 5, 8, 494, 10, 8, 3, 8,
	3, 8, 3, 8, 5, 8, 499, 10, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8,
	3, 8, 3, 8, 7, 8, 510, 10, 8, 12, 8, 14, 8, 513, 11, 8, 3, 8, 3, 8, 5,
	8, 517, 10, 8, 5, 8, 519, 10, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3,
	9, 5, 9, 528, 10, 9, 3, 10, 5, 10, 531, 10, 10, 3, 10, 3, 10, 5, 10, 535,
	10, 10, 3, 10, 5, 10, 538, 10, 10, 3, 10, 3, 10, 5, 10, 542, 10, 10, 3,
	10, 5, 10, 545, 10, 10, 3, 10, 3, 10, 5, 10, 549, 10, 10, 3, 10, 5, 10,
	552, 10, 10, 3, 10, 5, 10, 555, 10, 10, 3, 10, 5, 10, 558, 10, 10, 3, 10,
	5, 10, 561, 10, 10, 3, 11, 3, 11, 5, 11, 565, 10, 11, 3, 11, 3, 11, 3,
	11, 5, 11, 570, 10, 11, 3, 12, 5, 12, 573, 10, 12, 3, 12, 3, 12, 5, 12,
	577, 10, 12, 3, 12, 5, 12, 580, 10, 12, 3, 12, 3, 12, 5, 12, 584, 10, 12,
	3, 12, 5, 12, 587, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 593, 10,
	12, 3, 12, 5, 12, 596, 10, 12, 3, 12, 3, 12, 5, 12, 600, 10, 12, 3, 12,
	5, 12, 603, 10, 12, 3, 12, 5, 12, 606, 10, 12, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 5, 13, 613, 10, 13, 3, 14, 5, 14, 616, 10, 14, 3, 14, 3, 14,
	5, 14, 620, 10, 14, 3, 14, 5, 14, 623, 10, 14, 3, 14, 5, 14, 626, 10, 14,
	3, 14, 5, 14, 629, 10, 14, 3, 15, 5, 15, 632, 10, 15, 3, 15, 3, 15, 5,
	15, 636, 10, 15, 3, 15, 3, 15, 5, 15, 640, 10, 15, 3, 15, 5, 15, 643, 10,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 7, 15, 649, 10, 15, 12, 15, 14, 15, 652,
	11, 15, 3, 15, 5, 15, 655, 10, 15, 3, 15, 3, 15, 5, 15, 659, 10, 15, 3,
	15, 5, 15, 662, 10, 15, 3, 15, 5, 15, 665, 10, 15, 3, 15, 5, 15, 668, 10,
	15, 3, 15, 5, 15, 671, 10, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16,
	678, 10, 16, 3, 16, 3, 16, 5, 16, 682, 10, 16, 5, 16, 684, 10, 16, 3, 17,
	3, 17, 3, 17, 3, 17, 7, 17, 690, 10, 17, 12, 17, 14, 17, 693, 11, 17, 3,
	17, 3, 17, 3, 17, 5, 17, 698, 10, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17,
	704, 10, 17, 5, 17, 706, 10, 17, 3, 18, 3, 18, 5, 18, 710, 10, 18, 3, 18,
	5, 18, 713, 10, 18, 3, 18, 5, 18, 716, 10, 18, 3, 19, 3, 19, 3, 19, 5,
	19, 721, 10, 19, 3, 19, 3, 19, 3, 19, 5, 19, 726, 10, 19, 3, 19, 5, 19,
	729, 10, 19, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 5, 20, 737, 10,
	20, 3, 20, 3, 20, 5, 20, 741, 10, 20, 3, 20, 3, 20, 3, 20, 7, 20, 746,
	10, 20, 12, 20, 14, 20, 749, 11, 20, 5, 20, 751, 10, 20, 3, 20, 3, 20,
	3, 20, 3, 20, 3, 20, 7, 20, 758, 10, 20, 12, 20, 14, 20, 761, 11, 20, 5,
	20, 763, 10, 20, 3, 20, 3, 20, 5, 20, 767, 10, 20, 3, 20, 3, 20, 3, 20,
	3, 20, 7, 20, 773, 10, 20, 12, 20, 14, 20, 776, 11, 20, 5, 20, 778, 10,
	20, 3, 21, 3, 21, 5, 21, 782, 10, 21, 3, 21, 5, 21, 785, 10, 21, 3, 21,
	3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 5, 21, 794, 10, 21, 3, 21, 3,
	21, 5, 21, 798, 10, 21, 3, 21, 3, 21, 5, 21, 802, 10, 21, 3, 21, 5, 21,
	805, 10, 21, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 5, 22, 812, 10, 22, 3,
	22, 5, 22, 815, 10, 22, 3, 22, 3, 22, 3, 22, 7, 22, 820, 10, 22, 12, 22,
	14, 22, 823, 11, 22, 3, 22, 5, 22, 826, 10, 22, 5, 22, 828, 10, 22, 3,
	22, 3, 22, 3, 22, 3, 22, 7, 22, 834, 10, 22, 12, 22, 14, 22, 837, 11, 22,
	5, 22, 839, 10, 22, 3, 22, 3, 22, 5, 22, 843, 10, 22, 3, 22, 3, 22, 3,
	22, 3, 23, 3, 23, 3, 23, 3, 23, 5, 23, 852, 10, 23, 3, 23, 5, 23, 855,
	10, 23, 3, 23, 3, 23, 5, 23, 859, 10, 23, 3, 23, 3, 23, 5, 23, 863, 10,
	23, 3, 23, 5, 23, 866, 10, 23, 3, 24, 3, 24, 3, 24, 5, 24, 871, 10, 24,
	3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3,
	25, 3, 25, 3, 25, 3, 25, 5, 25, 887, 10, 25, 3, 25, 3, 25, 5, 25, 891,
	10, 25, 3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 897, 10, 25, 5, 25, 899, 10,
	25, 3, 25, 5, 25, 902, 10, 25, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	5, 26, 910, 10, 26, 3, 26, 3, 26, 3, 26, 3, 26, 5, 26, 916, 10, 26, 3,
	26, 3, 26, 3, 26, 5, 26, 921, 10, 26, 3, 26, 5, 26, 924, 10, 26, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 933, 10, 27, 3, 27, 3,
	27, 3, 27, 3, 27, 7, 27, 939, 10, 27, 12, 27, 14, 27, 942, 11, 27, 5, 27,
	944, 10, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 951, 10, 27, 3,
	27, 5, 27, 954, 10, 27, 3, 28, 3, 28, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29,
	3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3,
	29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29,
	3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 5, 29, 991, 10, 29, 3,
	29, 5, 29, 994, 10, 29, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 1000, 10, 30,
	3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5,
	30, 1012, 10, 30, 5, 30, 1014, 10, 30, 3, 30, 5, 30, 1017, 10, 30, 3, 31,
	3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	5, 31, 1041, 10, 31, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3,
	32, 3, 32, 5, 32, 1052, 10, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32,
	5, 32, 1060, 10, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 7,
	33, 1069, 10, 33, 12, 33, 14, 33, 1072, 11, 33, 7, 33, 1074, 10, 33, 12,
	33, 14, 33, 1077, 11, 33, 5, 33, 1079, 10, 33, 3, 34, 3, 34, 3, 34, 3,
	34, 3, 34, 3, 34, 5, 34, 1087, 10, 34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 36,
	3, 36, 3, 36, 3, 36, 5, 36, 1097, 10, 36, 3, 37, 3, 37, 3, 37, 3, 38, 3,
	38, 3, 38, 3, 39, 3, 39, 3, 40, 3, 40, 3, 41, 3, 41, 3, 42, 3, 42, 3, 42,
	3, 42, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 5, 43, 1123,
	10, 43, 3, 43, 3, 43, 3, 43, 3, 43, 5, 43, 1129, 10, 43, 3, 43, 3, 43,
	3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 5, 43, 1140, 10, 43, 3,
	44, 3, 44, 3, 44, 3, 45, 3, 45, 3, 45, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46,
	3, 46, 5, 46, 1154, 10, 46, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 5,
	47, 1162, 10, 47, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1169, 10, 48,
	3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3,
	49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49,
	5, 49, 1192, 10, 49, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 51, 3, 51, 3,
	51, 3, 51, 3, 51, 3, 51, 5, 51, 1205, 10, 51, 3, 52, 3, 52, 3, 52, 3, 52,
	5, 52, 1211, 10, 52, 3, 52, 3, 52, 3, 52, 5, 52, 1216, 10, 52, 3, 52, 5,
	52, 1219, 10, 52, 3, 53, 3, 53, 3, 53, 3, 53, 5, 53, 1225, 10, 53, 3, 53,
	3, 53, 5, 53, 1229, 10, 53, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 5, 54, 1236,
	10, 54, 3, 54, 3, 54, 3, 54, 3, 55, 3, 55, 3, 55, 3, 55, 5, 55, 1245, 10,
	55, 3, 55, 3, 55, 5, 55, 1249, 10, 55, 3, 56, 3, 56, 3, 56, 3, 56, 5, 56,
	1255, 10, 56, 3, 56, 3, 56, 3, 56, 7, 56, 1260, 10, 56, 12, 56, 14, 56,
	1263, 11, 56, 3, 56, 5, 56, 1266, 10, 56, 3, 57, 3, 57, 3, 57, 3, 57, 3,
	57, 3, 57, 3, 57, 5, 57, 1275, 10, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57,
	3, 57, 5, 57, 1283, 10, 57, 3, 58, 3, 58, 3, 58, 3, 58, 5, 58, 1289, 10,
	58, 3, 58, 3, 58, 3, 59, 3, 59, 5, 59, 1295, 10, 59, 3, 60, 3, 60, 3, 60,
	3, 60, 3, 60, 3, 60, 3, 60, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3,
	61, 3, 61, 5, 61, 1312, 10, 61, 3, 61, 3, 61, 5, 61, 1316, 10, 61, 3, 61,
	3, 61, 3, 61, 3, 62, 3, 62, 3, 62, 5, 62, 1324, 10, 62, 3, 62, 3, 62, 5,
	62, 1328, 10, 62, 3, 62, 3, 62, 3, 62, 3, 62, 7, 62, 1334, 10, 62, 12,
	62, 14, 62, 1337, 11, 62, 3, 62, 5, 62, 1340, 10, 62, 5, 62, 1342, 10,
	62, 3, 63, 3, 63, 5, 63, 1346, 10, 63, 3, 63, 3, 63, 5, 63, 1350, 10, 63,
	3, 63, 3, 63, 5, 63, 1354, 10, 63, 3, 63, 3, 63, 5, 63, 1358, 10, 63, 3,
	63, 3, 63, 3, 63, 3, 63, 5, 63, 1364, 10, 63, 3, 63, 3, 63, 5, 63, 1368,
	10, 63, 5, 63, 1370, 10, 63, 3, 64, 3, 64, 3, 64, 5, 64, 1375, 10, 64,
	3, 64, 3, 64, 3, 64, 3, 64, 7, 64, 1381, 10, 64, 12, 64, 14, 64, 1384,
	11, 64, 5, 64, 1386, 10, 64, 3, 64, 5, 64, 1389, 10, 64, 3, 64, 3, 64,
	3, 64, 3, 64, 3, 64, 7, 64, 1396, 10, 64, 12, 64, 14, 64, 1399, 11, 64,
	3, 64, 3, 64, 5, 64, 1403, 10, 64, 3, 64, 3, 64, 3, 64, 5, 64, 1408, 10,
	64, 3, 64, 5, 64, 1411, 10, 64, 5, 64, 1413, 10, 64, 3, 65, 3, 65, 5, 65,
	1417, 10, 65, 3, 65, 3, 65, 5, 65, 1421, 10, 65, 3, 65, 5, 65, 1424, 10,
	65, 3, 65, 3, 65, 5, 65, 1428, 10, 65, 3, 66, 3, 66, 3, 67, 3, 67, 5, 67,
	1434, 10, 67, 3, 67, 3, 67, 3, 67, 5, 67, 1439, 10, 67, 3, 67, 3, 67, 3,
	67, 3, 67, 3, 67, 5, 67, 1446, 10, 67, 5, 67, 1448, 10, 67, 3, 67, 3, 67,
	5, 67, 1452, 10, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 5, 67, 1459, 10,
	67, 3, 67, 3, 67, 5, 67, 1463, 10, 67, 3, 67, 5, 67, 1466, 10, 67, 3, 67,
	3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 5, 67, 1475, 10, 67, 3, 67, 5,
	67, 1478, 10, 67, 5, 67, 1480, 10, 67, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68,
	3, 68, 3, 68, 5, 68, 1489, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3,
	68, 3, 68, 3, 68, 3, 68, 5, 68, 1500, 10, 68, 3, 68, 3, 68, 5, 68, 1504,
	10, 68, 5, 68, 1506, 10, 68, 5, 68, 1508, 10, 68, 3, 69, 3, 69, 3, 69,
	3, 69, 5, 69, 1514, 10, 69, 3, 69, 3, 69, 3, 69, 5, 69, 1519, 10, 69, 3,
	69, 3, 69, 3, 69, 3, 69, 3, 69, 5, 69, 1526, 10, 69, 3, 69, 3, 69, 3, 69,
	3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 5, 69, 1539, 10,
	69, 5, 69, 1541, 10, 69, 5, 69, 1543, 10, 69, 3, 69, 5, 69, 1546, 10, 69,
	3, 69, 5, 69, 1549, 10, 69, 3, 70, 3, 70, 3, 70, 3, 70, 3, 70, 5, 70, 1556,
	10, 70, 3, 70, 5, 70, 1559, 10, 70, 3, 70, 3, 70, 3, 70, 3, 70, 5, 70,
	1565, 10, 70, 3, 70, 3, 70, 3, 70, 5, 70, 1570, 10, 70, 5, 70, 1572, 10,
	70, 3, 70, 5, 70, 1575, 10, 70, 3, 70, 3, 70, 3, 70, 3, 70, 5, 70, 1581,
	10, 70, 3, 70, 3, 70, 3, 70, 3, 70, 3, 70, 3, 70, 5, 70, 1589, 10, 70,
	5, 70, 1591, 10, 70, 3, 70, 5, 70, 1594, 10, 70, 3, 70, 3, 70, 5, 70, 1598,
	10, 70, 3, 70, 5, 70, 1601, 10, 70, 3, 70, 3, 70, 3, 70, 3, 70, 5, 70,
	1607, 10, 70, 3, 70, 5, 70, 1610, 10, 70, 3, 70, 3, 70, 5, 70, 1614, 10,
	70, 3, 70, 5, 70, 1617, 10, 70, 3, 70, 3, 70, 3, 70, 3, 70, 5, 70, 1623,
	10, 70, 3, 70, 5, 70, 1626, 10, 70, 5, 70, 1628, 10, 70, 3, 71, 3, 71,
	5, 71, 1632, 10, 71, 3, 72, 3, 72, 3, 72, 5, 72, 1637, 10, 72, 3, 73, 3,
	73, 3, 73, 3, 73, 3, 74, 3, 74, 5, 74, 1645, 10, 74, 3, 74, 3, 74, 3, 74,
	5, 74, 1650, 10, 74, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 76, 3, 76, 5,
	76, 1659, 10, 76, 3, 76, 7, 76, 1662, 10, 76, 12, 76, 14, 76, 1665, 11,
	76, 3, 77, 3, 77, 5, 77, 1669, 10, 77, 3, 78, 3, 78, 3, 78, 3, 78, 5, 78,
	1675, 10, 78, 3, 78, 3, 78, 5, 78, 1679, 10, 78, 3, 78, 5, 78, 1682, 10,
	78, 3, 78, 3, 78, 5, 78, 1686, 10, 78, 3, 78, 3, 78, 3, 78, 3, 78, 5, 78,
	1692, 10, 78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 5, 78, 1700, 10,
	78, 3, 78, 3, 78, 3, 78, 5, 78, 1705, 10, 78, 5, 78, 1707, 10, 78, 3, 78,
	5, 78, 1710, 10, 78, 3, 78, 7, 78, 1713, 10, 78, 12, 78, 14, 78, 1716,
	11, 78, 3, 79, 3, 79, 5, 79, 1720, 10, 79, 3, 79, 5, 79, 1723, 10, 79,
	3, 79, 3, 79, 3, 79, 5, 79, 1728, 10, 79, 3, 79, 5, 79, 1731, 10, 79, 3,
	79, 5, 79, 1734, 10, 79, 3, 79, 3, 79, 3, 79, 3, 79, 5, 79, 1740, 10, 79,
	3, 79, 3, 79, 3, 79, 3, 79, 5, 79, 1746, 10, 79, 3, 80, 3, 80, 5, 80, 1750,
	10, 80, 3, 80, 3, 80, 3, 80, 5, 80, 1755, 10, 80, 3, 80, 5, 80, 1758, 10,
	80, 3, 80, 3, 80, 3, 80, 5, 80, 1763, 10, 80, 3, 80, 3, 80, 5, 80, 1767,
	10, 80, 3, 80, 3, 80, 5, 80, 1771, 10, 80, 3, 80, 3, 80, 3, 80, 3, 80,
	5, 80, 1777, 10, 80, 3, 80, 3, 80, 3, 80, 3, 80, 5, 80, 1783, 10, 80, 3,
	81, 3, 81, 3, 81, 3, 81, 3, 81, 7, 81, 1790, 10, 81, 12, 81, 14, 81, 1793,
	11, 81, 3, 81, 3, 81, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 1802, 10,
	82, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 5, 83, 1812,
	10, 83, 5, 83, 1814, 10, 83, 5, 83, 1816, 10, 83, 3, 83, 5, 83, 1819, 10,
	83, 3, 83, 5, 83, 1822, 10, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83,
	3, 83, 3, 83, 3, 83, 5, 83, 1833, 10, 83, 5, 83, 1835, 10, 83, 5, 83, 1837,
	10, 83, 3, 83, 5, 83, 1840, 10, 83, 3, 84, 5, 84, 1843, 10, 84, 3, 84,
	5, 84, 1846, 10, 84, 3, 84, 5, 84, 1849, 10, 84, 3, 84, 5, 84, 1852, 10,
	84, 3, 84, 5, 84, 1855, 10, 84, 3, 84, 3, 84, 3, 84, 3, 85, 3, 85, 3, 85,
	3, 85, 3, 85, 3, 85, 3, 85, 5, 85, 1867, 10, 85, 3, 85, 5, 85, 1870, 10,
	85, 3, 85, 5, 85, 1873, 10, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 7, 85,
	1880, 10, 85, 12, 85, 14, 85, 1883, 11, 85, 5, 85, 1885, 10, 85, 3, 85,
	5, 85, 1888, 10, 85, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 5, 86, 1895, 10,
	86, 3, 86, 5, 86, 1898, 10, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86,
	3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 5, 86, 1912, 10, 86, 3, 86, 5,
	86, 1915, 10, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 5, 86, 1922, 10, 86,
	3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 5, 86, 1933,
	10, 86, 3, 87, 3, 87, 5, 87, 1937, 10, 87, 3, 88, 3, 88, 3, 88, 3, 88,
	3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 6, 88, 1948, 10, 88, 13, 88, 14, 88,
	1949, 3, 88, 3, 88, 5, 88, 1954, 10, 88, 3, 88, 3, 88, 3, 88, 3, 88, 6,
	88, 1960, 10, 88, 13, 88, 14, 88, 1961, 3, 88, 3, 88, 5, 88, 1966, 10,
	88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88,
	3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 5, 88, 1984, 10, 88, 3, 88, 3,
	88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88,
	3, 88, 7, 88, 1999, 10, 88, 12, 88, 14, 88, 2002, 11, 88, 3, 89, 3, 89,
	3, 89, 3, 89, 3, 89, 3, 89, 3, 89, 3, 89, 5, 89, 2012, 10, 89, 3, 90, 3,
	90, 3, 91, 3, 91, 3, 91, 5, 91, 2019, 10, 91, 3, 91, 3, 91, 3, 91, 7, 91,
	2024, 10, 91, 12, 91, 14, 91, 2027, 11, 91, 3, 92, 3, 92, 3, 92, 3, 92,
	3, 92, 5, 92, 2034, 10, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 93, 3,
	93, 5, 93, 2043, 10, 93, 3, 93, 3, 93, 5, 93, 2047, 10, 93, 3, 93, 3, 93,
	3, 93, 3, 93, 3, 93, 3, 93, 3, 93, 3, 93, 5, 93, 2057, 10, 93, 3, 94, 3,
	94, 3, 94, 7, 94, 2062, 10, 94, 12, 94, 14, 94, 2065, 11, 94, 3, 95, 3,
	95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 7, 95, 2076, 10, 95,
	12, 95, 14, 95, 2079, 11, 95, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96,
	3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3,
	96, 3, 96, 3, 96, 3, 96, 5, 96, 2101, 10, 96, 3, 96, 3, 96, 3, 96, 3, 96,
	3, 96, 3, 96, 3, 96, 5, 96, 2110, 10, 96, 3, 96, 3, 96, 3, 96, 3, 96, 5,
	96, 2116, 10, 96, 3, 96, 3, 96, 3, 96, 3, 96, 5, 96, 2122, 10, 96, 3, 96,
	3, 96, 3, 96, 3, 96, 5, 96, 2128, 10, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3,
	96, 3, 96, 3, 96, 3, 96, 3, 96, 5, 96, 2139, 10, 96, 3, 97, 3, 97, 3, 97,
	3, 97, 3, 97, 3, 97, 5, 97, 2147, 10, 97, 3, 97, 3, 97, 3, 97, 3, 97, 7,
	97, 2153, 10, 97, 12, 97, 14, 97, 2156, 11, 97, 3, 98, 3, 98, 5, 98, 2160,
	10, 98, 3, 98, 3, 98, 5, 98, 2164, 10, 98, 3, 99, 3, 99, 5, 99, 2168, 10,
	99, 3, 99, 5, 99, 2171, 10, 99, 3, 99, 3, 99, 3, 99, 5, 99, 2176, 10, 99,
	3, 99, 3, 99, 5, 99, 2180, 10, 99, 3, 99, 3, 99, 5, 99, 2184, 10, 99, 3,
	99, 3, 99, 3, 99, 3, 99, 3, 99, 7, 99, 2191, 10, 99, 12, 99, 14, 99, 2194,
	11, 99, 5, 99, 2196, 10, 99, 3, 99, 3, 99, 5, 99, 2200, 10, 99, 3, 100,
	3, 100, 3, 100, 5, 100, 2205, 10, 100, 3, 100, 3, 100, 5, 100, 2209, 10,
	100, 3, 101, 3, 101, 3, 101, 3, 101, 3, 101, 5, 101, 2216, 10, 101, 3,
	102, 3, 102, 3, 102, 3, 102, 3, 102, 7, 102, 2223, 10, 102, 12, 102, 14,
	102, 2226, 11, 102, 3, 102, 3, 102, 3, 102, 3, 102, 5, 102, 2232, 10, 102,
	5, 102, 2234, 10, 102, 3, 103, 3, 103, 3, 103, 3, 103, 3, 103, 3, 103,
	3, 104, 3, 104, 3, 104, 3, 104, 3, 104, 3, 104, 5, 104, 2248, 10, 104,
	3, 104, 3, 104, 3, 104, 3, 104, 3, 104, 3, 104, 5, 104, 2256, 10, 104,
	3, 104, 5, 104, 2259, 10, 104, 5, 104, 2261, 10, 104, 3, 105, 3, 105, 3,
	105, 3, 105, 3, 105, 5, 105, 2268, 10, 105, 3, 106, 3, 106, 5, 106, 2272,
	10, 106, 3, 107, 3, 107, 3, 108, 3, 108, 3, 108, 3, 108, 3, 108, 7, 108,
	2281, 10, 108, 12, 108, 14, 108, 2284, 11, 108, 3, 108, 3, 108, 3, 109,
	3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109,
	3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109,
	3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 7, 109,
	2315, 10, 109, 12, 109, 14, 109, 2318, 11, 109, 3, 109, 3, 109, 3, 109,
	3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109,
	3, 109, 5, 109, 2333, 10, 109, 3, 110, 3, 110, 3, 110, 3, 110, 5, 110,
	2339, 10, 110, 3, 111, 3, 111, 3, 111, 7, 111, 2344, 10, 111, 12, 111,
	14, 111, 2347, 11, 111, 3, 112, 3, 112, 3, 112, 5, 112, 2352, 10, 112,
	3, 112, 3, 112, 3, 112, 5, 112, 2357, 10, 112, 3, 112, 3, 112, 3, 112,
	3, 112, 3, 112, 3, 112, 5, 112, 2365, 10, 112, 3, 112, 5, 112, 2368, 10,
	112, 5, 112, 2370, 10, 112, 3, 113, 3, 113, 3, 113, 7, 113, 2375, 10, 113,
	12, 113, 14, 113, 2378, 11, 113, 3, 114, 3, 114, 3, 114, 3, 114, 3, 114,
	3, 114, 5, 114, 2386, 10, 114, 3, 114, 3, 114, 3, 114, 3, 114, 3, 114,
	3, 114, 3, 114, 3, 114, 3, 114, 3, 114, 3, 114, 3, 114, 3, 114, 3, 114,
	3, 114, 7, 114, 2403, 10, 114, 12, 114, 14, 114, 2406, 11, 114, 3, 115,
	3, 115, 5, 115, 2410, 10, 115, 3, 115, 5, 115, 2413, 10, 115, 3, 115, 3,
	115, 5, 115, 2417, 10, 115, 3, 115, 3, 115, 3, 115, 5, 115, 2422, 10, 115,
	5, 115, 2424, 10, 115, 3, 115, 3, 115, 5, 115, 2428, 10, 115, 3, 115, 3,
	115, 5, 115, 2432, 10, 115, 3, 115, 3, 115, 5, 115, 2436, 10, 115, 3, 115,
	3, 115, 3, 115, 3, 115, 3, 115, 5, 115, 2443, 10, 115, 5, 115, 2445, 10,
	115, 5, 115, 2447, 10, 115, 3, 116, 5, 116, 2450, 10, 116, 3, 116, 3, 116,
	3, 117, 3, 117, 3, 117, 3, 117, 3, 117, 3, 117, 3, 117, 3, 117, 3, 118,
	5, 118, 2463, 10, 118, 3, 118, 3, 118, 5, 118, 2467, 10, 118, 5, 118, 2469,
	10, 118, 3, 118, 5, 118, 2472, 10, 118, 3, 119, 3, 119, 5, 119, 2476, 10,
	119, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3,
	120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 7, 120, 2494,
	10, 120, 12, 120, 14, 120, 2497, 11, 120, 3, 120, 5, 120, 2500, 10, 120,
	3, 120, 3, 120, 5, 120, 2504, 10, 120, 3, 121, 3, 121, 3, 121, 3, 121,
	3, 122, 3, 122, 3, 122, 3, 122, 3, 122, 5, 122, 2515, 10, 122, 3, 123,
	3, 123, 3, 123, 3, 123, 3, 123, 5, 123, 2522, 10, 123, 3, 123, 3, 123,
	3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123,
	3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123,
	3, 123, 5, 123, 2545, 10, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123,
	3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123,
	3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123,
	3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123,
	3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123,
	3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123,
	5, 123, 2597, 10, 123, 3, 123, 3, 123, 5, 123, 2601, 10, 123, 3, 123, 3,
	123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3,
	123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3,
	123, 3, 123, 5, 123, 2624, 10, 123, 3, 124, 3, 124, 3, 124, 3, 124, 3,
	124, 3, 125, 3, 125, 3, 125, 3, 125, 3, 125, 3, 126, 5, 126, 2637, 10,
	126, 3, 126, 3, 126, 3, 126, 3, 126, 7, 126, 2643, 10, 126, 12, 126, 14,
	126, 2646, 11, 126, 3, 126, 3, 126, 3, 127, 3, 127, 3, 127, 3, 127, 3,
	127, 7, 127, 2655, 10, 127, 12, 127, 14, 127, 2658, 11, 127, 3, 127, 3,
	127, 3, 128, 5, 128, 2663, 10, 128, 3, 128, 3, 128, 3, 128, 3, 128, 3,
	128, 7, 128, 2670, 10, 128, 12, 128, 14, 128, 2673, 11, 128, 3, 128, 3,
	128, 3, 128, 3, 128, 3, 128, 3, 128, 3, 128, 3, 128, 3, 128, 3, 128, 3,
	128, 3, 128, 7, 128, 2687, 10, 128, 12, 128, 14, 128, 2690, 11, 128, 3,
	128, 3, 128, 3, 128, 5, 128, 2695, 10, 128, 3, 128, 3, 128, 3, 128, 3,
	128, 3, 128, 3, 128, 5, 128, 2703, 10, 128, 3, 129, 3, 129, 5, 129, 2707,
	10, 129, 3, 130, 3, 130, 3, 130, 3, 130, 7, 130, 2713, 10, 130, 12, 130,
	14, 130, 2716, 11, 130, 3, 130, 3, 130, 3, 131, 3, 131, 5, 131, 2722, 10,
	131, 3, 132, 3, 132, 3, 133, 3, 133, 3, 133, 3, 133, 7, 133, 2730, 10,
	133, 12, 133, 14, 133, 2733, 11, 133, 3, 134, 3, 134, 3, 134, 7, 134, 2738,
	10, 134, 12, 134, 14, 134, 2741, 11, 134, 3, 135, 3, 135, 3, 135, 3, 135,
	3, 136, 3, 136, 3, 136, 3, 136, 3, 137, 3, 137, 3, 137, 3, 137, 3, 138,
	3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138,
	5, 138, 2765, 10, 138, 3, 139, 3, 139, 3, 139, 5, 139, 2770, 10, 139, 3,
	139, 3, 139, 3, 139, 5, 139, 2775, 10, 139, 3, 139, 3, 139, 3, 139, 3,
	139, 5, 139, 2781, 10, 139, 3, 139, 5, 139, 2784, 10, 139, 3, 139, 3, 139,
	5, 139, 2788, 10, 139, 3, 139, 3, 139, 3, 139, 5, 139, 2793, 10, 139, 3,
	139, 3, 139, 3, 139, 3, 139, 3, 139, 3, 139, 3, 139, 3, 139, 3, 139, 3,
	139, 3, 139, 3, 139, 3, 139, 5, 139, 2808, 10, 139, 3, 140, 3, 140, 3,
	141, 3, 141, 3, 141, 3, 141, 3, 141, 5, 141, 2817, 10, 141, 3, 141, 5,
	141, 2820, 10, 141, 3, 141, 5, 141, 2823, 10, 141, 3, 141, 3, 141, 3, 142,
	3, 142, 3, 142, 3, 143, 3, 143, 3, 143, 3, 143, 3, 143, 3, 143, 5, 143,
	2836, 10, 143, 3, 144, 3, 144, 5, 144, 2840, 10, 144, 3, 145, 3, 145, 3,
	145, 3, 145, 3, 145, 3, 145, 5, 145, 2848, 10, 145, 3, 146, 3, 146, 3,
	146, 3, 146, 5, 146, 2854, 10, 146, 3, 147, 3, 147, 3, 147, 3, 147, 7,
	147, 2860, 10, 147, 12, 147, 14, 147, 2863, 11, 147, 3, 147, 3, 147, 3,
	147, 3, 147, 5, 147, 2869, 10, 147, 3, 147, 3, 147, 3, 147, 3, 147, 5,
	147, 2875, 10, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3,
	147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 5, 147, 2890, 10,
	147, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 5, 148, 2899,
	10, 148, 3, 148, 3, 148, 3, 149, 3, 149, 5, 149, 2905, 10, 149, 3, 150,
	3, 150, 3, 150, 3, 150, 5, 150, 2911, 10, 150, 3, 150, 5, 150, 2914, 10,
	150, 3, 150, 3, 150, 5, 150, 2918, 10, 150, 3, 150, 3, 150, 3, 150, 7,
	150, 2923, 10, 150, 12, 150, 14, 150, 2926, 11, 150, 3, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 5, 151, 2933, 10, 151, 3, 151, 5, 151, 2936, 10, 151,
	3, 151, 3, 151, 3, 151, 3, 151, 5, 151, 2942, 10, 151, 3, 151, 3, 151,
	3, 151, 3, 151, 5, 151, 2948, 10, 151, 5, 151, 2950, 10, 151, 3, 151, 3,
	151, 3, 151, 3, 151, 5, 151, 2956, 10, 151, 3, 151, 5, 151, 2959, 10, 151,
	5, 151, 2961, 10, 151, 3, 151, 3, 151, 3, 151, 3, 151, 5, 151, 2967, 10,
	151, 5, 151, 2969, 10, 151, 3, 151, 3, 151, 3, 152, 3, 152, 3, 152, 3,
	152, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 5, 152, 2983, 10,
	152, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 5, 152, 2990, 10, 152, 3,
	152, 3, 152, 3, 153, 3, 153, 3, 153, 5, 153, 2997, 10, 153, 3, 153, 3,
	153, 3, 153, 3, 153, 3, 153, 5, 153, 3004, 10, 153, 3, 153, 3, 153, 3,
	154, 3, 154, 3, 154, 5, 154, 3011, 10, 154, 3, 154, 3, 154, 3, 155, 3,
	155, 3, 155, 5, 155, 3018, 10, 155, 3, 155, 3, 155, 3, 155, 3, 155, 3,
	155, 5, 155, 3025, 10, 155, 3, 155, 3, 155, 3, 156, 3, 156, 5, 156, 3031,
	10, 156, 3, 157, 3, 157, 3, 157, 5, 157, 3036, 10, 157, 3, 157, 3, 157,
	3, 158, 3, 158, 3, 158, 7, 158, 3043, 10, 158, 12, 158, 14, 158, 3046,
	11, 158, 3, 159, 3, 159, 5, 159, 3050, 10, 159, 3, 160, 3, 160, 3, 161,
	3, 161, 3, 162, 5, 162, 3057, 10, 162, 3, 162, 3, 162, 3, 163, 3, 163,
	3, 163, 3, 163, 3, 163, 5, 163, 3066, 10, 163, 3, 164, 3, 164, 5, 164,
	3070, 10, 164, 3, 164, 3, 164, 3, 164, 3, 164, 5, 164, 3076, 10, 164, 3,
	164, 5, 164, 3079, 10, 164, 3, 165, 3, 165, 5, 165, 3083, 10, 165, 3, 166,
	3, 166, 3, 166, 5, 166, 3088, 10, 166, 3, 166, 3, 166, 5, 166, 3092, 10,
	166, 3, 166, 3, 166, 5, 166, 3096, 10, 166, 3, 166, 3, 166, 5, 166, 3100,
	10, 166, 3, 167, 3, 167, 3, 168, 3, 168, 3, 168, 5, 168, 3107, 10, 168,
	3, 169, 3, 169, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170,
	3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 5, 170,
	3126, 10, 170, 3, 171, 3, 171, 3, 172, 3, 172, 5, 172, 3132, 10, 172, 3,
	172, 2, 6, 174, 188, 192, 226, 173, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56,
	58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92,
	94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122,
	124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152,
	154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182,
	184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212,
	214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242,
	244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272,
	274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302,
	304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332,
	334, 336, 338, 340, 342, 2, 61, 3, 2, 406, 407, 4, 2, 406, 406, 409, 409,
	4, 2, 245, 245, 380, 380, 4, 2, 406, 407, 409, 409, 4, 2, 110, 110, 128,
	128, 4, 2, 10, 10, 53, 53, 3, 2, 135, 136, 4, 2, 326, 327, 339, 339, 4,
	2, 129, 129, 354, 354, 5, 2, 256, 256, 357, 357, 396, 396, 5, 2, 168, 168,
	208, 208, 250, 250, 4, 2, 115, 115, 117, 117, 5, 2, 241, 241, 278, 278,
	304, 304, 4, 2, 271, 271, 292, 292, 5, 2, 254, 254, 320, 320, 322, 322,
	3, 2, 341, 342, 5, 2, 308, 308, 349, 349, 365, 365, 5, 2, 200, 200, 251,
	251, 267, 267, 4, 2, 267, 267, 364, 364, 5, 2, 79, 79, 218, 218, 364, 364,
	5, 2, 110, 110, 224, 224, 381, 381, 4, 2, 304, 304, 360, 360, 4, 2, 186,
	186, 294, 294, 3, 2, 326, 327, 4, 2, 168, 168, 190, 190, 3, 2, 174, 175,
	6, 2, 219, 219, 328, 328, 361, 361, 409, 409, 4, 2, 268, 268, 358, 358,
	6, 2, 253, 253, 260, 260, 289, 289, 369, 369, 5, 2, 324, 324, 341, 341,
	359, 359, 4, 2, 198, 198, 346, 346, 3, 2, 438, 439, 3, 2, 435, 437, 4,
	2, 438, 439, 441, 443, 5, 2, 5, 5, 8, 8, 165, 165, 4, 2, 5, 5, 55, 55,
	4, 2, 352, 352, 354, 354, 4, 2, 107, 107, 264, 264, 4, 2, 125, 125, 276,
	276, 5, 2, 105, 105, 228, 228, 276, 276, 5, 2, 105, 105, 276, 276, 295,
	295, 4, 2, 85, 85, 353, 353, 4, 2, 39, 39, 126, 126, 4, 2, 112, 112, 406,
	407, 5, 2, 79, 79, 100, 100, 149, 149, 6, 2, 105, 105, 276, 276, 295, 295,
	347, 347, 4, 2, 407, 407, 409, 409, 5, 2, 248, 248, 338, 338, 355, 355,
	7, 2, 215, 215, 297, 297, 303, 303, 371, 373, 393, 394, 3, 2, 232, 233,
	4, 2, 337, 337, 354, 354, 5, 2, 79, 79, 115, 115, 341, 341, 4, 2, 26, 26,
	109, 109, 4, 2, 297, 297, 407, 407, 3, 2, 411, 412, 4, 2, 407, 407, 411,
	411, 46, 2, 74, 74, 107, 107, 198, 198, 206, 206, 208, 208, 215, 216, 219,
	221, 225, 226, 228, 228, 230, 233, 245, 245, 247, 248, 250, 250, 253, 253,
	256, 256, 258, 260, 264, 269, 271, 274, 276, 276, 279, 279, 281, 281, 283,
	285, 287, 299, 303, 303, 307, 307, 309, 309, 312, 313, 315, 315, 317, 318,
	321, 328, 330, 335, 337, 339, 341, 341, 343, 343, 346, 348, 350, 359, 361,
	362, 364, 364, 366, 373, 377, 380, 384, 384, 386, 390, 392, 399, 408, 408,
	3, 2, 417, 424, 7, 2, 270, 270, 286, 286, 301, 301, 376, 376, 437, 437,
	2, 3649, 2, 347, 3, 2, 2, 2, 4, 352, 3, 2, 2, 2, 6, 360, 3, 2, 2, 2, 8,
	368, 3, 2, 2, 2, 10, 374, 3, 2, 2, 2, 12, 391, 3, 2, 2, 2, 14, 518, 3,
	2, 2, 2, 16, 527, 3, 2, 2, 2, 18, 530, 3, 2, 2, 2, 20, 569, 3, 2, 2, 2,
	22, 572, 3, 2, 2, 2, 24, 612, 3, 2, 2, 2, 26, 615, 3, 2, 2, 2, 28, 631,
	3, 2, 2, 2, 30, 672, 3, 2, 2, 2, 32, 685, 3, 2, 2, 2, 34, 709, 3, 2, 2,
	2, 36, 728, 3, 2, 2, 2, 38, 730, 3, 2, 2, 2, 40, 779, 3, 2, 2, 2, 42, 806,
	3, 2, 2, 2, 44, 847, 3, 2, 2, 2, 46, 870, 3, 2, 2, 2, 48, 872, 3, 2, 2,
	2, 50, 903, 3, 2, 2, 2, 52, 925, 3, 2, 2, 2, 54, 955, 3, 2, 2, 2, 56, 957,
	3, 2, 2, 2, 58, 995, 3, 2, 2, 2, 60, 1040, 3, 2, 2, 2, 62, 1059, 3, 2,
	2, 2, 64, 1061, 3, 2, 2, 2, 66, 1086, 3, 2, 2, 2, 68, 1088, 3, 2, 2, 2,
	70, 1096, 3, 2, 2, 2, 72, 1098, 3, 2, 2, 2, 74, 1101, 3, 2, 2, 2, 76, 1104,
	3, 2, 2, 2, 78, 1106, 3, 2, 2, 2, 80, 1108, 3, 2, 2, 2, 82, 1110, 3, 2,
	2, 2, 84, 1139, 3, 2, 2, 2, 86, 1141, 3, 2, 2, 2, 88, 1144, 3, 2, 2, 2,
	90, 1153, 3, 2, 2, 2, 92, 1161, 3, 2, 2, 2, 94, 1168, 3, 2, 2, 2, 96, 1191,
	3, 2, 2, 2, 98, 1193, 3, 2, 2, 2, 100, 1204, 3, 2, 2, 2, 102, 1206, 3,
	2, 2, 2, 104, 1220, 3, 2, 2, 2, 106, 1230, 3, 2, 2, 2, 108, 1240, 3, 2,
	2, 2, 110, 1250, 3, 2, 2, 2, 112, 1267, 3, 2, 2, 2, 114, 1284, 3, 2, 2,
	2, 116, 1294, 3, 2, 2, 2, 118, 1296, 3, 2, 2, 2, 120, 1303, 3, 2, 2, 2,
	122, 1341, 3, 2, 2, 2, 124, 1369, 3, 2, 2, 2, 126, 1412, 3, 2, 2, 2, 128,
	1416, 3, 2, 2, 2, 130, 1429, 3, 2, 2, 2, 132, 1479, 3, 2, 2, 2, 134, 1507,
	3, 2, 2, 2, 136, 1548, 3, 2, 2, 2, 138, 1627, 3, 2, 2, 2, 140, 1629, 3,
	2, 2, 2, 142, 1633, 3, 2, 2, 2, 144, 1638, 3, 2, 2, 2, 146, 1642, 3, 2,
	2, 2, 148, 1651, 3, 2, 2, 2, 150, 1656, 3, 2, 2, 2, 152, 1668, 3, 2, 2,
	2, 154, 1670, 3, 2, 2, 2, 156, 1719, 3, 2, 2, 2, 158, 1749, 3, 2, 2, 2,
	160, 1784, 3, 2, 2, 2, 162, 1796, 3, 2, 2, 2, 164, 1803, 3, 2, 2, 2, 166,
	1842, 3, 2, 2, 2, 168, 1859, 3, 2, 2, 2, 170, 1932, 3, 2, 2, 2, 172, 1936,
	3, 2, 2, 2, 174, 1983, 3, 2, 2, 2, 176, 2011, 3, 2, 2, 2, 178, 2013, 3,
	2, 2, 2, 180, 2015, 3, 2, 2, 2, 182, 2028, 3, 2, 2, 2, 184, 2056, 3, 2,
	2, 2, 186, 2058, 3, 2, 2, 2, 188, 2066, 3, 2, 2, 2, 190, 2138, 3, 2, 2,
	2, 192, 2146, 3, 2, 2, 2, 194, 2163, 3, 2, 2, 2, 196, 2165, 3, 2, 2, 2,
	198, 2201, 3, 2, 2, 2, 200, 2210, 3, 2, 2, 2, 202, 2217, 3, 2, 2, 2, 204,
	2235, 3, 2, 2, 2, 206, 2260, 3, 2, 2, 2, 208, 2262, 3, 2, 2, 2, 210, 2269,
	3, 2, 2, 2, 212, 2273, 3, 2, 2, 2, 214, 2275, 3, 2, 2, 2, 216, 2332, 3,
	2, 2, 2, 218, 2334, 3, 2, 2, 2, 220, 2340, 3, 2, 2, 2, 222, 2369, 3, 2,
	2, 2, 224, 2371, 3, 2, 2, 2, 226, 2385, 3, 2, 2, 2, 228, 2446, 3, 2, 2,
	2, 230, 2449, 3, 2, 2, 2, 232, 2453, 3, 2, 2, 2, 234, 2468, 3, 2, 2, 2,
	236, 2473, 3, 2, 2, 2, 238, 2503, 3, 2, 2, 2, 240, 2505, 3, 2, 2, 2, 242,
	2514, 3, 2, 2, 2, 244, 2623, 3, 2, 2, 2, 246, 2625, 3, 2, 2, 2, 248, 2630,
	3, 2, 2, 2, 250, 2636, 3, 2, 2, 2, 252, 2649, 3, 2, 2, 2, 254, 2662, 3,
	2, 2, 2, 256, 2706, 3, 2, 2, 2, 258, 2708, 3, 2, 2, 2, 260, 2721, 3, 2,
	2, 2, 262, 2723, 3, 2, 2, 2, 264, 2725, 3, 2, 2, 2, 266, 2734, 3, 2, 2,
	2, 268, 2742, 3, 2, 2, 2, 270, 2746, 3, 2, 2, 2, 272, 2750, 3, 2, 2, 2,
	274, 2764, 3, 2, 2, 2, 276, 2807, 3, 2, 2, 2, 278, 2809, 3, 2, 2, 2, 280,
	2811, 3, 2, 2, 2, 282, 2826, 3, 2, 2, 2, 284, 2835, 3, 2, 2, 2, 286, 2839,
	3, 2, 2, 2, 288, 2847, 3, 2, 2, 2, 290, 2853, 3, 2, 2, 2, 292, 2889, 3,
	2, 2, 2, 294, 2891, 3, 2, 2, 2, 296, 2904, 3, 2, 2, 2, 298, 2906, 3, 2,
	2, 2, 300, 2927, 3, 2, 2, 2, 302, 2989, 3, 2, 2, 2, 304, 3003, 3, 2, 2,
	2, 306, 3010, 3, 2, 2, 2, 308, 3024, 3, 2, 2, 2, 310, 3030, 3, 2, 2, 2,
	312, 3035, 3, 2, 2, 2, 314, 3039, 3, 2, 2, 2, 316, 3049, 3, 2, 2, 2, 318,
	3051, 3, 2, 2, 2, 320, 3053, 3, 2, 2, 2, 322, 3056, 3, 2, 2, 2, 324, 3065,
	3, 2, 2, 2, 326, 3067, 3, 2, 2, 2, 328, 3082, 3, 2, 2, 2, 330, 3099, 3,
	2, 2, 2, 332, 3101, 3, 2, 2, 2, 334, 3106, 3, 2, 2, 2, 336, 3108, 3, 2,
	2, 2, 338, 3125, 3, 2, 2, 2, 340, 3127, 3, 2, 2, 2, 342, 3129, 3, 2, 2,
	2, 344, 346, 5, 4, 3, 2, 345, 344, 3, 2, 2, 2, 346, 349, 3, 2, 2, 2, 347,
	345, 3, 2, 2, 2, 347, 348, 3, 2, 2, 2, 348, 350, 3, 2, 2, 2, 349, 347,
	3, 2, 2, 2, 350, 351, 7, 2, 2, 3, 351, 3, 3, 2, 2, 2, 352, 354, 5, 6, 4,
	2, 353, 355, 5, 140, 71, 2, 354, 353, 3, 2, 2, 2, 354, 355, 3, 2, 2, 2,
	355, 5, 3, 2, 2, 2, 356, 358, 5, 8, 5, 2, 357, 359, 7, 433, 2, 2, 358,
	357, 3, 2, 2, 2, 358, 359, 3, 2, 2, 2, 359, 361, 3, 2, 2, 2, 360, 356,
	3, 2, 2, 2, 361, 362, 3, 2, 2, 2, 362, 360, 3, 2, 2, 2, 362, 363, 3, 2,
	2, 2, 363, 7, 3, 2, 2, 2, 364, 369, 5, 10, 6, 2, 365, 369, 5, 12, 7, 2,
	366, 369, 5, 14, 8, 2, 367, 369, 5, 16, 9, 2, 368, 364, 3, 2, 2, 2, 368,
	365, 3, 2, 2, 2, 368, 366, 3, 2, 2, 2, 368, 367, 3, 2, 2, 2, 369, 9, 3,
	2, 2, 2, 370, 375, 5, 18, 10, 2, 371, 375, 5, 22, 12, 2, 372, 375, 5, 26,
	14, 2, 373, 375, 5, 28, 15, 2, 374, 370, 3, 2, 2, 2, 374, 371, 3, 2, 2,
	2, 374, 372, 3, 2, 2, 2, 374, 373, 3, 2, 2, 2, 375, 11, 3, 2, 2, 2, 376,
	392, 5, 38, 20, 2, 377, 392, 5, 40, 21, 2, 378, 392, 5, 42, 22, 2, 379,
	392, 5, 48, 25, 2, 380, 392, 5, 50, 26, 2, 381, 392, 5, 112, 57, 2, 382,
	392, 5, 52, 27, 2, 383, 392, 5, 56, 29, 2, 384, 392, 5, 58, 30, 2, 385,
	392, 5, 102, 52, 2, 386, 392, 5, 104, 53, 2, 387, 392, 5, 106, 54, 2, 388,
	392, 5, 108, 55, 2, 389, 392, 5, 114, 58, 2, 390, 392, 5, 110, 56, 2, 391,
	376, 3, 2, 2, 2, 391, 377, 3, 2, 2, 2, 391, 378, 3, 2, 2, 2, 391, 379,
	3, 2, 2, 2, 391, 380, 3, 2, 2, 2, 391, 381, 3, 2, 2, 2, 391, 382, 3, 2,
	2, 2, 391, 383, 3, 2, 2, 2, 391, 384, 3, 2, 2, 2, 391, 385, 3, 2, 2, 2,
	391, 386, 3, 2, 2, 2, 391, 387, 3, 2, 2, 2, 391, 388, 3, 2, 2, 2, 391,
	389, 3, 2, 2, 2, 391, 390, 3, 2, 2, 2, 392, 13, 3, 2, 2, 2, 393, 395, 7,
	13, 2, 2, 394, 396, 7, 433, 2, 2, 395, 394, 3, 2, 2, 2, 395, 396, 3, 2,
	2, 2, 396, 398, 3, 2, 2, 2, 397, 399, 5, 6, 4, 2, 398, 397, 3, 2, 2, 2,
	398, 399, 3, 2, 2, 2, 399, 400, 3, 2, 2, 2, 400, 402, 7, 61, 2, 2, 401,
	403, 7, 433, 2, 2, 402, 401, 3, 2, 2, 2, 402, 403, 3, 2, 2, 2, 403, 519,
	3, 2, 2, 2, 404, 406, 7, 15, 2, 2, 405, 407, 7, 433, 2, 2, 406, 405, 3,
	2, 2, 2, 406, 407, 3, 2, 2, 2, 407, 519, 3, 2, 2, 2, 408, 410, 7, 36, 2,
	2, 409, 411, 7, 433, 2, 2, 410, 409, 3, 2, 2, 2, 410, 411, 3, 2, 2, 2,
	411, 519, 3, 2, 2, 2, 412, 413, 7, 81, 2, 2, 413, 415, 5, 334, 168, 2,
	414, 416, 7, 433, 2, 2, 415, 414, 3, 2, 2, 2, 415, 416, 3, 2, 2, 2, 416,
	519, 3, 2, 2, 2, 417, 418, 5, 334, 168, 2, 418, 420, 7, 434, 2, 2, 419,
	421, 7, 433, 2, 2, 420, 419, 3, 2, 2, 2, 420, 421, 3, 2, 2, 2, 421, 519,
	3, 2, 2, 2, 422, 423, 7, 89, 2, 2, 423, 424, 5, 188, 95, 2, 424, 427, 5,
	8, 5, 2, 425, 426, 7, 60, 2, 2, 426, 428, 5, 8, 5, 2, 427, 425, 3, 2, 2,
	2, 427, 428, 3, 2, 2, 2, 428, 430, 3, 2, 2, 2, 429, 431, 7, 433, 2, 2,
	430, 429, 3, 2, 2, 2, 430, 431, 3, 2, 2, 2, 431, 519, 3, 2, 2, 2, 432,
	434, 7, 146, 2, 2, 433, 435, 5, 174, 88, 2, 434, 433, 3, 2, 2, 2, 434,
	435, 3, 2, 2, 2, 435, 437, 3, 2, 2, 2, 436, 438, 7, 433, 2, 2, 437, 436,
	3, 2, 2, 2, 437, 438, 3, 2, 2, 2, 438, 519, 3, 2, 2, 2, 439, 445, 7, 378,
	2, 2, 440, 441, 9, 2, 2, 2, 441, 442, 7, 432, 2, 2, 442, 443, 9, 3, 2,
	2, 443, 444, 7, 432, 2, 2, 444, 446, 9, 2, 2, 2, 445, 440, 3, 2, 2, 2,
	445, 446, 3, 2, 2, 2, 446, 448, 3, 2, 2, 2, 447, 449, 7, 433, 2, 2, 448,
	447, 3, 2, 2, 2, 448, 449, 3, 2, 2, 2, 449, 519, 3, 2, 2, 2, 450, 451,
	7, 13, 2, 2, 451, 453, 7, 384, 2, 2, 452, 454, 7, 433, 2, 2, 453, 452,
	3, 2, 2, 2, 453, 454, 3, 2, 2, 2, 454, 456, 3, 2, 2, 2, 455, 457, 5, 6,
	4, 2, 456, 455, 3, 2, 2, 2, 456, 457, 3, 2, 2, 2, 457, 458, 3, 2, 2, 2,
	458, 459, 7, 61, 2, 2, 459, 461, 7, 384, 2, 2, 460, 462, 7, 433, 2, 2,
	461, 460, 3, 2, 2, 2, 461, 462, 3, 2, 2, 2, 462, 463, 3, 2, 2, 2, 463,
	464, 7, 13, 2, 2, 464, 466, 7, 221, 2, 2, 465, 467, 7, 433, 2, 2, 466,
	465, 3, 2, 2, 2, 466, 467, 3, 2, 2, 2, 467, 469, 3, 2, 2, 2, 468, 470,
	5, 6, 4, 2, 469, 468, 3, 2, 2, 2, 469, 470, 3, 2, 2, 2, 470, 471, 3, 2,
	2, 2, 471, 472, 7, 61, 2, 2, 472, 474, 7, 221, 2, 2, 473, 475, 7, 433,
	2, 2, 474, 473, 3, 2, 2, 2, 474, 475, 3, 2, 2, 2, 475, 519, 3, 2, 2, 2,
	476, 477, 7, 191, 2, 2, 477, 478, 9, 4, 2, 2, 478, 480, 5, 174, 88, 2,
	479, 481, 7, 433, 2, 2, 480, 479, 3, 2, 2, 2, 480, 481, 3, 2, 2, 2, 481,
	519, 3, 2, 2, 2, 482, 483, 7, 194, 2, 2, 483, 493, 5, 188, 95, 2, 484,
	494, 5, 8, 5, 2, 485, 487, 7, 15, 2, 2, 486, 488, 7, 433, 2, 2, 487, 486,
	3, 2, 2, 2, 487, 488, 3, 2, 2, 2, 488, 494, 3, 2, 2, 2, 489, 491, 7, 36,
	2, 2, 490, 492, 7, 433, 2, 2, 491, 490, 3, 2, 2, 2, 491, 492, 3, 2, 2,
	2, 492, 494, 3, 2, 2, 2, 493, 484, 3, 2, 2, 2, 493, 485, 3, 2, 2, 2, 493,
	489, 3, 2, 2, 2, 494, 519, 3, 2, 2, 2, 495, 496, 7, 134, 2, 2, 496, 498,
	5, 174, 88, 2, 497, 499, 7, 433, 2, 2, 498, 497, 3, 2, 2, 2, 498, 499,
	3, 2, 2, 2, 499, 519, 3, 2, 2, 2, 500, 501, 7, 138, 2, 2, 501, 502, 7,
	430, 2, 2, 502, 503, 9, 5, 2, 2, 503, 504, 7, 432, 2, 2, 504, 505, 5, 172,
	87, 2, 505, 506, 7, 432, 2, 2, 506, 511, 5, 172, 87, 2, 507, 508, 7, 432,
	2, 2, 508, 510, 5, 172, 87, 2, 509, 507, 3, 2, 2, 2, 510, 513, 3, 2, 2,
	2, 511, 509, 3, 2, 2, 2, 511, 512, 3, 2, 2, 2, 512, 514, 3, 2, 2, 2, 513,
	511, 3, 2, 2, 2, 514, 516, 7, 431, 2, 2, 515, 517, 7, 433, 2, 2, 516, 515,
	3, 2, 2, 2, 516, 517, 3, 2, 2, 2, 517, 519, 3, 2, 2, 2, 518, 393, 3, 2,
	2, 2, 518, 404, 3, 2, 2, 2, 518, 408, 3, 2, 2, 2, 518, 412, 3, 2, 2, 2,
	518, 417, 3, 2, 2, 2, 518, 422, 3, 2, 2, 2, 518, 432, 3, 2, 2, 2, 518,
	439, 3, 2, 2, 2, 518, 450, 3, 2, 2, 2, 518, 476, 3, 2, 2, 2, 518, 482,
	3, 2, 2, 2, 518, 495, 3, 2, 2, 2, 518, 500, 3, 2, 2, 2, 519, 15, 3, 2,
	2, 2, 520, 528, 5, 122, 62, 2, 521, 528, 5, 124, 63, 2, 522, 528, 5, 126,
	64, 2, 523, 528, 5, 132, 67, 2, 524, 528, 5, 136, 69, 2, 525, 528, 5, 138,
	70, 2, 526, 528, 5, 142, 72, 2, 527, 520, 3, 2, 2, 2, 527, 521, 3, 2, 2,
	2, 527, 522, 3, 2, 2, 2, 527, 523, 3, 2, 2, 2, 527, 524, 3, 2, 2, 2, 527,
	525, 3, 2, 2, 2, 527, 526, 3, 2, 2, 2, 528, 17, 3, 2, 2, 2, 529, 531, 5,
	180, 91, 2, 530, 529, 3, 2, 2, 2, 530, 531, 3, 2, 2, 2, 531, 532, 3, 2,
	2, 2, 532, 534, 7, 51, 2, 2, 533, 535, 5, 200, 101, 2, 534, 533, 3, 2,
	2, 2, 534, 535, 3, 2, 2, 2, 535, 537, 3, 2, 2, 2, 536, 538, 7, 78, 2, 2,
	537, 536, 3, 2, 2, 2, 537, 538, 3, 2, 2, 2, 538, 539, 3, 2, 2, 2, 539,
	541, 5, 20, 11, 2, 540, 542, 5, 252, 127, 2, 541, 540, 3, 2, 2, 2, 541,
	542, 3, 2, 2, 2, 542, 544, 3, 2, 2, 2, 543, 545, 5, 32, 17, 2, 544, 543,
	3, 2, 2, 2, 544, 545, 3, 2, 2, 2, 545, 548, 3, 2, 2, 2, 546, 547, 7, 78,
	2, 2, 547, 549, 5, 224, 113, 2, 548, 546, 3, 2, 2, 2, 548, 549, 3, 2, 2,
	2, 549, 551, 3, 2, 2, 2, 550, 552, 5, 30, 16, 2, 551, 550, 3, 2, 2, 2,
	551, 552, 3, 2, 2, 2, 552, 554, 3, 2, 2, 2, 553, 555, 5, 206, 104, 2, 554,
	553, 3, 2, 2, 2, 554, 555, 3, 2, 2, 2, 555, 557, 3, 2, 2, 2, 556, 558,
	5, 214, 108, 2, 557, 556, 3, 2, 2, 2, 557, 558, 3, 2, 2, 2, 558, 560, 3,
	2, 2, 2, 559, 561, 7, 433, 2, 2, 560, 559, 3, 2, 2, 2, 560, 561, 3, 2,
	2, 2, 561, 19, 3, 2, 2, 2, 562, 564, 5, 334, 168, 2, 563, 565, 5, 250,
	126, 2, 564, 563, 3, 2, 2, 2, 564, 565, 3, 2, 2, 2, 565, 570, 3, 2, 2,
	2, 566, 570, 5, 310, 156, 2, 567, 570, 5, 116, 59, 2, 568, 570, 7, 406,
	2, 2, 569, 562, 3, 2, 2, 2, 569, 566, 3, 2, 2, 2, 569, 567, 3, 2, 2, 2,
	569, 568, 3, 2, 2, 2, 570, 21, 3, 2, 2, 2, 571, 573, 5, 180, 91, 2, 572,
	571, 3, 2, 2, 2, 572, 573, 3, 2, 2, 2, 573, 574, 3, 2, 2, 2, 574, 576,
	7, 93, 2, 2, 575, 577, 5, 200, 101, 2, 576, 575, 3, 2, 2, 2, 576, 577,
	3, 2, 2, 2, 577, 579, 3, 2, 2, 2, 578, 580, 7, 95, 2, 2, 579, 578, 3, 2,
	2, 2, 579, 580, 3, 2, 2, 2, 580, 583, 3, 2, 2, 2, 581, 584, 5, 310, 156,
	2, 582, 584, 5, 116, 59, 2, 583, 581, 3, 2, 2, 2, 583, 582, 3, 2, 2, 2,
	584, 586, 3, 2, 2, 2, 585, 587, 5, 252, 127, 2, 586, 585, 3, 2, 2, 2, 586,
	587, 3, 2, 2, 2, 587, 592, 3, 2, 2, 2, 588, 589, 7, 430, 2, 2, 589, 590,
	5, 314, 158, 2, 590, 591, 7, 431, 2, 2, 591, 593, 3, 2, 2, 2, 592, 588,
	3, 2, 2, 2, 592, 593, 3, 2, 2, 2, 593, 595, 3, 2, 2, 2, 594, 596, 5, 32,
	17, 2, 595, 594, 3, 2, 2, 2, 595, 596, 3, 2, 2, 2, 596, 597, 3, 2, 2, 2,
	597, 599, 5, 24, 13, 2, 598, 600, 5, 206, 104, 2, 599, 598, 3, 2, 2, 2,
	599, 600, 3, 2, 2, 2, 600, 602, 3, 2, 2, 2, 601, 603, 5, 214, 108, 2, 602,
	601, 3, 2, 2, 2, 602, 603, 3, 2, 2, 2, 603, 605, 3, 2, 2, 2, 604, 606,
	7, 433, 2, 2, 605, 604, 3, 2, 2, 2, 605, 606, 3, 2, 2, 2, 606, 23, 3, 2,
	2, 2, 607, 613, 5, 264, 133, 2, 608, 613, 5, 242, 122, 2, 609, 613, 5,
	126, 64, 2, 610, 611, 7, 50, 2, 2, 611, 613, 7, 187, 2, 2, 612, 607, 3,
	2, 2, 2, 612, 608, 3, 2, 2, 2, 612, 609, 3, 2, 2, 2, 612, 610, 3, 2, 2,
	2, 613, 25, 3, 2, 2, 2, 614, 616, 5, 180, 91, 2, 615, 614, 3, 2, 2, 2,
	615, 616, 3, 2, 2, 2, 616, 617, 3, 2, 2, 2, 617, 619, 5, 192, 97, 2, 618,
	620, 5, 202, 102, 2, 619, 618, 3, 2, 2, 2, 619, 620, 3, 2, 2, 2, 620, 622,
	3, 2, 2, 2, 621, 623, 5, 206, 104, 2, 622, 621, 3, 2, 2, 2, 622, 623, 3,
	2, 2, 2, 623, 625, 3, 2, 2, 2, 624, 626, 5, 214, 108, 2, 625, 624, 3, 2,
	2, 2, 625, 626, 3, 2, 2, 2, 626, 628, 3, 2, 2, 2, 627, 629, 7, 433, 2,
	2, 628, 627, 3, 2, 2, 2, 628, 629, 3, 2, 2, 2, 629, 27, 3, 2, 2, 2, 630,
	632, 5, 180, 91, 2, 631, 630, 3, 2, 2, 2, 631, 632, 3, 2, 2, 2, 632, 633,
	3, 2, 2, 2, 633, 635, 7, 183, 2, 2, 634, 636, 5, 200, 101, 2, 635, 634,
	3, 2, 2, 2, 635, 636, 3, 2, 2, 2, 636, 639, 3, 2, 2, 2, 637, 640, 5, 310,
	156, 2, 638, 640, 5, 116, 59, 2, 639, 637, 3, 2, 2, 2, 639, 638, 3, 2,
	2, 2, 640, 642, 3, 2, 2, 2, 641, 643, 5, 250, 126, 2, 642, 641, 3, 2, 2,
	2, 642, 643, 3, 2, 2, 2, 643, 644, 3, 2, 2, 2, 644, 645, 7, 162, 2, 2,
	645, 650, 5, 184, 93, 2, 646, 647, 7, 432, 2, 2, 647, 649, 5, 184, 93,
	2, 648, 646, 3, 2, 2, 2, 649, 652, 3, 2, 2, 2, 650, 648, 3, 2, 2, 2, 650,
	651, 3, 2, 2, 2, 651, 654, 3, 2, 2, 2, 652, 650, 3, 2, 2, 2, 653, 655,
	5, 32, 17, 2, 654, 653, 3, 2, 2, 2, 654, 655, 3, 2, 2, 2, 655, 658, 3,
	2, 2, 2, 656, 657, 7, 78, 2, 2, 657, 659, 5, 224, 113, 2, 658, 656, 3,
	2, 2, 2, 658, 659, 3, 2, 2, 2, 659, 661, 3, 2, 2, 2, 660, 662, 5, 30, 16,
	2, 661, 660, 3, 2, 2, 2, 661, 662, 3, 2, 2, 2, 662, 664, 3, 2, 2, 2, 663,
	665, 5, 206, 104, 2, 664, 663, 3, 2, 2, 2, 664, 665, 3, 2, 2, 2, 665, 667,
	3, 2, 2, 2, 666, 668, 5, 214, 108, 2, 667, 666, 3, 2, 2, 2, 667, 668, 3,
	2, 2, 2, 668, 670, 3, 2, 2, 2, 669, 671, 7, 433, 2, 2, 670, 669, 3, 2,
	2, 2, 670, 671, 3, 2, 2, 2, 671, 29, 3, 2, 2, 2, 672, 683, 7, 193, 2, 2,
	673, 684, 5, 186, 94, 2, 674, 675, 7, 40, 2, 2, 675, 681, 7, 114, 2, 2,
	676, 678, 7, 271, 2, 2, 677, 676, 3, 2, 2, 2, 677, 678, 3, 2, 2, 2, 678,
	679, 3, 2, 2, 2, 679, 682, 5, 316, 159, 2, 680, 682, 7, 406, 2, 2, 681,
	677, 3, 2, 2, 2, 681, 680, 3, 2, 2, 2, 682, 684, 3, 2, 2, 2, 683, 673,
	3, 2, 2, 2, 683, 674, 3, 2, 2, 2, 684, 31, 3, 2, 2, 2, 685, 686, 7, 327,
	2, 2, 686, 691, 5, 34, 18, 2, 687, 688, 7, 432, 2, 2, 688, 690, 5, 34,
	18, 2, 689, 687, 3, 2, 2, 2, 690, 693, 3, 2, 2, 2, 691, 689, 3, 2, 2, 2,
	691, 692, 3, 2, 2, 2, 692, 705, 3, 2, 2, 2, 693, 691, 3, 2, 2, 2, 694,
	697, 7, 95, 2, 2, 695, 698, 7, 406, 2, 2, 696, 698, 5, 304, 153, 2, 697,
	695, 3, 2, 2, 2, 697, 696, 3, 2, 2, 2, 698, 703, 3, 2, 2, 2, 699, 700,
	7, 430, 2, 2, 700, 701, 5, 314, 158, 2, 701, 702, 7, 431, 2, 2, 702, 704,
	3, 2, 2, 2, 703, 699, 3, 2, 2, 2, 703, 704, 3, 2, 2, 2, 704, 706, 3, 2,
	2, 2, 705, 694, 3, 2, 2, 2, 705, 706, 3, 2, 2, 2, 706, 33, 3, 2, 2, 2,
	707, 710, 5, 36, 19, 2, 708, 710, 5, 174, 88, 2, 709, 707, 3, 2, 2, 2,
	709, 708, 3, 2, 2, 2, 710, 715, 3, 2, 2, 2, 711, 713, 7, 9, 2, 2, 712,
	711, 3, 2, 2, 2, 712, 713, 3, 2, 2, 2, 713, 714, 3, 2, 2, 2, 714, 716,
	5, 260, 131, 2, 715, 712, 3, 2, 2, 2, 715, 716, 3, 2, 2, 2, 716, 35, 3,
	2, 2, 2, 717, 721, 7, 247, 2, 2, 718, 721, 7, 284, 2, 2, 719, 721, 5, 304,
	153, 2, 720, 717, 3, 2, 2, 2, 720, 718, 3, 2, 2, 2, 720, 719, 3, 2, 2,
	2, 721, 722, 3, 2, 2, 2, 722, 725, 7, 425, 2, 2, 723, 726, 7, 435, 2, 2,
	724, 726, 5, 334, 168, 2, 725, 723, 3, 2, 2, 2, 725, 724, 3, 2, 2, 2, 726,
	729, 3, 2, 2, 2, 727, 729, 7, 400, 2, 2, 728, 720, 3, 2, 2, 2, 728, 727,
	3, 2, 2, 2, 729, 37, 3, 2, 2, 2, 730, 731, 7, 38, 2, 2, 731, 732, 7, 46,
	2, 2, 732, 736, 5, 334, 168, 2, 733, 734, 7, 33, 2, 2, 734, 735, 7, 413,
	2, 2, 735, 737, 9, 6, 2, 2, 736, 733, 3, 2, 2, 2, 736, 737, 3, 2, 2, 2,
	737, 750, 3, 2, 2, 2, 738, 740, 7, 117, 2, 2, 739, 741, 7, 133, 2, 2, 740,
	739, 3, 2, 2, 2, 740, 741, 3, 2, 2, 2, 741, 742, 3, 2, 2, 2, 742, 747,
	5, 296, 149, 2, 743, 744, 7, 432, 2, 2, 744, 746, 5, 296, 149, 2, 745,
	743, 3, 2, 2, 2, 746, 749, 3, 2, 2, 2, 747, 745, 3, 2, 2, 2, 747, 748,
	3, 2, 2, 2, 748, 751, 3, 2, 2, 2, 749, 747, 3, 2, 2, 2, 750, 738, 3, 2,
	2, 2, 750, 751, 3, 2, 2, 2, 751, 762, 3, 2, 2, 2, 752, 753, 7, 104, 2,
	2, 753, 754, 7, 117, 2, 2, 754, 759, 5, 296, 149, 2, 755, 756, 7, 432,
	2, 2, 756, 758, 5, 296, 149, 2, 757, 755, 3, 2, 2, 2, 758, 761, 3, 2, 2,
	2, 759, 757, 3, 2, 2, 2, 759, 760, 3, 2, 2, 2, 760, 763, 3, 2, 2, 2, 761,
	759, 3, 2, 2, 2, 762, 752, 3, 2, 2, 2, 762, 763, 3, 2, 2, 2, 763, 766,
	3, 2, 2, 2, 764, 765, 7, 28, 2, 2, 765, 767, 5, 334, 168, 2, 766, 764,
	3, 2, 2, 2, 766, 767, 3, 2, 2, 2, 767, 777, 3, 2, 2, 2, 768, 769, 7, 195,
	2, 2, 769, 774, 5, 292, 147, 2, 770, 771, 7, 432, 2, 2, 771, 773, 5, 292,
	147, 2, 772, 770, 3, 2, 2, 2, 773, 776, 3, 2, 2, 2, 774, 772, 3, 2, 2,
	2, 774, 775, 3, 2, 2, 2, 775, 778, 3, 2, 2, 2, 776, 774, 3, 2, 2, 2, 777,
	768, 3, 2, 2, 2, 777, 778, 3, 2, 2, 2, 778, 39, 3, 2, 2, 2, 779, 781, 7,
	38, 2, 2, 780, 782, 7, 181, 2, 2, 781, 780, 3, 2, 2, 2, 781, 782, 3, 2,
	2, 2, 782, 784, 3, 2, 2, 2, 783, 785, 5, 320, 161, 2, 784, 783, 3, 2, 2,
	2, 784, 785, 3, 2, 2, 2, 785, 786, 3, 2, 2, 2, 786, 787, 7, 91, 2, 2, 787,
	788, 5, 334, 168, 2, 788, 789, 7, 117, 2, 2, 789, 790, 5, 236, 119, 2,
	790, 791, 7, 430, 2, 2, 791, 793, 5, 314, 158, 2, 792, 794, 9, 7, 2, 2,
	793, 792, 3, 2, 2, 2, 793, 794, 3, 2, 2, 2, 794, 795, 3, 2, 2, 2, 795,
	797, 7, 431, 2, 2, 796, 798, 5, 160, 81, 2, 797, 796, 3, 2, 2, 2, 797,
	798, 3, 2, 2, 2, 798, 801, 3, 2, 2, 2, 799, 800, 7, 117, 2, 2, 800, 802,
	5, 334, 168, 2, 801, 799, 3, 2, 2, 2, 801, 802, 3, 2, 2, 2, 802, 804, 3,
	2, 2, 2, 803, 805, 7, 433, 2, 2, 804, 803, 3, 2, 2, 2, 804, 805, 3, 2,
	2, 2, 805, 41, 3, 2, 2, 2, 806, 807, 7, 38, 2, 2, 807, 808, 9, 8, 2, 2,
	808, 811, 5, 308, 155, 2, 809, 810, 7, 433, 2, 2, 810, 812, 7, 407, 2,
	2, 811, 809, 3, 2, 2, 2, 811, 812, 3, 2, 2, 2, 812, 827, 3, 2, 2, 2, 813,
	815, 7, 430, 2, 2, 814, 813, 3, 2, 2, 2, 814, 815, 3, 2, 2, 2, 815, 816,
	3, 2, 2, 2, 816, 821, 5, 44, 23, 2, 817, 818, 7, 432, 2, 2, 818, 820, 5,
	44, 23, 2, 819, 817, 3, 2, 2, 2, 820, 823, 3, 2, 2, 2, 821, 819, 3, 2,
	2, 2, 821, 822, 3, 2, 2, 2, 822, 825, 3, 2, 2, 2, 823, 821, 3, 2, 2, 2,
	824, 826, 7, 431, 2, 2, 825, 824, 3, 2, 2, 2, 825, 826, 3, 2, 2, 2, 826,
	828, 3, 2, 2, 2, 827, 814, 3, 2, 2, 2, 827, 828, 3, 2, 2, 2, 828, 838,
	3, 2, 2, 2, 829, 830, 7, 195, 2, 2, 830, 835, 5, 46, 24, 2, 831, 832, 7,
	432, 2, 2, 832, 834, 5, 46, 24, 2, 833, 831, 3, 2, 2, 2, 834, 837, 3, 2,
	2, 2, 835, 833, 3, 2, 2, 2, 835, 836, 3, 2, 2, 2, 836, 839, 3, 2, 2, 2,
	837, 835, 3, 2, 2, 2, 838, 829, 3, 2, 2, 2, 838, 839, 3, 2, 2, 2, 839,
	842, 3, 2, 2, 2, 840, 841, 7, 73, 2, 2, 841, 843, 7, 143, 2, 2, 842, 840,
	3, 2, 2, 2, 842, 843, 3, 2, 2, 2, 843, 844, 3, 2, 2, 2, 844, 845, 7, 9,
	2, 2, 845, 846, 5, 6, 4, 2, 846, 43, 3, 2, 2, 2, 847, 851, 7, 406, 2, 2,
	848, 849, 5, 334, 168, 2, 849, 850, 7, 425, 2, 2, 850, 852, 3, 2, 2, 2,
	851, 848, 3, 2, 2, 2, 851, 852, 3, 2, 2, 2, 852, 854, 3, 2, 2, 2, 853,
	855, 7, 9, 2, 2, 854, 853, 3, 2, 2, 2, 854, 855, 3, 2, 2, 2, 855, 856,
	3, 2, 2, 2, 856, 858, 5, 326, 164, 2, 857, 859, 7, 189, 2, 2, 858, 857,
	3, 2, 2, 2, 858, 859, 3, 2, 2, 2, 859, 862, 3, 2, 2, 2, 860, 861, 7, 413,
	2, 2, 861, 863, 5, 328, 165, 2, 862, 860, 3, 2, 2, 2, 862, 863, 3, 2, 2,
	2, 863, 865, 3, 2, 2, 2, 864, 866, 9, 9, 2, 2, 865, 864, 3, 2, 2, 2, 865,
	866, 3, 2, 2, 2, 866, 45, 3, 2, 2, 2, 867, 871, 7, 256, 2, 2, 868, 871,
	7, 343, 2, 2, 869, 871, 5, 144, 73, 2, 870, 867, 3, 2, 2, 2, 870, 868,
	3, 2, 2, 2, 870, 869, 3, 2, 2, 2, 871, 47, 3, 2, 2, 2, 872, 873, 7, 38,
	2, 2, 873, 874, 7, 166, 2, 2, 874, 875, 5, 334, 168, 2, 875, 876, 7, 117,
	2, 2, 876, 877, 5, 236, 119, 2, 877, 878, 7, 430, 2, 2, 878, 879, 5, 314,
	158, 2, 879, 898, 7, 431, 2, 2, 880, 886, 7, 195, 2, 2, 881, 887, 7, 269,
	2, 2, 882, 883, 7, 356, 2, 2, 883, 884, 7, 407, 2, 2, 884, 887, 9, 10,
	2, 2, 885, 887, 7, 370, 2, 2, 886, 881, 3, 2, 2, 2, 886, 882, 3, 2, 2,
	2, 886, 885, 3, 2, 2, 2, 887, 890, 3, 2, 2, 2, 888, 889, 7, 432, 2, 2,
	889, 891, 7, 315, 2, 2, 890, 888, 3, 2, 2, 2, 890, 891, 3, 2, 2, 2, 891,
	896, 3, 2, 2, 2, 892, 893, 7, 432, 2, 2, 893, 894, 7, 282, 2, 2, 894, 895,
	7, 413, 2, 2, 895, 897, 5, 318, 160, 2, 896, 892, 3, 2, 2, 2, 896, 897,
	3, 2, 2, 2, 897, 899, 3, 2, 2, 2, 898, 880, 3, 2, 2, 2, 898, 899, 3, 2,
	2, 2, 899, 901, 3, 2, 2, 2, 900, 902, 7, 433, 2, 2, 901, 900, 3, 2, 2,
	2, 901, 902, 3, 2, 2, 2, 902, 49, 3, 2, 2, 2, 903, 904, 7, 38, 2, 2, 904,
	905, 7, 168, 2, 2, 905, 906, 5, 304, 153, 2, 906, 907, 7, 430, 2, 2, 907,
	909, 5, 150, 76, 2, 908, 910, 7, 432, 2, 2, 909, 908, 3, 2, 2, 2, 909,
	910, 3, 2, 2, 2, 910, 911, 3, 2, 2, 2, 911, 915, 7, 431, 2, 2, 912, 913,
	7, 117, 2, 2, 913, 916, 5, 334, 168, 2, 914, 916, 7, 50, 2, 2, 915, 912,
	3, 2, 2, 2, 915, 914, 3, 2, 2, 2, 915, 916, 3, 2, 2, 2, 916, 920, 3, 2,
	2, 2, 917, 918, 7, 377, 2, 2, 918, 921, 5, 334, 168, 2, 919, 921, 7, 50,
	2, 2, 920, 917, 3, 2, 2, 2, 920, 919, 3, 2, 2, 2, 920, 921, 3, 2, 2, 2,
	921, 923, 3, 2, 2, 2, 922, 924, 7, 433, 2, 2, 923, 922, 3, 2, 2, 2, 923,
	924, 3, 2, 2, 2, 924, 51, 3, 2, 2, 2, 925, 926, 7, 38, 2, 2, 926, 927,
	7, 190, 2, 2, 927, 932, 5, 306, 154, 2, 928, 929, 7, 430, 2, 2, 929, 930,
	5, 314, 158, 2, 930, 931, 7, 431, 2, 2, 931, 933, 3, 2, 2, 2, 932, 928,
	3, 2, 2, 2, 932, 933, 3, 2, 2, 2, 933, 943, 3, 2, 2, 2, 934, 935, 7, 195,
	2, 2, 935, 940, 5, 54, 28, 2, 936, 937, 7, 432, 2, 2, 937, 939, 5, 54,
	28, 2, 938, 936, 3, 2, 2, 2, 939, 942, 3, 2, 2, 2, 940, 938, 3, 2, 2, 2,
	940, 941, 3, 2, 2, 2, 941, 944, 3, 2, 2, 2, 942, 940, 3, 2, 2, 2, 943,
	934, 3, 2, 2, 2, 943, 944, 3, 2, 2, 2, 944, 945, 3, 2, 2, 2, 945, 946,
	7, 9, 2, 2, 946, 950, 5, 26, 14, 2, 947, 948, 7, 195, 2, 2, 948, 949, 7,
	23, 2, 2, 949, 951, 7, 123, 2, 2, 950, 947, 3, 2, 2, 2, 950, 951, 3, 2,
	2, 2, 951, 953, 3, 2, 2, 2, 952, 954, 7, 433, 2, 2, 953, 952, 3, 2, 2,
	2, 953, 954, 3, 2, 2, 2, 954, 53, 3, 2, 2, 2, 955, 956, 9, 11, 2, 2, 956,
	55, 3, 2, 2, 2, 957, 958, 7, 6, 2, 2, 958, 959, 7, 168, 2, 2, 959, 990,
	5, 304, 153, 2, 960, 961, 7, 162, 2, 2, 961, 962, 7, 430, 2, 2, 962, 963,
	7, 293, 2, 2, 963, 964, 7, 413, 2, 2, 964, 965, 9, 12, 2, 2, 965, 991,
	7, 431, 2, 2, 966, 967, 7, 4, 2, 2, 967, 991, 5, 152, 77, 2, 968, 969,
	7, 58, 2, 2, 969, 970, 7, 32, 2, 2, 970, 991, 5, 334, 168, 2, 971, 972,
	7, 195, 2, 2, 972, 973, 7, 23, 2, 2, 973, 974, 7, 4, 2, 2, 974, 975, 7,
	32, 2, 2, 975, 976, 5, 334, 168, 2, 976, 977, 7, 75, 2, 2, 977, 978, 7,
	98, 2, 2, 978, 979, 7, 430, 2, 2, 979, 980, 5, 314, 158, 2, 980, 981, 7,
	431, 2, 2, 981, 982, 7, 142, 2, 2, 982, 983, 5, 304, 153, 2, 983, 984,
	7, 430, 2, 2, 984, 985, 5, 314, 158, 2, 985, 986, 7, 431, 2, 2, 986, 991,
	3, 2, 2, 2, 987, 988, 7, 23, 2, 2, 988, 989, 7, 32, 2, 2, 989, 991, 5,
	334, 168, 2, 990, 960, 3, 2, 2, 2, 990, 966, 3, 2, 2, 2, 990, 968, 3, 2,
	2, 2, 990, 971, 3, 2, 2, 2, 990, 987, 3, 2, 2, 2, 991, 993, 3, 2, 2, 2,
	992, 994, 7, 433, 2, 2, 993, 992, 3, 2, 2, 2, 993, 994, 3, 2, 2, 2, 994,
	57, 3, 2, 2, 2, 995, 996, 7, 6, 2, 2, 996, 999, 7, 46, 2, 2, 997, 1000,
	5, 334, 168, 2, 998, 1000, 7, 40, 2, 2, 999, 997, 3, 2, 2, 2, 999, 998,
	3, 2, 2, 2, 1000, 1013, 3, 2, 2, 2, 1001, 1002, 7, 307, 2, 2, 1002, 1003,
	7, 309, 2, 2, 1003, 1004, 7, 413, 2, 2, 1004, 1014, 5, 334, 168, 2, 1005,
	1006, 7, 28, 2, 2, 1006, 1014, 5, 334, 168, 2, 1007, 1008, 7, 162, 2, 2,
	1008, 1011, 5, 60, 31, 2, 1009, 1010, 7, 195, 2, 2, 1010, 1012, 5, 100,
	51, 2, 1011, 1009, 3, 2, 2, 2, 1011, 1012, 3, 2, 2, 2, 1012, 1014, 3, 2,
	2, 2, 1013, 1001, 3, 2, 2, 2, 1013, 1005, 3, 2, 2, 2, 1013, 1007, 3, 2,
	2, 2, 1014, 1016, 3, 2, 2, 2, 1015, 1017, 7, 433, 2, 2, 1016, 1015, 3,
	2, 2, 2, 1016, 1017, 3, 2, 2, 2, 1017, 59, 3, 2, 2, 2, 1018, 1041, 5, 62,
	32, 2, 1019, 1041, 5, 64, 33, 2, 1020, 1041, 5, 68, 35, 2, 1021, 1041,
	5, 70, 36, 2, 1022, 1041, 5, 72, 37, 2, 1023, 1041, 5, 74, 38, 2, 1024,
	1041, 5, 76, 39, 2, 1025, 1041, 5, 78, 40, 2, 1026, 1041, 5, 80, 41, 2,
	1027, 1041, 5, 82, 42, 2, 1028, 1041, 5, 84, 43, 2, 1029, 1030, 7, 263,
	2, 2, 1030, 1041, 5, 294, 148, 2, 1031, 1041, 7, 3, 2, 2, 1032, 1041, 5,
	86, 44, 2, 1033, 1041, 5, 88, 45, 2, 1034, 1041, 5, 90, 46, 2, 1035, 1041,
	5, 92, 47, 2, 1036, 1041, 5, 94, 48, 2, 1037, 1041, 5, 96, 49, 2, 1038,
	1041, 5, 98, 50, 2, 1039, 1041, 5, 100, 51, 2, 1040, 1018, 3, 2, 2, 2,
	1040, 1019, 3, 2, 2, 2, 1040, 1020, 3, 2, 2, 2, 1040, 1021, 3, 2, 2, 2,
	1040, 1022, 3, 2, 2, 2, 1040, 1023, 3, 2, 2, 2, 1040, 1024, 3, 2, 2, 2,
	1040, 1025, 3, 2, 2, 2, 1040, 1026, 3, 2, 2, 2, 1040, 1027, 3, 2, 2, 2,
	1040, 1028, 3, 2, 2, 2, 1040, 1029, 3, 2, 2, 2, 1040, 1031, 3, 2, 2, 2,
	1040, 1032, 3, 2, 2, 2, 1040, 1033, 3, 2, 2, 2, 1040, 1034, 3, 2, 2, 2,
	1040, 1035, 3, 2, 2, 2, 1040, 1036, 3, 2, 2, 2, 1040, 1037, 3, 2, 2, 2,
	1040, 1038, 3, 2, 2, 2, 1040, 1039, 3, 2, 2, 2, 1041, 61, 3, 2, 2, 2, 1042,
	1043, 7, 210, 2, 2, 1043, 1060, 5, 318, 160, 2, 1044, 1045, 7, 211, 2,
	2, 1045, 1060, 7, 115, 2, 2, 1046, 1051, 7, 117, 2, 2, 1047, 1048, 7, 282,
	2, 2, 1048, 1049, 7, 413, 2, 2, 1049, 1052, 7, 117, 2, 2, 1050, 1052, 7,
	115, 2, 2, 1051, 1047, 3, 2, 2, 2, 1051, 1050, 3, 2, 2, 2, 1052, 1060,
	3, 2, 2, 2, 1053, 1054, 7, 212, 2, 2, 1054, 1060, 5, 318, 160, 2, 1055,
	1056, 7, 213, 2, 2, 1056, 1060, 5, 318, 160, 2, 1057, 1058, 7, 214, 2,
	2, 1058, 1060, 9, 13, 2, 2, 1059, 1042, 3, 2, 2, 2, 1059, 1044, 3, 2, 2,
	2, 1059, 1046, 3, 2, 2, 2, 1059, 1053, 3, 2, 2, 2, 1059, 1055, 3, 2, 2,
	2, 1059, 1057, 3, 2, 2, 2, 1060, 63, 3, 2, 2, 2, 1061, 1062, 7, 223, 2,
	2, 1062, 1078, 7, 413, 2, 2, 1063, 1079, 7, 115, 2, 2, 1064, 1075, 7, 117,
	2, 2, 1065, 1070, 5, 66, 34, 2, 1066, 1067, 7, 432, 2, 2, 1067, 1069, 5,
	66, 34, 2, 1068, 1066, 3, 2, 2, 2, 1069, 1072, 3, 2, 2, 2, 1070, 1068,
	3, 2, 2, 2, 1070, 1071, 3, 2, 2, 2, 1071, 1074, 3, 2, 2, 2, 1072, 1070,
	3, 2, 2, 2, 1073, 1065, 3, 2, 2, 2, 1074, 1077, 3, 2, 2, 2, 1075, 1073,
	3, 2, 2, 2, 1075, 1076, 3, 2, 2, 2, 1076, 1079, 3, 2, 2, 2, 1077, 1075,
	3, 2, 2, 2, 1078, 1063, 3, 2, 2, 2, 1078, 1064, 3, 2, 2, 2, 1079, 65, 3,
	2, 2, 2, 1080, 1081, 7, 209, 2, 2, 1081, 1082, 7, 413, 2, 2, 1082, 1087,
	5, 318, 160, 2, 1083, 1084, 7, 222, 2, 2, 1084, 1085, 7, 413, 2, 2, 1085,
	1087, 9, 14, 2, 2, 1086, 1080, 3, 2, 2, 2, 1086, 1083, 3, 2, 2, 2, 1087,
	67, 3, 2, 2, 2, 1088, 1089, 7, 33, 2, 2, 1089, 1090, 7, 413, 2, 2, 1090,
	1091, 9, 6, 2, 2, 1091, 69, 3, 2, 2, 2, 1092, 1093, 7, 234, 2, 2, 1093,
	1097, 5, 318, 160, 2, 1094, 1095, 7, 235, 2, 2, 1095, 1097, 9, 15, 2, 2,
	1096, 1092, 3, 2, 2, 2, 1096, 1094, 3, 2, 2, 2, 1097, 71, 3, 2, 2, 2, 1098,
	1099, 7, 240, 2, 2, 1099, 1100, 5, 318, 160, 2, 1100, 73, 3, 2, 2, 2, 1101,
	1102, 7, 256, 2, 2, 1102, 1103, 5, 318, 160, 2, 1103, 75, 3, 2, 2, 2, 1104,
	1105, 9, 16, 2, 2, 1105, 77, 3, 2, 2, 2, 1106, 1107, 9, 17, 2, 2, 1107,
	79, 3, 2, 2, 2, 1108, 1109, 9, 18, 2, 2, 1109, 81, 3, 2, 2, 2, 1110, 1111,
	7, 246, 2, 2, 1111, 1112, 7, 413, 2, 2, 1112, 1113, 9, 19, 2, 2, 1113,
	83, 3, 2, 2, 2, 1114, 1115, 7, 242, 2, 2, 1115, 1140, 5, 318, 160, 2, 1116,
	1117, 7, 383, 2, 2, 1117, 1140, 5, 318, 160, 2, 1118, 1119, 7, 244, 2,
	2, 1119, 1122, 7, 413, 2, 2, 1120, 1123, 5, 334, 168, 2, 1121, 1123, 7,
	409, 2, 2, 1122, 1120, 3, 2, 2, 2, 1122, 1121, 3, 2, 2, 2, 1123, 1140,
	3, 2, 2, 2, 1124, 1125, 7, 243, 2, 2, 1125, 1128, 7, 413, 2, 2, 1126, 1129,
	5, 334, 168, 2, 1127, 1129, 7, 409, 2, 2, 1128, 1126, 3, 2, 2, 2, 1128,
	1127, 3, 2, 2, 2, 1129, 1140, 3, 2, 2, 2, 1130, 1131, 7, 310, 2, 2, 1131,
	1132, 7, 413, 2, 2, 1132, 1140, 9, 13, 2, 2, 1133, 1134, 7, 382, 2, 2,
	1134, 1135, 7, 413, 2, 2, 1135, 1140, 9, 13, 2, 2, 1136, 1137, 7, 385,
	2, 2, 1137, 1138, 7, 413, 2, 2, 1138, 1140, 7, 407, 2, 2, 1139, 1114, 3,
	2, 2, 2, 1139, 1116, 3, 2, 2, 2, 1139, 1118, 3, 2, 2, 2, 1139, 1124, 3,
	2, 2, 2, 1139, 1130, 3, 2, 2, 2, 1139, 1133, 3, 2, 2, 2, 1139, 1136, 3,
	2, 2, 2, 1140, 85, 3, 2, 2, 2, 1141, 1142, 7, 306, 2, 2, 1142, 1143, 9,
	13, 2, 2, 1143, 87, 3, 2, 2, 2, 1144, 1145, 7, 330, 2, 2, 1145, 1146, 9,
	20, 2, 2, 1146, 89, 3, 2, 2, 2, 1147, 1148, 7, 344, 2, 2, 1148, 1154, 9,
	21, 2, 2, 1149, 1150, 7, 381, 2, 2, 1150, 1154, 5, 318, 160, 2, 1151, 1152,
	7, 329, 2, 2, 1152, 1154, 9, 22, 2, 2, 1153, 1147, 3, 2, 2, 2, 1153, 1149,
	3, 2, 2, 2, 1153, 1151, 3, 2, 2, 2, 1154, 91, 3, 2, 2, 2, 1155, 1162, 7,
	255, 2, 2, 1156, 1162, 7, 252, 2, 2, 1157, 1162, 7, 311, 2, 2, 1158, 1162,
	7, 257, 2, 2, 1159, 1160, 7, 277, 2, 2, 1160, 1162, 5, 318, 160, 2, 1161,
	1155, 3, 2, 2, 2, 1161, 1156, 3, 2, 2, 2, 1161, 1157, 3, 2, 2, 2, 1161,
	1158, 3, 2, 2, 2, 1161, 1159, 3, 2, 2, 2, 1162, 93, 3, 2, 2, 2, 1163, 1164,
	7, 201, 2, 2, 1164, 1169, 5, 318, 160, 2, 1165, 1166, 7, 340, 2, 2, 1166,
	1169, 9, 13, 2, 2, 1167, 1169, 9, 13, 2, 2, 1168, 1163, 3, 2, 2, 2, 1168,
	1165, 3, 2, 2, 2, 1168, 1167, 3, 2, 2, 2, 1169, 95, 3, 2, 2, 2, 1170, 1171,
	7, 203, 2, 2, 1171, 1192, 5, 318, 160, 2, 1172, 1173, 7, 202, 2, 2, 1173,
	1192, 5, 318, 160, 2, 1174, 1175, 7, 204, 2, 2, 1175, 1192, 5, 318, 160,
	2, 1176, 1177, 7, 205, 2, 2, 1177, 1192, 5, 318, 160, 2, 1178, 1179, 7,
	207, 2, 2, 1179, 1192, 5, 318, 160, 2, 1180, 1181, 7, 227, 2, 2, 1181,
	1182, 7, 413, 2, 2, 1182, 1192, 7, 407, 2, 2, 1183, 1184, 7, 229, 2, 2,
	1184, 1192, 5, 318, 160, 2, 1185, 1186, 7, 319, 2, 2, 1186, 1192, 5, 318,
	160, 2, 1187, 1188, 7, 336, 2, 2, 1188, 1192, 5, 318, 160, 2, 1189, 1190,
	7, 345, 2, 2, 1190, 1192, 5, 318, 160, 2, 1191, 1170, 3, 2, 2, 2, 1191,
	1172, 3, 2, 2, 2, 1191, 1174, 3, 2, 2, 2, 1191, 1176, 3, 2, 2, 2, 1191,
	1178, 3, 2, 2, 2, 1191, 1180, 3, 2, 2, 2, 1191, 1183, 3, 2, 2, 2, 1191,
	1185, 3, 2, 2, 2, 1191, 1187, 3, 2, 2, 2, 1191, 1189, 3, 2, 2, 2, 1192,
	97, 3, 2, 2, 2, 1193, 1194, 7, 375, 2, 2, 1194, 1195, 7, 413, 2, 2, 1195,
	1196, 7, 407, 2, 2, 1196, 1197, 9, 23, 2, 2, 1197, 99, 3, 2, 2, 2, 1198,
	1199, 7, 150, 2, 2, 1199, 1200, 7, 199, 2, 2, 1200, 1205, 7, 407, 2, 2,
	1201, 1202, 7, 150, 2, 2, 1202, 1205, 7, 280, 2, 2, 1203, 1205, 7, 316,
	2, 2, 1204, 1198, 3, 2, 2, 2, 1204, 1201, 3, 2, 2, 2, 1204, 1203, 3, 2,
	2, 2, 1205, 101, 3, 2, 2, 2, 1206, 1207, 7, 58, 2, 2, 1207, 1210, 7, 91,
	2, 2, 1208, 1209, 7, 89, 2, 2, 1209, 1211, 7, 66, 2, 2, 1210, 1208, 3,
	2, 2, 2, 1210, 1211, 3, 2, 2, 2, 1211, 1212, 3, 2, 2, 2, 1212, 1215, 5,
	334, 168, 2, 1213, 1214, 7, 117, 2, 2, 1214, 1216, 5, 304, 153, 2, 1215,
	1213, 3, 2, 2, 2, 1215, 1216, 3, 2, 2, 2, 1216, 1218, 3, 2, 2, 2, 1217,
	1219, 7, 433, 2, 2, 1218, 1217, 3, 2, 2, 2, 1218, 1219, 3, 2, 2, 2, 1219,
	103, 3, 2, 2, 2, 1220, 1221, 7, 58, 2, 2, 1221, 1224, 7, 136, 2, 2, 1222,
	1223, 7, 89, 2, 2, 1223, 1225, 7, 66, 2, 2, 1224, 1222, 3, 2, 2, 2, 1224,
	1225, 3, 2, 2, 2, 1225, 1226, 3, 2, 2, 2, 1226, 1228, 5, 308, 155, 2, 1227,
	1229, 7, 433, 2, 2, 1228, 1227, 3, 2, 2, 2, 1228, 1229, 3, 2, 2, 2, 1229,
	105, 3, 2, 2, 2, 1230, 1231, 7, 58, 2, 2, 1231, 1235, 7, 166, 2, 2, 1232,
	1233, 5, 304, 153, 2, 1233, 1234, 7, 425, 2, 2, 1234, 1236, 3, 2, 2, 2,
	1235, 1232, 3, 2, 2, 2, 1235, 1236, 3, 2, 2, 2, 1236, 1237, 3, 2, 2, 2,
	1237, 1238, 5, 334, 168, 2, 1238, 1239, 7, 433, 2, 2, 1239, 107, 3, 2,
	2, 2, 1240, 1241, 7, 58, 2, 2, 1241, 1244, 7, 168, 2, 2, 1242, 1243, 7,
	89, 2, 2, 1243, 1245, 7, 66, 2, 2, 1244, 1242, 3, 2, 2, 2, 1244, 1245,
	3, 2, 2, 2, 1245, 1246, 3, 2, 2, 2, 1246, 1248, 5, 304, 153, 2, 1247, 1249,
	7, 433, 2, 2, 1248, 1247, 3, 2, 2, 2, 1248, 1249, 3, 2, 2, 2, 1249, 109,
	3, 2, 2, 2, 1250, 1251, 7, 58, 2, 2, 1251, 1254, 7, 190, 2, 2, 1252, 1253,
	7, 89, 2, 2, 1253, 1255, 7, 66, 2, 2, 1254, 1252, 3, 2, 2, 2, 1254, 1255,
	3, 2, 2, 2, 1255, 1256, 3, 2, 2, 2, 1256, 1261, 5, 306, 154, 2, 1257, 1258,
	7, 432, 2, 2, 1258, 1260, 5, 306, 154, 2, 1259, 1257, 3, 2, 2, 2, 1260,
	1263, 3, 2, 2, 2, 1261, 1259, 3, 2, 2, 2, 1261, 1262, 3, 2, 2, 2, 1262,
	1265, 3, 2, 2, 2, 1263, 1261, 3, 2, 2, 2, 1264, 1266, 7, 433, 2, 2, 1265,
	1264, 3, 2, 2, 2, 1265, 1266, 3, 2, 2, 2, 1266, 111, 3, 2, 2, 2, 1267,
	1268, 7, 38, 2, 2, 1268, 1269, 7, 386, 2, 2, 1269, 1274, 5, 306, 154, 2,
	1270, 1271, 7, 78, 2, 2, 1271, 1272, 5, 326, 164, 2, 1272, 1273, 5, 328,
	165, 2, 1273, 1275, 3, 2, 2, 2, 1274, 1270, 3, 2, 2, 2, 1274, 1275, 3,
	2, 2, 2, 1275, 1282, 3, 2, 2, 2, 1276, 1277, 7, 9, 2, 2, 1277, 1278, 7,
	168, 2, 2, 1278, 1279, 7, 430, 2, 2, 1279, 1280, 5, 150, 76, 2, 1280, 1281,
	7, 431, 2, 2, 1281, 1283, 3, 2, 2, 2, 1282, 1276, 3, 2, 2, 2, 1282, 1283,
	3, 2, 2, 2, 1283, 113, 3, 2, 2, 2, 1284, 1285, 7, 58, 2, 2, 1285, 1288,
	7, 386, 2, 2, 1286, 1287, 7, 89, 2, 2, 1287, 1289, 7, 66, 2, 2, 1288, 1286,
	3, 2, 2, 2, 1288, 1289, 3, 2, 2, 2, 1289, 1290, 3, 2, 2, 2, 1290, 1291,
	5, 306, 154, 2, 1291, 115, 3, 2, 2, 2, 1292, 1295, 5, 118, 60, 2, 1293,
	1295, 5, 120, 61, 2, 1294, 1292, 3, 2, 2, 2, 1294, 1293, 3, 2, 2, 2, 1295,
	117, 3, 2, 2, 2, 1296, 1297, 7, 120, 2, 2, 1297, 1298, 7, 430, 2, 2, 1298,
	1299, 5, 334, 168, 2, 1299, 1300, 7, 432, 2, 2, 1300, 1301, 7, 409, 2,
	2, 1301, 1302, 7, 431, 2, 2, 1302, 119, 3, 2, 2, 2, 1303, 1304, 7, 119,
	2, 2, 1304, 1305, 7, 430, 2, 2, 1305, 1306, 7, 409, 2, 2, 1306, 1307, 7,
	432, 2, 2, 1307, 1308, 7, 409, 2, 2, 1308, 1309, 7, 431, 2, 2, 1309, 1311,
	7, 425, 2, 2, 1310, 1312, 5, 334, 168, 2, 1311, 1310, 3, 2, 2, 2, 1311,
	1312, 3, 2, 2, 2, 1312, 1313, 3, 2, 2, 2, 1313, 1315, 7, 425, 2, 2, 1314,
	1316, 5, 334, 168, 2, 1315, 1314, 3, 2, 2, 2, 1315, 1316, 3, 2, 2, 2, 1316,
	1317, 3, 2, 2, 2, 1317, 1318, 7, 425, 2, 2, 1318, 1319, 5, 334, 168, 2,
	1319, 121, 3, 2, 2, 2, 1320, 1321, 7, 49, 2, 2, 1321, 1323, 7, 406, 2,
	2, 1322, 1324, 7, 9, 2, 2, 1323, 1322, 3, 2, 2, 2, 1323, 1324, 3, 2, 2,
	2, 1324, 1325, 3, 2, 2, 2, 1325, 1327, 5, 148, 75, 2, 1326, 1328, 7, 433,
	2, 2, 1327, 1326, 3, 2, 2, 2, 1327, 1328, 3, 2, 2, 2, 1328, 1342, 3, 2,
	2, 2, 1329, 1330, 7, 49, 2, 2, 1330, 1335, 5, 146, 74, 2, 1331, 1332, 7,
	432, 2, 2, 1332, 1334, 5, 146, 74, 2, 1333, 1331, 3, 2, 2, 2, 1334, 1337,
	3, 2, 2, 2, 1335, 1333, 3, 2, 2, 2, 1335, 1336, 3, 2, 2, 2, 1336, 1339,
	3, 2, 2, 2, 1337, 1335, 3, 2, 2, 2, 1338, 1340, 7, 433, 2, 2, 1339, 1338,
	3, 2, 2, 2, 1339, 1340, 3, 2, 2, 2, 1340, 1342, 3, 2, 2, 2, 1341, 1320,
	3, 2, 2, 2, 1341, 1329, 3, 2, 2, 2, 1342, 123, 3, 2, 2, 2, 1343, 1345,
	7, 25, 2, 2, 1344, 1346, 7, 271, 2, 2, 1345, 1344, 3, 2, 2, 2, 1345, 1346,
	3, 2, 2, 2, 1346, 1347, 3, 2, 2, 2, 1347, 1349, 5, 316, 159, 2, 1348, 1350,
	7, 433, 2, 2, 1349, 1348, 3, 2, 2, 2, 1349, 1350, 3, 2, 2, 2, 1350, 1370,
	3, 2, 2, 2, 1351, 1353, 7, 48, 2, 2, 1352, 1354, 7, 271, 2, 2, 1353, 1352,
	3, 2, 2, 2, 1353, 1354, 3, 2, 2, 2, 1354, 1355, 3, 2, 2, 2, 1355, 1357,
	5, 316, 159, 2, 1356, 1358, 7, 433, 2, 2, 1357, 1356, 3, 2, 2, 2, 1357,
	1358, 3, 2, 2, 2, 1358, 1370, 3, 2, 2, 2, 1359, 1370, 5, 164, 83, 2, 1360,
	1370, 5, 168, 85, 2, 1361, 1363, 7, 118, 2, 2, 1362, 1364, 7, 271, 2, 2,
	1363, 1362, 3, 2, 2, 2, 1363, 1364, 3, 2, 2, 2, 1364, 1365, 3, 2, 2, 2,
	1365, 1367, 5, 316, 159, 2, 1366, 1368, 7, 433, 2, 2, 1367, 1366, 3, 2,
	2, 2, 1367, 1368, 3, 2, 2, 2, 1368, 1370, 3, 2, 2, 2, 1369, 1343, 3, 2,
	2, 2, 1369, 1351, 3, 2, 2, 2, 1369, 1359, 3, 2, 2, 2, 1369, 1360, 3, 2,
	2, 2, 1369, 1361, 3, 2, 2, 2, 1370, 125, 3, 2, 2, 2, 1371, 1374, 7, 65,
	2, 2, 1372, 1373, 7, 406, 2, 2, 1373, 1375, 7, 413, 2, 2, 1374, 1372, 3,
	2, 2, 2, 1374, 1375, 3, 2, 2, 2, 1375, 1376, 3, 2, 2, 2, 1376, 1385, 5,
	308, 155, 2, 1377, 1382, 5, 128, 65, 2, 1378, 1379, 7, 432, 2, 2, 1379,
	1381, 5, 128, 65, 2, 1380, 1378, 3, 2, 2, 2, 1381, 1384, 3, 2, 2, 2, 1382,
	1380, 3, 2, 2, 2, 1382, 1383, 3, 2, 2, 2, 1383, 1386, 3, 2, 2, 2, 1384,
	1382, 3, 2, 2, 2, 1385, 1377, 3, 2, 2, 2, 1385, 1386, 3, 2, 2, 2, 1386,
	1388, 3, 2, 2, 2, 1387, 1389, 7, 433, 2, 2, 1388, 1387, 3, 2, 2, 2, 1388,
	1389, 3, 2, 2, 2, 1389, 1413, 3, 2, 2, 2, 1390, 1391, 7, 65, 2, 2, 1391,
	1392, 7, 430, 2, 2, 1392, 1397, 5, 130, 66, 2, 1393, 1394, 7, 438, 2, 2,
	1394, 1396, 5, 130, 66, 2, 1395, 1393, 3, 2, 2, 2, 1396, 1399, 3, 2, 2,
	2, 1397, 1395, 3, 2, 2, 2, 1397, 1398, 3, 2, 2, 2, 1398, 1400, 3, 2, 2,
	2, 1399, 1397, 3, 2, 2, 2, 1400, 1407, 7, 431, 2, 2, 1401, 1403, 7, 9,
	2, 2, 1402, 1401, 3, 2, 2, 2, 1402, 1403, 3, 2, 2, 2, 1403, 1404, 3, 2,
	2, 2, 1404, 1405, 9, 24, 2, 2, 1405, 1406, 7, 413, 2, 2, 1406, 1408, 7,
	409, 2, 2, 1407, 1402, 3, 2, 2, 2, 1407, 1408, 3, 2, 2, 2, 1408, 1410,
	3, 2, 2, 2, 1409, 1411, 7, 433, 2, 2, 1410, 1409, 3, 2, 2, 2, 1410, 1411,
	3, 2, 2, 2, 1411, 1413, 3, 2, 2, 2, 1412, 1371, 3, 2, 2, 2, 1412, 1390,
	3, 2, 2, 2, 1413, 127, 3, 2, 2, 2, 1414, 1415, 7, 406, 2, 2, 1415, 1417,
	7, 413, 2, 2, 1416, 1414, 3, 2, 2, 2, 1416, 1417, 3, 2, 2, 2, 1417, 1427,
	3, 2, 2, 2, 1418, 1421, 5, 172, 87, 2, 1419, 1421, 5, 334, 168, 2, 1420,
	1418, 3, 2, 2, 2, 1420, 1419, 3, 2, 2, 2, 1421, 1423, 3, 2, 2, 2, 1422,
	1424, 9, 25, 2, 2, 1423, 1422, 3, 2, 2, 2, 1423, 1424, 3, 2, 2, 2, 1424,
	1428, 3, 2, 2, 2, 1425, 1428, 7, 50, 2, 2, 1426, 1428, 7, 112, 2, 2, 1427,
	1420, 3, 2, 2, 2, 1427, 1425, 3, 2, 2, 2, 1427, 1426, 3, 2, 2, 2, 1428,
	129, 3, 2, 2, 2, 1429, 1430, 9, 3, 2, 2, 1430, 131, 3, 2, 2, 2, 1431, 1433,
	5, 144, 73, 2, 1432, 1434, 7, 433, 2, 2, 1433, 1432, 3, 2, 2, 2, 1433,
	1434, 3, 2, 2, 2, 1434, 1480, 3, 2, 2, 2, 1435, 1447, 7, 82, 2, 2, 1436,
	1438, 7, 5, 2, 2, 1437, 1439, 7, 335, 2, 2, 1438, 1437, 3, 2, 2, 2, 1438,
	1439, 3, 2, 2, 2, 1439, 1448, 3, 2, 2, 2, 1440, 1445, 5, 134, 68, 2, 1441,
	1442, 7, 430, 2, 2, 1442, 1443, 5, 314, 158, 2, 1443, 1444, 7, 431, 2,
	2, 1444, 1446, 3, 2, 2, 2, 1445, 1441, 3, 2, 2, 2, 1445, 1446, 3, 2, 2,
	2, 1446, 1448, 3, 2, 2, 2, 1447, 1436, 3, 2, 2, 2, 1447, 1440, 3, 2, 2,
	2, 1448, 1451, 3, 2, 2, 2, 1449, 1450, 7, 117, 2, 2, 1450, 1452, 5, 304,
	153, 2, 1451, 1449, 3, 2, 2, 2, 1451, 1452, 3, 2, 2, 2, 1452, 1453, 3,
	2, 2, 2, 1453, 1454, 7, 172, 2, 2, 1454, 1458, 5, 334, 168, 2, 1455, 1456,
	7, 195, 2, 2, 1456, 1457, 7, 82, 2, 2, 1457, 1459, 7, 123, 2, 2, 1458,
	1455, 3, 2, 2, 2, 1458, 1459, 3, 2, 2, 2, 1459, 1462, 3, 2, 2, 2, 1460,
	1461, 7, 9, 2, 2, 1461, 1463, 5, 334, 168, 2, 1462, 1460, 3, 2, 2, 2, 1462,
	1463, 3, 2, 2, 2, 1463, 1465, 3, 2, 2, 2, 1464, 1466, 7, 433, 2, 2, 1465,
	1464, 3, 2, 2, 2, 1465, 1466, 3, 2, 2, 2, 1466, 1480, 3, 2, 2, 2, 1467,
	1474, 7, 147, 2, 2, 1468, 1469, 7, 430, 2, 2, 1469, 1470, 7, 195, 2, 2,
	1470, 1471, 7, 231, 2, 2, 1471, 1472, 7, 413, 2, 2, 1472, 1473, 7, 406,
	2, 2, 1473, 1475, 7, 431, 2, 2, 1474, 1468, 3, 2, 2, 2, 1474, 1475, 3,
	2, 2, 2, 1475, 1477, 3, 2, 2, 2, 1476, 1478, 7, 433, 2, 2, 1477, 1476,
	3, 2, 2, 2, 1477, 1478, 3, 2, 2, 2, 1478, 1480, 3, 2, 2, 2, 1479, 1431,
	3, 2, 2, 2, 1479, 1435, 3, 2, 2, 2, 1479, 1467, 3, 2, 2, 2, 1480, 133,
	3, 2, 2, 2, 1481, 1508, 7, 65, 2, 2, 1482, 1483, 7, 190, 2, 2, 1483, 1508,
	5, 334, 168, 2, 1484, 1485, 7, 374, 2, 2, 1485, 1508, 5, 334, 168, 2, 1486,
	1488, 7, 230, 2, 2, 1487, 1489, 5, 334, 168, 2, 1488, 1487, 3, 2, 2, 2,
	1488, 1489, 3, 2, 2, 2, 1489, 1508, 3, 2, 2, 2, 1490, 1491, 7, 38, 2, 2,
	1491, 1508, 9, 26, 2, 2, 1492, 1508, 7, 363, 2, 2, 1493, 1508, 7, 281,
	2, 2, 1494, 1508, 7, 157, 2, 2, 1495, 1508, 7, 142, 2, 2, 1496, 1508, 7,
	93, 2, 2, 1497, 1505, 7, 6, 2, 2, 1498, 1500, 7, 8, 2, 2, 1499, 1498, 3,
	2, 2, 2, 1499, 1500, 3, 2, 2, 2, 1500, 1503, 3, 2, 2, 2, 1501, 1504, 5,
	334, 168, 2, 1502, 1504, 7, 46, 2, 2, 1503, 1501, 3, 2, 2, 2, 1503, 1502,
	3, 2, 2, 2, 1504, 1506, 3, 2, 2, 2, 1505, 1499, 3, 2, 2, 2, 1505, 1506,
	3, 2, 2, 2, 1506, 1508, 3, 2, 2, 2, 1507, 1481, 3, 2, 2, 2, 1507, 1482,
	3, 2, 2, 2, 1507, 1484, 3, 2, 2, 2, 1507, 1486, 3, 2, 2, 2, 1507, 1490,
	3, 2, 2, 2, 1507, 1492, 3, 2, 2, 2, 1507, 1493, 3, 2, 2, 2, 1507, 1494,
	3, 2, 2, 2, 1507, 1495, 3, 2, 2, 2, 1507, 1496, 3, 2, 2, 2, 1507, 1497,
	3, 2, 2, 2, 1508, 135, 3, 2, 2, 2, 1509, 1510, 7, 162, 2, 2, 1510, 1513,
	7, 406, 2, 2, 1511, 1512, 7, 425, 2, 2, 1512, 1514, 5, 334, 168, 2, 1513,
	1511, 3, 2, 2, 2, 1513, 1514, 3, 2, 2, 2, 1514, 1515, 3, 2, 2, 2, 1515,
	1516, 7, 413, 2, 2, 1516, 1518, 5, 174, 88, 2, 1517, 1519, 7, 433, 2, 2,
	1518, 1517, 3, 2, 2, 2, 1518, 1519, 3, 2, 2, 2, 1519, 1549, 3, 2, 2, 2,
	1520, 1521, 7, 162, 2, 2, 1521, 1522, 7, 406, 2, 2, 1522, 1523, 5, 340,
	171, 2, 1523, 1525, 5, 174, 88, 2, 1524, 1526, 7, 433, 2, 2, 1525, 1524,
	3, 2, 2, 2, 1525, 1526, 3, 2, 2, 2, 1526, 1549, 3, 2, 2, 2, 1527, 1528,
	7, 162, 2, 2, 1528, 1529, 7, 406, 2, 2, 1529, 1530, 7, 413, 2, 2, 1530,
	1531, 7, 45, 2, 2, 1531, 1542, 5, 166, 84, 2, 1532, 1540, 7, 73, 2, 2,
	1533, 1534, 7, 139, 2, 2, 1534, 1541, 7, 323, 2, 2, 1535, 1538, 7, 183,
	2, 2, 1536, 1537, 7, 114, 2, 2, 1537, 1539, 5, 314, 158, 2, 1538, 1536,
	3, 2, 2, 2, 1538, 1539, 3, 2, 2, 2, 1539, 1541, 3, 2, 2, 2, 1540, 1533,
	3, 2, 2, 2, 1540, 1535, 3, 2, 2, 2, 1541, 1543, 3, 2, 2, 2, 1542, 1532,
	3, 2, 2, 2, 1542, 1543, 3, 2, 2, 2, 1543, 1545, 3, 2, 2, 2, 1544, 1546,
	7, 433, 2, 2, 1545, 1544, 3, 2, 2, 2, 1545, 1546, 3, 2, 2, 2, 1546, 1549,
	3, 2, 2, 2, 1547, 1549, 5, 170, 86, 2, 1548, 1509, 3, 2, 2, 2, 1548, 1520,
	3, 2, 2, 2, 1548, 1527, 3, 2, 2, 2, 1548, 1547, 3, 2, 2, 2, 1549, 137,
	3, 2, 2, 2, 1550, 1551, 7, 13, 2, 2, 1551, 1552, 7, 56, 2, 2, 1552, 1555,
	9, 27, 2, 2, 1553, 1556, 5, 334, 168, 2, 1554, 1556, 7, 406, 2, 2, 1555,
	1553, 3, 2, 2, 2, 1555, 1554, 3, 2, 2, 2, 1555, 1556, 3, 2, 2, 2, 1556,
	1558, 3, 2, 2, 2, 1557, 1559, 7, 433, 2, 2, 1558, 1557, 3, 2, 2, 2, 1558,
	1559, 3, 2, 2, 2, 1559, 1628, 3, 2, 2, 2, 1560, 1561, 7, 13, 2, 2, 1561,
	1571, 9, 27, 2, 2, 1562, 1565, 5, 334, 168, 2, 1563, 1565, 7, 406, 2, 2,
	1564, 1562, 3, 2, 2, 2, 1564, 1563, 3, 2, 2, 2, 1565, 1569, 3, 2, 2, 2,
	1566, 1567, 7, 195, 2, 2, 1567, 1568, 7, 296, 2, 2, 1568, 1570, 7, 409,
	2, 2, 1569, 1566, 3, 2, 2, 2, 1569, 1570, 3, 2, 2, 2, 1570, 1572, 3, 2,
	2, 2, 1571, 1564, 3, 2, 2, 2, 1571, 1572, 3, 2, 2, 2, 1572, 1574, 3, 2,
	2, 2, 1573, 1575, 7, 433, 2, 2, 1574, 1573, 3, 2, 2, 2, 1574, 1575, 3,
	2, 2, 2, 1575, 1628, 3, 2, 2, 2, 1576, 1577, 7, 30, 2, 2, 1577, 1590, 9,
	27, 2, 2, 1578, 1581, 5, 334, 168, 2, 1579, 1581, 7, 406, 2, 2, 1580, 1578,
	3, 2, 2, 2, 1580, 1579, 3, 2, 2, 2, 1581, 1588, 3, 2, 2, 2, 1582, 1583,
	7, 195, 2, 2, 1583, 1584, 7, 430, 2, 2, 1584, 1585, 7, 246, 2, 2, 1585,
	1586, 7, 413, 2, 2, 1586, 1587, 9, 13, 2, 2, 1587, 1589, 7, 431, 2, 2,
	1588, 1582, 3, 2, 2, 2, 1588, 1589, 3, 2, 2, 2, 1589, 1591, 3, 2, 2, 2,
	1590, 1580, 3, 2, 2, 2, 1590, 1591, 3, 2, 2, 2, 1591, 1593, 3, 2, 2, 2,
	1592, 1594, 7, 433, 2, 2, 1593, 1592, 3, 2, 2, 2, 1593, 1594, 3, 2, 2,
	2, 1594, 1628, 3, 2, 2, 2, 1595, 1597, 7, 30, 2, 2, 1596, 1598, 7, 397,
	2, 2, 1597, 1596, 3, 2, 2, 2, 1597, 1598, 3, 2, 2, 2, 1598, 1600, 3, 2,
	2, 2, 1599, 1601, 7, 433, 2, 2, 1600, 1599, 3, 2, 2, 2, 1600, 1601, 3,
	2, 2, 2, 1601, 1628, 3, 2, 2, 2, 1602, 1603, 7, 150, 2, 2, 1603, 1606,
	9, 27, 2, 2, 1604, 1607, 5, 334, 168, 2, 1605, 1607, 7, 406, 2, 2, 1606,
	1604, 3, 2, 2, 2, 1606, 1605, 3, 2, 2, 2, 1606, 1607, 3, 2, 2, 2, 1607,
	1609, 3, 2, 2, 2, 1608, 1610, 7, 433, 2, 2, 1609, 1608, 3, 2, 2, 2, 1609,
	1610, 3, 2, 2, 2, 1610, 1628, 3, 2, 2, 2, 1611, 1613, 7, 150, 2, 2, 1612,
	1614, 7, 397, 2, 2, 1613, 1612, 3, 2, 2, 2, 1613, 1614, 3, 2, 2, 2, 1614,
	1616, 3, 2, 2, 2, 1615, 1617, 7, 433, 2, 2, 1616, 1615, 3, 2, 2, 2, 1616,
	1617, 3, 2, 2, 2, 1617, 1628, 3, 2, 2, 2, 1618, 1619, 7, 154, 2, 2, 1619,
	1622, 9, 27, 2, 2, 1620, 1623, 5, 334, 168, 2, 1621, 1623, 7, 406, 2, 2,
	1622, 1620, 3, 2, 2, 2, 1622, 1621, 3, 2, 2, 2, 1622, 1623, 3, 2, 2, 2,
	1623, 1625, 3, 2, 2, 2, 1624, 1626, 7, 433, 2, 2, 1625, 1624, 3, 2, 2,
	2, 1625, 1626, 3, 2, 2, 2, 1626, 1628, 3, 2, 2, 2, 1627, 1550, 3, 2, 2,
	2, 1627, 1560, 3, 2, 2, 2, 1627, 1576, 3, 2, 2, 2, 1627, 1595, 3, 2, 2,
	2, 1627, 1602, 3, 2, 2, 2, 1627, 1611, 3, 2, 2, 2, 1627, 1618, 3, 2, 2,
	2, 1628, 139, 3, 2, 2, 2, 1629, 1631, 7, 272, 2, 2, 1630, 1632, 7, 407,
	2, 2, 1631, 1630, 3, 2, 2, 2, 1631, 1632, 3, 2, 2, 2, 1632, 141, 3, 2,
	2, 2, 1633, 1634, 7, 185, 2, 2, 1634, 1636, 5, 334, 168, 2, 1635, 1637,
	7, 433, 2, 2, 1636, 1635, 3, 2, 2, 2, 1636, 1637, 3, 2, 2, 2, 1637, 143,
	3, 2, 2, 2, 1638, 1639, 7, 65, 2, 2, 1639, 1640, 7, 9, 2, 2, 1640, 1641,
	9, 28, 2, 2, 1641, 145, 3, 2, 2, 2, 1642, 1644, 7, 406, 2, 2, 1643, 1645,
	7, 9, 2, 2, 1644, 1643, 3, 2, 2, 2, 1644, 1645, 3, 2, 2, 2, 1645, 1646,
	3, 2, 2, 2, 1646, 1649, 5, 326, 164, 2, 1647, 1648, 7, 413, 2, 2, 1648,
	1650, 5, 174, 88, 2, 1649, 1647, 3, 2, 2, 2, 1649, 1650, 3, 2, 2, 2, 1650,
	147, 3, 2, 2, 2, 1651, 1652, 7, 168, 2, 2, 1652, 1653, 7, 430, 2, 2, 1653,
	1654, 5, 150, 76, 2, 1654, 1655, 7, 431, 2, 2, 1655, 149, 3, 2, 2, 2, 1656,
	1663, 5, 152, 77, 2, 1657, 1659, 7, 432, 2, 2, 1658, 1657, 3, 2, 2, 2,
	1658, 1659, 3, 2, 2, 2, 1659, 1660, 3, 2, 2, 2, 1660, 1662, 5, 152, 77,
	2, 1661, 1658, 3, 2, 2, 2, 1662, 1665, 3, 2, 2, 2, 1663, 1661, 3, 2, 2,
	2, 1663, 1664, 3, 2, 2, 2, 1664, 151, 3, 2, 2, 2, 1665, 1663, 3, 2, 2,
	2, 1666, 1669, 5, 154, 78, 2, 1667, 1669, 5, 158, 80, 2, 1668, 1666, 3,
	2, 2, 2, 1668, 1667, 3, 2, 2, 2, 1669, 153, 3, 2, 2, 2, 1670, 1674, 5,
	334, 168, 2, 1671, 1675, 5, 326, 164, 2, 1672, 1673, 7, 9, 2, 2, 1673,
	1675, 5, 174, 88, 2, 1674, 1671, 3, 2, 2, 2, 1674, 1672, 3, 2, 2, 2, 1675,
	1678, 3, 2, 2, 2, 1676, 1677, 7, 28, 2, 2, 1677, 1679, 5, 334, 168, 2,
	1678, 1676, 3, 2, 2, 2, 1678, 1679, 3, 2, 2, 2, 1679, 1681, 3, 2, 2, 2,
	1680, 1682, 5, 322, 162, 2, 1681, 1680, 3, 2, 2, 2, 1681, 1682, 3, 2, 2,
	2, 1682, 1706, 3, 2, 2, 2, 1683, 1684, 7, 32, 2, 2, 1684, 1686, 5, 334,
	168, 2, 1685, 1683, 3, 2, 2, 2, 1685, 1686, 3, 2, 2, 2, 1686, 1687, 3,
	2, 2, 2, 1687, 1688, 7, 50, 2, 2, 1688, 1691, 5, 176, 89, 2, 1689, 1690,
	7, 195, 2, 2, 1690, 1692, 7, 187, 2, 2, 1691, 1689, 3, 2, 2, 2, 1691, 1692,
	3, 2, 2, 2, 1692, 1707, 3, 2, 2, 2, 1693, 1699, 7, 85, 2, 2, 1694, 1695,
	7, 430, 2, 2, 1695, 1696, 7, 407, 2, 2, 1696, 1697, 7, 432, 2, 2, 1697,
	1698, 7, 407, 2, 2, 1698, 1700, 7, 431, 2, 2, 1699, 1694, 3, 2, 2, 2, 1699,
	1700, 3, 2, 2, 2, 1700, 1704, 3, 2, 2, 2, 1701, 1702, 7, 111, 2, 2, 1702,
	1703, 7, 73, 2, 2, 1703, 1705, 7, 143, 2, 2, 1704, 1701, 3, 2, 2, 2, 1704,
	1705, 3, 2, 2, 2, 1705, 1707, 3, 2, 2, 2, 1706, 1685, 3, 2, 2, 2, 1706,
	1693, 3, 2, 2, 2, 1706, 1707, 3, 2, 2, 2, 1707, 1709, 3, 2, 2, 2, 1708,
	1710, 7, 152, 2, 2, 1709, 1708, 3, 2, 2, 2, 1709, 1710, 3, 2, 2, 2, 1710,
	1714, 3, 2, 2, 2, 1711, 1713, 5, 156, 79, 2, 1712, 1711, 3, 2, 2, 2, 1713,
	1716, 3, 2, 2, 2, 1714, 1712, 3, 2, 2, 2, 1714, 1715, 3, 2, 2, 2, 1715,
	155, 3, 2, 2, 2, 1716, 1714, 3, 2, 2, 2, 1717, 1718, 7, 32, 2, 2, 1718,
	1720, 5, 334, 168, 2, 1719, 1717, 3, 2, 2, 2, 1719, 1720, 3, 2, 2, 2, 1720,
	1722, 3, 2, 2, 2, 1721, 1723, 5, 322, 162, 2, 1722, 1721, 3, 2, 2, 2, 1722,
	1723, 3, 2, 2, 2, 1723, 1745, 3, 2, 2, 2, 1724, 1725, 7, 133, 2, 2, 1725,
	1728, 7, 98, 2, 2, 1726, 1728, 7, 181, 2, 2, 1727, 1724, 3, 2, 2, 2, 1727,
	1726, 3, 2, 2, 2, 1728, 1730, 3, 2, 2, 2, 1729, 1731, 5, 320, 161, 2, 1730,
	1729, 3, 2, 2, 2, 1730, 1731, 3, 2, 2, 2, 1731, 1733, 3, 2, 2, 2, 1732,
	1734, 5, 160, 81, 2, 1733, 1732, 3, 2, 2, 2, 1733, 1734, 3, 2, 2, 2, 1734,
	1746, 3, 2, 2, 2, 1735, 1739, 7, 23, 2, 2, 1736, 1737, 7, 111, 2, 2, 1737,
	1738, 7, 73, 2, 2, 1738, 1740, 7, 143, 2, 2, 1739, 1736, 3, 2, 2, 2, 1739,
	1740, 3, 2, 2, 2, 1740, 1741, 3, 2, 2, 2, 1741, 1742, 7, 430, 2, 2, 1742,
	1743, 5, 188, 95, 2, 1743, 1744, 7, 431, 2, 2, 1744, 1746, 3, 2, 2, 2,
	1745, 1727, 3, 2, 2, 2, 1745, 1735, 3, 2, 2, 2, 1746, 157, 3, 2, 2, 2,
	1747, 1748, 7, 32, 2, 2, 1748, 1750, 5, 334, 168, 2, 1749, 1747, 3, 2,
	2, 2, 1749, 1750, 3, 2, 2, 2, 1750, 1782, 3, 2, 2, 2, 1751, 1752, 7, 133,
	2, 2, 1752, 1755, 7, 98, 2, 2, 1753, 1755, 7, 181, 2, 2, 1754, 1751, 3,
	2, 2, 2, 1754, 1753, 3, 2, 2, 2, 1755, 1757, 3, 2, 2, 2, 1756, 1758, 5,
	320, 161, 2, 1757, 1756, 3, 2, 2, 2, 1757, 1758, 3, 2, 2, 2, 1758, 1759,
	3, 2, 2, 2, 1759, 1760, 7, 430, 2, 2, 1760, 1762, 5, 314, 158, 2, 1761,
	1763, 9, 7, 2, 2, 1762, 1761, 3, 2, 2, 2, 1762, 1763, 3, 2, 2, 2, 1763,
	1764, 3, 2, 2, 2, 1764, 1766, 7, 431, 2, 2, 1765, 1767, 5, 160, 81, 2,
	1766, 1765, 3, 2, 2, 2, 1766, 1767, 3, 2, 2, 2, 1767, 1770, 3, 2, 2, 2,
	1768, 1769, 7, 117, 2, 2, 1769, 1771, 5, 334, 168, 2, 1770, 1768, 3, 2,
	2, 2, 1770, 1771, 3, 2, 2, 2, 1771, 1783, 3, 2, 2, 2, 1772, 1776, 7, 23,
	2, 2, 1773, 1774, 7, 111, 2, 2, 1774, 1775, 7, 73, 2, 2, 1775, 1777, 7,
	143, 2, 2, 1776, 1773, 3, 2, 2, 2, 1776, 1777, 3, 2, 2, 2, 1777, 1778,
	3, 2, 2, 2, 1778, 1779, 7, 430, 2, 2, 1779, 1780, 5, 188, 95, 2, 1780,
	1781, 7, 431, 2, 2, 1781, 1783, 3, 2, 2, 2, 1782, 1754, 3, 2, 2, 2, 1782,
	1772, 3, 2, 2, 2, 1783, 159, 3, 2, 2, 2, 1784, 1785, 7, 195, 2, 2, 1785,
	1786, 7, 430, 2, 2, 1786, 1791, 5, 162, 82, 2, 1787, 1788, 7, 432, 2, 2,
	1788, 1790, 5, 162, 82, 2, 1789, 1787, 3, 2, 2, 2, 1790, 1793, 3, 2, 2,
	2, 1791, 1789, 3, 2, 2, 2, 1791, 1792, 3, 2, 2, 2, 1792, 1794, 3, 2, 2,
	2, 1793, 1791, 3, 2, 2, 2, 1794, 1795, 7, 431, 2, 2, 1795, 161, 3, 2, 2,
	2, 1796, 1797, 5, 336, 169, 2, 1797, 1801, 7, 413, 2, 2, 1798, 1802, 5,
	336, 169, 2, 1799, 1802, 5, 318, 160, 2, 1800, 1802, 7, 407, 2, 2, 1801,
	1798, 3, 2, 2, 2, 1801, 1799, 3, 2, 2, 2, 1801, 1800, 3, 2, 2, 2, 1802,
	163, 3, 2, 2, 2, 1803, 1804, 7, 49, 2, 2, 1804, 1836, 5, 316, 159, 2, 1805,
	1815, 7, 45, 2, 2, 1806, 1813, 5, 166, 84, 2, 1807, 1808, 7, 73, 2, 2,
	1808, 1811, 7, 183, 2, 2, 1809, 1810, 7, 114, 2, 2, 1810, 1812, 5, 314,
	158, 2, 1811, 1809, 3, 2, 2, 2, 1811, 1812, 3, 2, 2, 2, 1812, 1814, 3,
	2, 2, 2, 1813, 1807, 3, 2, 2, 2, 1813, 1814, 3, 2, 2, 2, 1814, 1816, 3,
	2, 2, 2, 1815, 1806, 3, 2, 2, 2, 1815, 1816, 3, 2, 2, 2, 1816, 1837, 3,
	2, 2, 2, 1817, 1819, 7, 283, 2, 2, 1818, 1817, 3, 2, 2, 2, 1818, 1819,
	3, 2, 2, 2, 1819, 1821, 3, 2, 2, 2, 1820, 1822, 7, 358, 2, 2, 1821, 1820,
	3, 2, 2, 2, 1821, 1822, 3, 2, 2, 2, 1822, 1823, 3, 2, 2, 2, 1823, 1824,
	7, 45, 2, 2, 1824, 1825, 7, 73, 2, 2, 1825, 1834, 5, 26, 14, 2, 1826, 1832,
	7, 73, 2, 2, 1827, 1828, 7, 139, 2, 2, 1828, 1833, 7, 323, 2, 2, 1829,
	1833, 7, 183, 2, 2, 1830, 1831, 7, 114, 2, 2, 1831, 1833, 5, 314, 158,
	2, 1832, 1827, 3, 2, 2, 2, 1832, 1829, 3, 2, 2, 2, 1832, 1830, 3, 2, 2,
	2, 1833, 1835, 3, 2, 2, 2, 1834, 1826, 3, 2, 2, 2, 1834, 1835, 3, 2, 2,
	2, 1835, 1837, 3, 2, 2, 2, 1836, 1805, 3, 2, 2, 2, 1836, 1818, 3, 2, 2,
	2, 1837, 1839, 3, 2, 2, 2, 1838, 1840, 7, 433, 2, 2, 1839, 1838, 3, 2,
	2, 2, 1839, 1840, 3, 2, 2, 2, 1840, 165, 3, 2, 2, 2, 1841, 1843, 9, 15,
	2, 2, 1842, 1841, 3, 2, 2, 2, 1842, 1843, 3, 2, 2, 2, 1843, 1845, 3, 2,
	2, 2, 1844, 1846, 9, 29, 2, 2, 1845, 1844, 3, 2, 2, 2, 1845, 1846, 3, 2,
	2, 2, 1846, 1848, 3, 2, 2, 2, 1847, 1849, 9, 30, 2, 2, 1848, 1847, 3, 2,
	2, 2, 1848, 1849, 3, 2, 2, 2, 1849, 1851, 3, 2, 2, 2, 1850, 1852, 9, 31,
	2, 2, 1851, 1850, 3, 2, 2, 2, 1851, 1852, 3, 2, 2, 2, 1852, 1854, 3, 2,
	2, 2, 1853, 1855, 7, 387, 2, 2, 1854, 1853, 3, 2, 2, 2, 1854, 1855, 3,
	2, 2, 2, 1855, 1856, 3, 2, 2, 2, 1856, 1857, 7, 73, 2, 2, 1857, 1858, 5,
	26, 14, 2, 1858, 167, 3, 2, 2, 2, 1859, 1869, 7, 69, 2, 2, 1860, 1867,
	7, 107, 2, 2, 1861, 1867, 7, 334, 2, 2, 1862, 1867, 7, 264, 2, 2, 1863,
	1867, 7, 290, 2, 2, 1864, 1865, 9, 32, 2, 2, 1865, 1867, 5, 174, 88, 2,
	1866, 1860, 3, 2, 2, 2, 1866, 1861, 3, 2, 2, 2, 1866, 1862, 3, 2, 2, 2,
	1866, 1863, 3, 2, 2, 2, 1866, 1864, 3, 2, 2, 2, 1866, 1867, 3, 2, 2, 2,
	1867, 1868, 3, 2, 2, 2, 1868, 1870, 7, 78, 2, 2, 1869, 1866, 3, 2, 2, 2,
	1869, 1870, 3, 2, 2, 2, 1870, 1872, 3, 2, 2, 2, 1871, 1873, 7, 271, 2,
	2, 1872, 1871, 3, 2, 2, 2, 1872, 1873, 3, 2, 2, 2, 1873, 1874, 3, 2, 2,
	2, 1874, 1884, 5, 316, 159, 2, 1875, 1876, 7, 95, 2, 2, 1876, 1881, 7,
	406, 2, 2, 1877, 1878, 7, 432, 2, 2, 1878, 1880, 7, 406, 2, 2, 1879, 1877,
	3, 2, 2, 2, 1880, 1883, 3, 2, 2, 2, 1881, 1879, 3, 2, 2, 2, 1881, 1882,
	3, 2, 2, 2, 1882, 1885, 3, 2, 2, 2, 1883, 1881, 3, 2, 2, 2, 1884, 1875,
	3, 2, 2, 2, 1884, 1885, 3, 2, 2, 2, 1885, 1887, 3, 2, 2, 2, 1886, 1888,
	7, 433, 2, 2, 1887, 1886, 3, 2, 2, 2, 1887, 1888, 3, 2, 2, 2, 1888, 169,
	3, 2, 2, 2, 1889, 1890, 7, 162, 2, 2, 1890, 1894, 5, 334, 168, 2, 1891,
	1895, 5, 334, 168, 2, 1892, 1895, 5, 172, 87, 2, 1893, 1895, 5, 318, 160,
	2, 1894, 1891, 3, 2, 2, 2, 1894, 1892, 3, 2, 2, 2, 1894, 1893, 3, 2, 2,
	2, 1895, 1897, 3, 2, 2, 2, 1896, 1898, 7, 433, 2, 2, 1897, 1896, 3, 2,
	2, 2, 1897, 1898, 3, 2, 2, 2, 1898, 1933, 3, 2, 2, 2, 1899, 1900, 7, 162,
	2, 2, 1900, 1901, 7, 175, 2, 2, 1901, 1902, 7, 285, 2, 2, 1902, 1911, 7,
	291, 2, 2, 1903, 1904, 7, 139, 2, 2, 1904, 1912, 7, 389, 2, 2, 1905, 1906,
	7, 139, 2, 2, 1906, 1912, 7, 226, 2, 2, 1907, 1908, 7, 348, 2, 2, 1908,
	1912, 7, 139, 2, 2, 1909, 1912, 7, 367, 2, 2, 1910, 1912, 7, 362, 2, 2,
	1911, 1903, 3, 2, 2, 2, 1911, 1905, 3, 2, 2, 2, 1911, 1907, 3, 2, 2, 2,
	1911, 1909, 3, 2, 2, 2, 1911, 1910, 3, 2, 2, 2, 1912, 1914, 3, 2, 2, 2,
	1913, 1915, 7, 433, 2, 2, 1914, 1913, 3, 2, 2, 2, 1914, 1915, 3, 2, 2,
	2, 1915, 1933, 3, 2, 2, 2, 1916, 1917, 7, 162, 2, 2, 1917, 1918, 7, 87,
	2, 2, 1918, 1919, 5, 304, 153, 2, 1919, 1921, 5, 318, 160, 2, 1920, 1922,
	7, 433, 2, 2, 1921, 1920, 3, 2, 2, 2, 1921, 1922, 3, 2, 2, 2, 1922, 1933,
	3, 2, 2, 2, 1923, 1924, 7, 162, 2, 2, 1924, 1925, 7, 202, 2, 2, 1925, 1933,
	5, 318, 160, 2, 1926, 1927, 7, 162, 2, 2, 1927, 1928, 7, 336, 2, 2, 1928,
	1933, 5, 318, 160, 2, 1929, 1930, 7, 162, 2, 2, 1930, 1931, 7, 204, 2,
	2, 1931, 1933, 5, 318, 160, 2, 1932, 1889, 3, 2, 2, 2, 1932, 1899, 3, 2,
	2, 2, 1932, 1916, 3, 2, 2, 2, 1932, 1923, 3, 2, 2, 2, 1932, 1926, 3, 2,
	2, 2, 1932, 1929, 3, 2, 2, 2, 1933, 171, 3, 2, 2, 2, 1934, 1937, 5, 330,
	166, 2, 1935, 1937, 7, 406, 2, 2, 1936, 1934, 3, 2, 2, 2, 1936, 1935, 3,
	2, 2, 2, 1937, 173, 3, 2, 2, 2, 1938, 1939, 8, 88, 1, 2, 1939, 1984, 7,
	50, 2, 2, 1940, 1984, 7, 112, 2, 2, 1941, 1984, 7, 406, 2, 2, 1942, 1984,
	5, 330, 166, 2, 1943, 1984, 5, 244, 123, 2, 1944, 1945, 7, 20, 2, 2, 1945,
	1947, 5, 174, 88, 2, 1946, 1948, 5, 246, 124, 2, 1947, 1946, 3, 2, 2, 2,
	1948, 1949, 3, 2, 2, 2, 1949, 1947, 3, 2, 2, 2, 1949, 1950, 3, 2, 2, 2,
	1950, 1953, 3, 2, 2, 2, 1951, 1952, 7, 60, 2, 2, 1952, 1954, 5, 174, 88,
	2, 1953, 1951, 3, 2, 2, 2, 1953, 1954, 3, 2, 2, 2, 1954, 1955, 3, 2, 2,
	2, 1955, 1956, 7, 61, 2, 2, 1956, 1984, 3, 2, 2, 2, 1957, 1959, 7, 20,
	2, 2, 1958, 1960, 5, 248, 125, 2, 1959, 1958, 3, 2, 2, 2, 1960, 1961, 3,
	2, 2, 2, 1961, 1959, 3, 2, 2, 2, 1961, 1962, 3, 2, 2, 2, 1962, 1965, 3,
	2, 2, 2, 1963, 1964, 7, 60, 2, 2, 1964, 1966, 5, 174, 88, 2, 1965, 1963,
	3, 2, 2, 2, 1965, 1966, 3, 2, 2, 2, 1966, 1967, 3, 2, 2, 2, 1967, 1968,
	7, 61, 2, 2, 1968, 1984, 3, 2, 2, 2, 1969, 1984, 5, 312, 157, 2, 1970,
	1971, 7, 430, 2, 2, 1971, 1972, 5, 174, 88, 2, 1972, 1973, 7, 431, 2, 2,
	1973, 1984, 3, 2, 2, 2, 1974, 1975, 7, 430, 2, 2, 1975, 1976, 5, 178, 90,
	2, 1976, 1977, 7, 431, 2, 2, 1977, 1984, 3, 2, 2, 2, 1978, 1979, 7, 440,
	2, 2, 1979, 1984, 5, 174, 88, 8, 1980, 1981, 9, 33, 2, 2, 1981, 1984, 5,
	174, 88, 6, 1982, 1984, 5, 280, 141, 2, 1983, 1938, 3, 2, 2, 2, 1983, 1940,
	3, 2, 2, 2, 1983, 1941, 3, 2, 2, 2, 1983, 1942, 3, 2, 2, 2, 1983, 1943,
	3, 2, 2, 2, 1983, 1944, 3, 2, 2, 2, 1983, 1957, 3, 2, 2, 2, 1983, 1969,
	3, 2, 2, 2, 1983, 1970, 3, 2, 2, 2, 1983, 1974, 3, 2, 2, 2, 1983, 1978,
	3, 2, 2, 2, 1983, 1980, 3, 2, 2, 2, 1983, 1982, 3, 2, 2, 2, 1984, 2000,
	3, 2, 2, 2, 1985, 1986, 12, 7, 2, 2, 1986, 1987, 9, 34, 2, 2, 1987, 1999,
	5, 174, 88, 8, 1988, 1989, 12, 5, 2, 2, 1989, 1990, 9, 35, 2, 2, 1990,
	1999, 5, 174, 88, 6, 1991, 1992, 12, 4, 2, 2, 1992, 1993, 5, 338, 170,
	2, 1993, 1994, 5, 174, 88, 5, 1994, 1999, 3, 2, 2, 2, 1995, 1996, 12, 14,
	2, 2, 1996, 1997, 7, 28, 2, 2, 1997, 1999, 5, 334, 168, 2, 1998, 1985,
	3, 2, 2, 2, 1998, 1988, 3, 2, 2, 2, 1998, 1991, 3, 2, 2, 2, 1998, 1995,
	3, 2, 2, 2, 1999, 2002, 3, 2, 2, 2, 2000, 1998, 3, 2, 2, 2, 2000, 2001,
	3, 2, 2, 2, 2001, 175, 3, 2, 2, 2, 2002, 2000, 3, 2, 2, 2, 2003, 2012,
	7, 112, 2, 2, 2004, 2012, 5, 330, 166, 2, 2005, 2012, 5, 244, 123, 2, 2006,
	2012, 7, 406, 2, 2, 2007, 2008, 7, 430, 2, 2, 2008, 2009, 5, 176, 89, 2,
	2009, 2010, 7, 431, 2, 2, 2010, 2012, 3, 2, 2, 2, 2011, 2003, 3, 2, 2,
	2, 2011, 2004, 3, 2, 2, 2, 2011, 2005, 3, 2, 2, 2, 2011, 2006, 3, 2, 2,
	2, 2011, 2007, 3, 2, 2, 2, 2012, 177, 3, 2, 2, 2, 2013, 2014, 5, 26, 14,
	2, 2014, 179, 3, 2, 2, 2, 2015, 2018, 7, 195, 2, 2, 2016, 2017, 7, 399,
	2, 2, 2017, 2019, 7, 432, 2, 2, 2018, 2016, 3, 2, 2, 2, 2018, 2019, 3,
	2, 2, 2, 2019, 2020, 3, 2, 2, 2, 2020, 2025, 5, 182, 92, 2, 2021, 2022,
	7, 432, 2, 2, 2022, 2024, 5, 182, 92, 2, 2023, 2021, 3, 2, 2, 2, 2024,
	2027, 3, 2, 2, 2, 2025, 2023, 3, 2, 2, 2, 2025, 2026, 3, 2, 2, 2, 2026,
	181, 3, 2, 2, 2, 2027, 2025, 3, 2, 2, 2, 2028, 2033, 5, 334, 168, 2, 2029,
	2030, 7, 430, 2, 2, 2030, 2031, 5, 314, 158, 2, 2031, 2032, 7, 431, 2,
	2, 2032, 2034, 3, 2, 2, 2, 2033, 2029, 3, 2, 2, 2, 2033, 2034, 3, 2, 2,
	2, 2034, 2035, 3, 2, 2, 2, 2035, 2036, 7, 9, 2, 2, 2036, 2037, 7, 430,
	2, 2, 2037, 2038, 5, 26, 14, 2, 2038, 2039, 7, 431, 2, 2, 2039, 183, 3,
	2, 2, 2, 2040, 2043, 5, 312, 157, 2, 2041, 2043, 7, 406, 2, 2, 2042, 2040,
	3, 2, 2, 2, 2042, 2041, 3, 2, 2, 2, 2043, 2046, 3, 2, 2, 2, 2044, 2047,
	7, 413, 2, 2, 2045, 2047, 5, 340, 171, 2, 2046, 2044, 3, 2, 2, 2, 2046,
	2045, 3, 2, 2, 2, 2047, 2048, 3, 2, 2, 2, 2048, 2057, 5, 174, 88, 2, 2049,
	2050, 5, 334, 168, 2, 2050, 2051, 7, 425, 2, 2, 2051, 2052, 5, 334, 168,
	2, 2052, 2053, 7, 430, 2, 2, 2053, 2054, 5, 266, 134, 2, 2054, 2055, 7,
	431, 2, 2, 2055, 2057, 3, 2, 2, 2, 2056, 2042, 3, 2, 2, 2, 2056, 2049,
	3, 2, 2, 2, 2057, 185, 3, 2, 2, 2, 2058, 2063, 5, 188, 95, 2, 2059, 2060,
	7, 432, 2, 2, 2060, 2062, 5, 188, 95, 2, 2061, 2059, 3, 2, 2, 2, 2062,
	2065, 3, 2, 2, 2, 2063, 2061, 3, 2, 2, 2, 2063, 2064, 3, 2, 2, 2, 2064,
	187, 3, 2, 2, 2, 2065, 2063, 3, 2, 2, 2, 2066, 2067, 8, 95, 1, 2, 2067,
	2068, 5, 190, 96, 2, 2068, 2077, 3, 2, 2, 2, 2069, 2070, 12, 5, 2, 2, 2070,
	2071, 7, 7, 2, 2, 2071, 2076, 5, 188, 95, 6, 2072, 2073, 12, 4, 2, 2, 2073,
	2074, 7, 124, 2, 2, 2074, 2076, 5, 188, 95, 5, 2075, 2069, 3, 2, 2, 2,
	2075, 2072, 3, 2, 2, 2, 2076, 2079, 3, 2, 2, 2, 2077, 2075, 3, 2, 2, 2,
	2077, 2078, 3, 2, 2, 2, 2078, 189, 3, 2, 2, 2, 2079, 2077, 3, 2, 2, 2,
	2080, 2081, 7, 111, 2, 2, 2081, 2139, 5, 190, 96, 2, 2082, 2083, 7, 66,
	2, 2, 2083, 2084, 7, 430, 2, 2, 2084, 2085, 5, 178, 90, 2, 2085, 2086,
	7, 431, 2, 2, 2086, 2139, 3, 2, 2, 2, 2087, 2088, 5, 174, 88, 2, 2088,
	2089, 5, 338, 170, 2, 2089, 2090, 5, 174, 88, 2, 2090, 2139, 3, 2, 2, 2,
	2091, 2092, 5, 174, 88, 2, 2092, 2093, 5, 338, 170, 2, 2093, 2094, 9, 36,
	2, 2, 2094, 2095, 7, 430, 2, 2, 2095, 2096, 5, 178, 90, 2, 2096, 2097,
	7, 431, 2, 2, 2097, 2139, 3, 2, 2, 2, 2098, 2100, 5, 174, 88, 2, 2099,
	2101, 7, 111, 2, 2, 2100, 2099, 3, 2, 2, 2, 2100, 2101, 3, 2, 2, 2, 2101,
	2102, 3, 2, 2, 2, 2102, 2103, 7, 14, 2, 2, 2103, 2104, 5, 174, 88, 2, 2104,
	2105, 7, 7, 2, 2, 2105, 2106, 5, 174, 88, 2, 2106, 2139, 3, 2, 2, 2, 2107,
	2109, 5, 174, 88, 2, 2108, 2110, 7, 111, 2, 2, 2109, 2108, 3, 2, 2, 2,
	2109, 2110, 3, 2, 2, 2, 2110, 2111, 3, 2, 2, 2, 2111, 2112, 7, 90, 2, 2,
	2112, 2115, 7, 430, 2, 2, 2113, 2116, 5, 178, 90, 2, 2114, 2116, 5, 266,
	134, 2, 2115, 2113, 3, 2, 2, 2, 2115, 2114, 3, 2, 2, 2, 2116, 2117, 3,
	2, 2, 2, 2117, 2118, 7, 431, 2, 2, 2118, 2139, 3, 2, 2, 2, 2119, 2121,
	5, 174, 88, 2, 2120, 2122, 7, 111, 2, 2, 2121, 2120, 3, 2, 2, 2, 2121,
	2122, 3, 2, 2, 2, 2122, 2123, 3, 2, 2, 2, 2123, 2124, 7, 101, 2, 2, 2124,
	2127, 5, 174, 88, 2, 2125, 2126, 7, 63, 2, 2, 2126, 2128, 5, 174, 88, 2,
	2127, 2125, 3, 2, 2, 2, 2127, 2128, 3, 2, 2, 2, 2128, 2139, 3, 2, 2, 2,
	2129, 2130, 5, 174, 88, 2, 2130, 2131, 7, 96, 2, 2, 2131, 2132, 5, 322,
	162, 2, 2132, 2139, 3, 2, 2, 2, 2133, 2134, 7, 430, 2, 2, 2134, 2135, 5,
	188, 95, 2, 2135, 2136, 7, 431, 2, 2, 2136, 2139, 3, 2, 2, 2, 2137, 2139,
	7, 407, 2, 2, 2138, 2080, 3, 2, 2, 2, 2138, 2082, 3, 2, 2, 2, 2138, 2087,
	3, 2, 2, 2, 2138, 2091, 3, 2, 2, 2, 2138, 2098, 3, 2, 2, 2, 2138, 2107,
	3, 2, 2, 2, 2138, 2119, 3, 2, 2, 2, 2138, 2129, 3, 2, 2, 2, 2138, 2133,
	3, 2, 2, 2, 2138, 2137, 3, 2, 2, 2, 2139, 191, 3, 2, 2, 2, 2140, 2141,
	8, 97, 1, 2, 2141, 2142, 7, 430, 2, 2, 2142, 2143, 5, 192, 97, 2, 2143,
	2144, 7, 431, 2, 2, 2144, 2147, 3, 2, 2, 2, 2145, 2147, 5, 196, 99, 2,
	2146, 2140, 3, 2, 2, 2, 2146, 2145, 3, 2, 2, 2, 2147, 2154, 3, 2, 2, 2,
	2148, 2149, 12, 4, 2, 2, 2149, 2150, 5, 194, 98, 2, 2150, 2151, 5, 192,
	97, 5, 2151, 2153, 3, 2, 2, 2, 2152, 2148, 3, 2, 2, 2, 2153, 2156, 3, 2,
	2, 2, 2154, 2152, 3, 2, 2, 2, 2154, 2155, 3, 2, 2, 2, 2155, 193, 3, 2,
	2, 2, 2156, 2154, 3, 2, 2, 2, 2157, 2159, 7, 180, 2, 2, 2158, 2160, 7,
	5, 2, 2, 2159, 2158, 3, 2, 2, 2, 2159, 2160, 3, 2, 2, 2, 2160, 2164, 3,
	2, 2, 2, 2161, 2164, 7, 64, 2, 2, 2162, 2164, 7, 94, 2, 2, 2163, 2157,
	3, 2, 2, 2, 2163, 2161, 3, 2, 2, 2, 2163, 2162, 3, 2, 2, 2, 2164, 195,
	3, 2, 2, 2, 2165, 2167, 7, 157, 2, 2, 2166, 2168, 9, 37, 2, 2, 2167, 2166,
	3, 2, 2, 2, 2167, 2168, 3, 2, 2, 2, 2168, 2170, 3, 2, 2, 2, 2169, 2171,
	5, 198, 100, 2, 2170, 2169, 3, 2, 2, 2, 2170, 2171, 3, 2, 2, 2, 2171, 2172,
	3, 2, 2, 2, 2172, 2175, 5, 220, 111, 2, 2173, 2174, 7, 95, 2, 2, 2174,
	2176, 5, 304, 153, 2, 2175, 2173, 3, 2, 2, 2, 2175, 2176, 3, 2, 2, 2, 2176,
	2179, 3, 2, 2, 2, 2177, 2178, 7, 78, 2, 2, 2178, 2180, 5, 224, 113, 2,
	2179, 2177, 3, 2, 2, 2, 2179, 2180, 3, 2, 2, 2, 2180, 2183, 3, 2, 2, 2,
	2181, 2182, 7, 193, 2, 2, 2182, 2184, 5, 188, 95, 2, 2183, 2181, 3, 2,
	2, 2, 2183, 2184, 3, 2, 2, 2, 2184, 2195, 3, 2, 2, 2, 2185, 2186, 7, 83,
	2, 2, 2186, 2187, 7, 18, 2, 2, 2187, 2192, 5, 212, 107, 2, 2188, 2189,
	7, 432, 2, 2, 2189, 2191, 5, 212, 107, 2, 2190, 2188, 3, 2, 2, 2, 2191,
	2194, 3, 2, 2, 2, 2192, 2190, 3, 2, 2, 2, 2192, 2193, 3, 2, 2, 2, 2193,
	2196, 3, 2, 2, 2, 2194, 2192, 3, 2, 2, 2, 2195, 2185, 3, 2, 2, 2, 2195,
	2196, 3, 2, 2, 2, 2196, 2199, 3, 2, 2, 2, 2197, 2198, 7, 84, 2, 2, 2198,
	2200, 5, 188, 95, 2, 2199, 2197, 3, 2, 2, 2, 2199, 2200, 3, 2, 2, 2, 2200,
	197, 3, 2, 2, 2, 2201, 2202, 7, 173, 2, 2, 2202, 2204, 5, 174, 88, 2, 2203,
	2205, 7, 129, 2, 2, 2204, 2203, 3, 2, 2, 2, 2204, 2205, 3, 2, 2, 2, 2205,
	2208, 3, 2, 2, 2, 2206, 2207, 7, 195, 2, 2, 2207, 2209, 7, 379, 2, 2, 2208,
	2206, 3, 2, 2, 2, 2208, 2209, 3, 2, 2, 2, 2209, 199, 3, 2, 2, 2, 2210,
	2211, 7, 173, 2, 2, 2211, 2212, 7, 430, 2, 2, 2212, 2213, 5, 174, 88, 2,
	2213, 2215, 7, 431, 2, 2, 2214, 2216, 7, 129, 2, 2, 2215, 2214, 3, 2, 2,
	2, 2215, 2216, 3, 2, 2, 2, 2216, 201, 3, 2, 2, 2, 2217, 2218, 7, 125, 2,
	2, 2218, 2219, 7, 18, 2, 2, 2219, 2224, 5, 210, 106, 2, 2220, 2221, 7,
	432, 2, 2, 2221, 2223, 5, 210, 106, 2, 2222, 2220, 3, 2, 2, 2, 2223, 2226,
	3, 2, 2, 2, 2224, 2222, 3, 2, 2, 2, 2224, 2225, 3, 2, 2, 2, 2225, 2233,
	3, 2, 2, 2, 2226, 2224, 3, 2, 2, 2, 2227, 2228, 7, 321, 2, 2, 2228, 2229,
	5, 174, 88, 2, 2229, 2231, 9, 38, 2, 2, 2230, 2232, 5, 204, 103, 2, 2231,
	2230, 3, 2, 2, 2, 2231, 2232, 3, 2, 2, 2, 2232, 2234, 3, 2, 2, 2, 2233,
	2227, 3, 2, 2, 2, 2233, 2234, 3, 2, 2, 2, 2234, 203, 3, 2, 2, 2, 2235,
	2236, 7, 69, 2, 2, 2236, 2237, 9, 39, 2, 2, 2237, 2238, 5, 174, 88, 2,
	2238, 2239, 9, 38, 2, 2, 2239, 2240, 7, 323, 2, 2, 2240, 205, 3, 2, 2,
	2, 2241, 2242, 7, 73, 2, 2, 2242, 2261, 7, 16, 2, 2, 2243, 2244, 7, 73,
	2, 2, 2244, 2245, 7, 398, 2, 2, 2245, 2247, 7, 208, 2, 2, 2246, 2248, 5,
	208, 105, 2, 2247, 2246, 3, 2, 2, 2, 2247, 2248, 3, 2, 2, 2, 2248, 2261,
	3, 2, 2, 2, 2249, 2250, 7, 73, 2, 2, 2250, 2251, 7, 398, 2, 2, 2251, 2255,
	7, 332, 2, 2, 2252, 2253, 7, 430, 2, 2, 2253, 2254, 7, 409, 2, 2, 2254,
	2256, 7, 431, 2, 2, 2255, 2252, 3, 2, 2, 2, 2255, 2256, 3, 2, 2, 2, 2256,
	2258, 3, 2, 2, 2, 2257, 2259, 5, 208, 105, 2, 2258, 2257, 3, 2, 2, 2, 2258,
	2259, 3, 2, 2, 2, 2259, 2261, 3, 2, 2, 2, 2260, 2241, 3, 2, 2, 2, 2260,
	2243, 3, 2, 2, 2, 2260, 2249, 3, 2, 2, 2, 2261, 207, 3, 2, 2, 2, 2262,
	2267, 7, 432, 2, 2, 2263, 2264, 7, 410, 2, 2, 2264, 2268, 7, 216, 2, 2,
	2265, 2268, 7, 386, 2, 2, 2266, 2268, 7, 351, 2, 2, 2267, 2263, 3, 2, 2,
	2, 2267, 2265, 3, 2, 2, 2, 2267, 2266, 3, 2, 2, 2, 2268, 209, 3, 2, 2,
	2, 2269, 2271, 5, 174, 88, 2, 2270, 2272, 9, 7, 2, 2, 2271, 2270, 3, 2,
	2, 2, 2271, 2272, 3, 2, 2, 2, 2272, 211, 3, 2, 2, 2, 2273, 2274, 5, 174,
	88, 2, 2274, 213, 3, 2, 2, 2, 2275, 2276, 7, 123, 2, 2, 2276, 2277, 7,
	430, 2, 2, 2277, 2282, 5, 216, 109, 2, 2278, 2279, 7, 432, 2, 2, 2279,
	2281, 5, 216, 109, 2, 2280, 2278, 3, 2, 2, 2, 2281, 2284, 3, 2, 2, 2, 2282,
	2280, 3, 2, 2, 2, 2282, 2283, 3, 2, 2, 2, 2283, 2285, 3, 2, 2, 2, 2284,
	2282, 3, 2, 2, 2, 2285, 2286, 7, 431, 2, 2, 2286, 215, 3, 2, 2, 2, 2287,
	2288, 7, 259, 2, 2, 2288, 2333, 7, 407, 2, 2, 2289, 2290, 9, 40, 2, 2,
	2290, 2333, 7, 83, 2, 2, 2291, 2292, 9, 41, 2, 2, 2292, 2333, 7, 180, 2,
	2, 2293, 2294, 9, 42, 2, 2, 2294, 2333, 7, 97, 2, 2, 2295, 2296, 7, 258,
	2, 2, 2296, 2333, 7, 395, 2, 2, 2297, 2298, 7, 266, 2, 2, 2298, 2333, 7,
	125, 2, 2, 2299, 2333, 7, 279, 2, 2, 2300, 2301, 7, 287, 2, 2, 2301, 2333,
	7, 131, 2, 2, 2302, 2303, 7, 288, 2, 2, 2303, 2333, 7, 131, 2, 2, 2304,
	2305, 7, 298, 2, 2, 2305, 2333, 7, 407, 2, 2, 2306, 2307, 7, 299, 2, 2,
	2307, 2333, 7, 407, 2, 2, 2308, 2309, 7, 325, 2, 2, 2309, 2310, 7, 73,
	2, 2, 2310, 2311, 7, 430, 2, 2, 2311, 2316, 5, 218, 110, 2, 2312, 2313,
	7, 432, 2, 2, 2313, 2315, 5, 218, 110, 2, 2314, 2312, 3, 2, 2, 2, 2315,
	2318, 3, 2, 2, 2, 2316, 2314, 3, 2, 2, 2, 2316, 2317, 3, 2, 2, 2, 2317,
	2319, 3, 2, 2, 2, 2318, 2316, 3, 2, 2, 2, 2319, 2320, 7, 431, 2, 2, 2320,
	2333, 3, 2, 2, 2, 2321, 2322, 7, 325, 2, 2, 2322, 2323, 7, 73, 2, 2, 2323,
	2333, 7, 390, 2, 2, 2324, 2325, 7, 330, 2, 2, 2325, 2333, 9, 20, 2, 2,
	2326, 2333, 7, 343, 2, 2, 2327, 2328, 7, 350, 2, 2, 2328, 2333, 7, 131,
	2, 2, 2329, 2330, 7, 185, 2, 2, 2330, 2331, 7, 131, 2, 2, 2331, 2333, 7,
	409, 2, 2, 2332, 2287, 3, 2, 2, 2, 2332, 2289, 3, 2, 2, 2, 2332, 2291,
	3, 2, 2, 2, 2332, 2293, 3, 2, 2, 2, 2332, 2295, 3, 2, 2, 2, 2332, 2297,
	3, 2, 2, 2, 2332, 2299, 3, 2, 2, 2, 2332, 2300, 3, 2, 2, 2, 2332, 2302,
	3, 2, 2, 2, 2332, 2304, 3, 2, 2, 2, 2332, 2306, 3, 2, 2, 2, 2332, 2308,
	3, 2, 2, 2, 2332, 2321, 3, 2, 2, 2, 2332, 2324, 3, 2, 2, 2, 2332, 2326,
	3, 2, 2, 2, 2332, 2327, 3, 2, 2, 2, 2332, 2329, 3, 2, 2, 2, 2333, 217,
	3, 2, 2, 2, 2334, 2338, 7, 406, 2, 2, 2335, 2339, 7, 390, 2, 2, 2336, 2337,
	7, 413, 2, 2, 2337, 2339, 5, 330, 166, 2, 2338, 2335, 3, 2, 2, 2, 2338,
	2336, 3, 2, 2, 2, 2339, 219, 3, 2, 2, 2, 2340, 2345, 5, 222, 112, 2, 2341,
	2342, 7, 432, 2, 2, 2342, 2344, 5, 222, 112, 2, 2343, 2341, 3, 2, 2, 2,
	2344, 2347, 3, 2, 2, 2, 2345, 2343, 3, 2, 2, 2, 2345, 2346, 3, 2, 2, 2,
	2346, 221, 3, 2, 2, 2, 2347, 2345, 3, 2, 2, 2, 2348, 2349, 5, 304, 153,
	2, 2349, 2350, 7, 425, 2, 2, 2350, 2352, 3, 2, 2, 2, 2351, 2348, 3, 2,
	2, 2, 2351, 2352, 3, 2, 2, 2, 2352, 2356, 3, 2, 2, 2, 2353, 2357, 5, 262,
	132, 2, 2354, 2355, 7, 429, 2, 2, 2355, 2357, 9, 43, 2, 2, 2356, 2353,
	3, 2, 2, 2, 2356, 2354, 3, 2, 2, 2, 2357, 2370, 3, 2, 2, 2, 2358, 2359,
	5, 260, 131, 2, 2359, 2360, 7, 413, 2, 2, 2360, 2361, 5, 174, 88, 2, 2361,
	2370, 3, 2, 2, 2, 2362, 2367, 5, 174, 88, 2, 2363, 2365, 7, 9, 2, 2, 2364,
	2363, 3, 2, 2, 2, 2364, 2365, 3, 2, 2, 2, 2365, 2366, 3, 2, 2, 2, 2366,
	2368, 5, 260, 131, 2, 2367, 2364, 3, 2, 2, 2, 2367, 2368, 3, 2, 2, 2, 2368,
	2370, 3, 2, 2, 2, 2369, 2351, 3, 2, 2, 2, 2369, 2358, 3, 2, 2, 2, 2369,
	2362, 3, 2, 2, 2, 2370, 223, 3, 2, 2, 2, 2371, 2376, 5, 226, 114, 2, 2372,
	2373, 7, 432, 2, 2, 2373, 2375, 5, 226, 114, 2, 2374, 2372, 3, 2, 2, 2,
	2375, 2378, 3, 2, 2, 2, 2376, 2374, 3, 2, 2, 2, 2376, 2377, 3, 2, 2, 2,
	2377, 225, 3, 2, 2, 2, 2378, 2376, 3, 2, 2, 2, 2379, 2380, 8, 114, 1, 2,
	2380, 2381, 7, 430, 2, 2, 2381, 2382, 5, 226, 114, 2, 2382, 2383, 7, 431,
	2, 2, 2383, 2386, 3, 2, 2, 2, 2384, 2386, 5, 228, 115, 2, 2385, 2379, 3,
	2, 2, 2, 2385, 2384, 3, 2, 2, 2, 2386, 2404, 3, 2, 2, 2, 2387, 2388, 12,
	5, 2, 2, 2388, 2389, 7, 39, 2, 2, 2389, 2390, 7, 97, 2, 2, 2390, 2403,
	5, 226, 114, 6, 2391, 2392, 12, 4, 2, 2, 2392, 2393, 9, 44, 2, 2, 2393,
	2394, 7, 206, 2, 2, 2394, 2403, 5, 226, 114, 5, 2395, 2396, 12, 6, 2, 2,
	2396, 2397, 5, 234, 118, 2, 2397, 2398, 7, 97, 2, 2, 2398, 2399, 5, 226,
	114, 2, 2399, 2400, 7, 117, 2, 2, 2400, 2401, 5, 188, 95, 2, 2401, 2403,
	3, 2, 2, 2, 2402, 2387, 3, 2, 2, 2, 2402, 2391, 3, 2, 2, 2, 2402, 2395,
	3, 2, 2, 2, 2403, 2406, 3, 2, 2, 2, 2404, 2402, 3, 2, 2, 2, 2404, 2405,
	3, 2, 2, 2, 2405, 227, 3, 2, 2, 2, 2406, 2404, 3, 2, 2, 2, 2407, 2409,
	5, 304, 153, 2, 2408, 2410, 5, 230, 116, 2, 2409, 2408, 3, 2, 2, 2, 2409,
	2410, 3, 2, 2, 2, 2410, 2412, 3, 2, 2, 2, 2411, 2413, 5, 250, 126, 2, 2412,
	2411, 3, 2, 2, 2, 2412, 2413, 3, 2, 2, 2, 2413, 2447, 3, 2, 2, 2, 2414,
	2416, 5, 238, 120, 2, 2415, 2417, 5, 230, 116, 2, 2416, 2415, 3, 2, 2,
	2, 2416, 2417, 3, 2, 2, 2, 2417, 2447, 3, 2, 2, 2, 2418, 2423, 5, 242,
	122, 2, 2419, 2421, 5, 230, 116, 2, 2420, 2422, 5, 258, 130, 2, 2421, 2420,
	3, 2, 2, 2, 2421, 2422, 3, 2, 2, 2, 2422, 2424, 3, 2, 2, 2, 2423, 2419,
	3, 2, 2, 2, 2423, 2424, 3, 2, 2, 2, 2424, 2447, 3, 2, 2, 2, 2425, 2427,
	5, 232, 117, 2, 2426, 2428, 5, 230, 116, 2, 2427, 2426, 3, 2, 2, 2, 2427,
	2428, 3, 2, 2, 2, 2428, 2447, 3, 2, 2, 2, 2429, 2431, 5, 244, 123, 2, 2430,
	2432, 5, 230, 116, 2, 2431, 2430, 3, 2, 2, 2, 2431, 2432, 3, 2, 2, 2, 2432,
	2447, 3, 2, 2, 2, 2433, 2435, 7, 406, 2, 2, 2434, 2436, 5, 230, 116, 2,
	2435, 2434, 3, 2, 2, 2, 2435, 2436, 3, 2, 2, 2, 2436, 2447, 3, 2, 2, 2,
	2437, 2438, 7, 406, 2, 2, 2438, 2439, 7, 425, 2, 2, 2439, 2444, 5, 244,
	123, 2, 2440, 2442, 5, 230, 116, 2, 2441, 2443, 5, 258, 130, 2, 2442, 2441,
	3, 2, 2, 2, 2442, 2443, 3, 2, 2, 2, 2443, 2445, 3, 2, 2, 2, 2444, 2440,
	3, 2, 2, 2, 2444, 2445, 3, 2, 2, 2, 2445, 2447, 3, 2, 2, 2, 2446, 2407,
	3, 2, 2, 2, 2446, 2414, 3, 2, 2, 2, 2446, 2418, 3, 2, 2, 2, 2446, 2425,
	3, 2, 2, 2, 2446, 2429, 3, 2, 2, 2, 2446, 2433, 3, 2, 2, 2, 2446, 2437,
	3, 2, 2, 2, 2447, 229, 3, 2, 2, 2, 2448, 2450, 7, 9, 2, 2, 2449, 2448,
	3, 2, 2, 2, 2449, 2450, 3, 2, 2, 2, 2450, 2451, 3, 2, 2, 2, 2451, 2452,
	5, 334, 168, 2, 2452, 231, 3, 2, 2, 2, 2453, 2454, 7, 21, 2, 2, 2454, 2455,
	7, 430, 2, 2, 2455, 2456, 7, 22, 2, 2, 2456, 2457, 5, 304, 153, 2, 2457,
	2458, 7, 432, 2, 2, 2458, 2459, 9, 45, 2, 2, 2459, 2460, 7, 431, 2, 2,
	2460, 233, 3, 2, 2, 2, 2461, 2463, 7, 92, 2, 2, 2462, 2461, 3, 2, 2, 2,
	2462, 2463, 3, 2, 2, 2, 2463, 2469, 3, 2, 2, 2, 2464, 2466, 9, 46, 2, 2,
	2465, 2467, 7, 126, 2, 2, 2466, 2465, 3, 2, 2, 2, 2466, 2467, 3, 2, 2,
	2, 2467, 2469, 3, 2, 2, 2, 2468, 2462, 3, 2, 2, 2, 2468, 2464, 3, 2, 2,
	2, 2469, 2471, 3, 2, 2, 2, 2470, 2472, 9, 47, 2, 2, 2471, 2470, 3, 2, 2,
	2, 2471, 2472, 3, 2, 2, 2, 2472, 235, 3, 2, 2, 2, 2473, 2475, 5, 304, 153,
	2, 2474, 2476, 5, 250, 126, 2, 2475, 2474, 3, 2, 2, 2, 2475, 2476, 3, 2,
	2, 2, 2476, 237, 3, 2, 2, 2, 2477, 2478, 7, 121, 2, 2, 2478, 2479, 7, 430,
	2, 2, 2479, 2480, 7, 409, 2, 2, 2480, 2481, 7, 432, 2, 2, 2481, 2482, 7,
	409, 2, 2, 2482, 2483, 7, 432, 2, 2, 2483, 2484, 7, 409, 2, 2, 2484, 2504,
	7, 431, 2, 2, 2485, 2486, 7, 121, 2, 2, 2486, 2487, 7, 430, 2, 2, 2487,
	2488, 7, 17, 2, 2, 2488, 2489, 7, 409, 2, 2, 2489, 2499, 7, 432, 2, 2,
	2490, 2495, 5, 240, 121, 2, 2491, 2492, 7, 432, 2, 2, 2492, 2494, 5, 240,
	121, 2, 2493, 2491, 3, 2, 2, 2, 2494, 2497, 3, 2, 2, 2, 2495, 2493, 3,
	2, 2, 2, 2495, 2496, 3, 2, 2, 2, 2496, 2500, 3, 2, 2, 2, 2497, 2495, 3,
	2, 2, 2, 2498, 2500, 5, 334, 168, 2, 2499, 2490, 3, 2, 2, 2, 2499, 2498,
	3, 2, 2, 2, 2500, 2501, 3, 2, 2, 2, 2501, 2502, 7, 431, 2, 2, 2502, 2504,
	3, 2, 2, 2, 2503, 2477, 3, 2, 2, 2, 2503, 2485, 3, 2, 2, 2, 2504, 239,
	3, 2, 2, 2, 2505, 2506, 5, 334, 168, 2, 2506, 2507, 7, 413, 2, 2, 2507,
	2508, 9, 48, 2, 2, 2508, 241, 3, 2, 2, 2, 2509, 2515, 5, 178, 90, 2, 2510,
	2511, 7, 430, 2, 2, 2511, 2512, 5, 178, 90, 2, 2512, 2513, 7, 431, 2, 2,
	2513, 2515, 3, 2, 2, 2, 2514, 2509, 3, 2, 2, 2, 2514, 2510, 3, 2, 2, 2,
	2515, 243, 3, 2, 2, 2, 2516, 2624, 5, 274, 138, 2, 2517, 2624, 5, 276,
	139, 2, 2518, 2519, 5, 324, 163, 2, 2519, 2521, 7, 430, 2, 2, 2520, 2522,
	5, 266, 134, 2, 2521, 2520, 3, 2, 2, 2, 2521, 2522, 3, 2, 2, 2, 2522, 2523,
	3, 2, 2, 2, 2523, 2524, 7, 431, 2, 2, 2524, 2624, 3, 2, 2, 2, 2525, 2624,
	5, 272, 137, 2, 2526, 2527, 7, 217, 2, 2, 2527, 2528, 7, 430, 2, 2, 2528,
	2529, 7, 435, 2, 2, 2529, 2624, 7, 431, 2, 2, 2530, 2531, 7, 220, 2, 2,
	2531, 2532, 7, 430, 2, 2, 2532, 2533, 5, 174, 88, 2, 2533, 2534, 7, 9,
	2, 2, 2534, 2535, 5, 326, 164, 2, 2535, 2536, 7, 431, 2, 2, 2536, 2624,
	3, 2, 2, 2, 2537, 2538, 7, 37, 2, 2, 2538, 2539, 7, 430, 2, 2, 2539, 2540,
	5, 326, 164, 2, 2540, 2541, 7, 432, 2, 2, 2541, 2544, 5, 174, 88, 2, 2542,
	2543, 7, 432, 2, 2, 2543, 2545, 5, 174, 88, 2, 2544, 2542, 3, 2, 2, 2,
	2544, 2545, 3, 2, 2, 2, 2545, 2546, 3, 2, 2, 2, 2546, 2547, 7, 431, 2,
	2, 2547, 2624, 3, 2, 2, 2, 2548, 2549, 7, 224, 2, 2, 2549, 2550, 7, 430,
	2, 2, 2550, 2551, 7, 435, 2, 2, 2551, 2624, 7, 431, 2, 2, 2552, 2553, 7,
	27, 2, 2, 2553, 2554, 7, 430, 2, 2, 2554, 2555, 5, 266, 134, 2, 2555, 2556,
	7, 431, 2, 2, 2556, 2624, 3, 2, 2, 2, 2557, 2624, 7, 43, 2, 2, 2558, 2624,
	7, 44, 2, 2, 2559, 2560, 7, 236, 2, 2, 2560, 2561, 7, 430, 2, 2, 2561,
	2562, 7, 408, 2, 2, 2562, 2563, 7, 432, 2, 2, 2563, 2564, 5, 174, 88, 2,
	2564, 2565, 7, 432, 2, 2, 2565, 2566, 5, 174, 88, 2, 2566, 2567, 7, 431,
	2, 2, 2567, 2624, 3, 2, 2, 2, 2568, 2569, 7, 237, 2, 2, 2569, 2570, 7,
	430, 2, 2, 2570, 2571, 7, 408, 2, 2, 2571, 2572, 7, 432, 2, 2, 2572, 2573,
	5, 174, 88, 2, 2573, 2574, 7, 432, 2, 2, 2574, 2575, 5, 174, 88, 2, 2575,
	2576, 7, 431, 2, 2, 2576, 2624, 3, 2, 2, 2, 2577, 2578, 7, 238, 2, 2, 2578,
	2579, 7, 430, 2, 2, 2579, 2580, 7, 408, 2, 2, 2580, 2581, 7, 432, 2, 2,
	2581, 2582, 5, 174, 88, 2, 2582, 2583, 7, 431, 2, 2, 2583, 2624, 3, 2,
	2, 2, 2584, 2585, 7, 239, 2, 2, 2585, 2586, 7, 430, 2, 2, 2586, 2587, 7,
	408, 2, 2, 2587, 2588, 7, 432, 2, 2, 2588, 2589, 5, 174, 88, 2, 2589, 2590,
	7, 431, 2, 2, 2590, 2624, 3, 2, 2, 2, 2591, 2592, 7, 85, 2, 2, 2592, 2593,
	7, 430, 2, 2, 2593, 2596, 5, 326, 164, 2, 2594, 2595, 7, 432, 2, 2, 2595,
	2597, 7, 407, 2, 2, 2596, 2594, 3, 2, 2, 2, 2596, 2597, 3, 2, 2, 2, 2597,
	2600, 3, 2, 2, 2, 2598, 2599, 7, 432, 2, 2, 2599, 2601, 7, 407, 2, 2, 2600,
	2598, 3, 2, 2, 2, 2600, 2601, 3, 2, 2, 2, 2601, 2602, 3, 2, 2, 2, 2602,
	2603, 7, 431, 2, 2, 2603, 2624, 3, 2, 2, 2, 2604, 2605, 7, 88, 2, 2, 2605,
	2606, 7, 430, 2, 2, 2606, 2607, 5, 188, 95, 2, 2607, 2608, 7, 432, 2, 2,
	2608, 2609, 5, 174, 88, 2, 2609, 2610, 7, 432, 2, 2, 2610, 2611, 5, 174,
	88, 2, 2611, 2612, 7, 431, 2, 2, 2612, 2624, 3, 2, 2, 2, 2613, 2624, 7,
	305, 2, 2, 2614, 2615, 7, 113, 2, 2, 2615, 2616, 7, 430, 2, 2, 2616, 2617,
	5, 174, 88, 2, 2617, 2618, 7, 432, 2, 2, 2618, 2619, 5, 174, 88, 2, 2619,
	2620, 7, 431, 2, 2, 2620, 2624, 3, 2, 2, 2, 2621, 2624, 7, 161, 2, 2, 2622,
	2624, 7, 167, 2, 2, 2623, 2516, 3, 2, 2, 2, 2623, 2517, 3, 2, 2, 2, 2623,
	2518, 3, 2, 2, 2, 2623, 2525, 3, 2, 2, 2, 2623, 2526, 3, 2, 2, 2, 2623,
	2530, 3, 2, 2, 2, 2623, 2537, 3, 2, 2, 2, 2623, 2548, 3, 2, 2, 2, 2623,
	2552, 3, 2, 2, 2, 2623, 2557, 3, 2, 2, 2, 2623, 2558, 3, 2, 2, 2, 2623,
	2559, 3, 2, 2, 2, 2623, 2568, 3, 2, 2, 2, 2623, 2577, 3, 2, 2, 2, 2623,
	2584, 3, 2, 2, 2, 2623, 2591, 3, 2, 2, 2, 2623, 2604, 3, 2, 2, 2, 2623,
	2613, 3, 2, 2, 2, 2623, 2614, 3, 2, 2, 2, 2623, 2621, 3, 2, 2, 2, 2623,
	2622, 3, 2, 2, 2, 2624, 245, 3, 2, 2, 2, 2625, 2626, 7, 192, 2, 2, 2626,
	2627, 5, 174, 88, 2, 2627, 2628, 7, 171, 2, 2, 2628, 2629, 5, 174, 88,
	2, 2629, 247, 3, 2, 2, 2, 2630, 2631, 7, 192, 2, 2, 2631, 2632, 5, 188,
	95, 2, 2632, 2633, 7, 171, 2, 2, 2633, 2634, 5, 174, 88, 2, 2634, 249,
	3, 2, 2, 2, 2635, 2637, 7, 195, 2, 2, 2636, 2635, 3, 2, 2, 2, 2636, 2637,
	3, 2, 2, 2, 2637, 2638, 3, 2, 2, 2, 2638, 2639, 7, 430, 2, 2, 2639, 2644,
	5, 254, 128, 2, 2640, 2641, 7, 432, 2, 2, 2641, 2643, 5, 254, 128, 2, 2642,
	2640, 3, 2, 2, 2, 2643, 2646, 3, 2, 2, 2, 2644, 2642, 3, 2, 2, 2, 2644,
	2645, 3, 2, 2, 2, 2645, 2647, 3, 2, 2, 2, 2646, 2644, 3, 2, 2, 2, 2647,
	2648, 7, 431, 2, 2, 2648, 251, 3, 2, 2, 2, 2649, 2650, 7, 195, 2, 2, 2650,
	2651, 7, 430, 2, 2, 2651, 2656, 5, 254, 128, 2, 2652, 2653, 7, 432, 2,
	2, 2653, 2655, 5, 254, 128, 2, 2654, 2652, 3, 2, 2, 2, 2655, 2658, 3, 2,
	2, 2, 2656, 2654, 3, 2, 2, 2, 2656, 2657, 3, 2, 2, 2, 2657, 2659, 3, 2,
	2, 2, 2658, 2656, 3, 2, 2, 2, 2659, 2660, 7, 431, 2, 2, 2660, 253, 3, 2,
	2, 2, 2661, 2663, 7, 313, 2, 2, 2662, 2661, 3, 2, 2, 2, 2662, 2663, 3,
	2, 2, 2, 2663, 2702, 3, 2, 2, 2, 2664, 2665, 7, 91, 2, 2, 2665, 2666, 7,
	430, 2, 2, 2666, 2671, 5, 256, 129, 2, 2667, 2668, 7, 432, 2, 2, 2668,
	2670, 5, 256, 129, 2, 2669, 2667, 3, 2, 2, 2, 2670, 2673, 3, 2, 2, 2, 2671,
	2669, 3, 2, 2, 2, 2671, 2672, 3, 2, 2, 2, 2672, 2674, 3, 2, 2, 2, 2673,
	2671, 3, 2, 2, 2, 2674, 2675, 7, 431, 2, 2, 2675, 2703, 3, 2, 2, 2, 2676,
	2677, 7, 91, 2, 2, 2677, 2678, 7, 413, 2, 2, 2678, 2703, 5, 256, 129, 2,
	2679, 2694, 7, 74, 2, 2, 2680, 2681, 7, 430, 2, 2, 2681, 2682, 5, 256,
	129, 2, 2682, 2683, 7, 430, 2, 2, 2683, 2688, 7, 408, 2, 2, 2684, 2685,
	7, 432, 2, 2, 2685, 2687, 7, 408, 2, 2, 2686, 2684, 3, 2, 2, 2, 2687, 2690,
	3, 2, 2, 2, 2688, 2686, 3, 2, 2, 2, 2688, 2689, 3, 2, 2, 2, 2689, 2691,
	3, 2, 2, 2, 2690, 2688, 3, 2, 2, 2, 2691, 2692, 7, 431, 2, 2, 2692, 2693,
	7, 431, 2, 2, 2693, 2695, 3, 2, 2, 2, 2694, 2680, 3, 2, 2, 2, 2694, 2695,
	3, 2, 2, 2, 2695, 2703, 3, 2, 2, 2, 2696, 2703, 7, 362, 2, 2, 2697, 2703,
	7, 367, 2, 2, 2698, 2699, 7, 368, 2, 2, 2699, 2700, 7, 413, 2, 2, 2700,
	2703, 7, 407, 2, 2, 2701, 2703, 7, 408, 2, 2, 2702, 2664, 3, 2, 2, 2, 2702,
	2676, 3, 2, 2, 2, 2702, 2679, 3, 2, 2, 2, 2702, 2696, 3, 2, 2, 2, 2702,
	2697, 3, 2, 2, 2, 2702, 2698, 3, 2, 2, 2, 2702, 2701, 3, 2, 2, 2, 2702,
	2703, 3, 2, 2, 2, 2703, 255, 3, 2, 2, 2, 2704, 2707, 5, 334, 168, 2, 2705,
	2707, 7, 407, 2, 2, 2706, 2704, 3, 2, 2, 2, 2706, 2705, 3, 2, 2, 2, 2707,
	257, 3, 2, 2, 2, 2708, 2709, 7, 430, 2, 2, 2709, 2714, 5, 260, 131, 2,
	2710, 2711, 7, 432, 2, 2, 2711, 2713, 5, 260, 131, 2, 2712, 2710, 3, 2,
	2, 2, 2713, 2716, 3, 2, 2, 2, 2714, 2712, 3, 2, 2, 2, 2714, 2715, 3, 2,
	2, 2, 2715, 2717, 3, 2, 2, 2, 2716, 2714, 3, 2, 2, 2, 2717, 2718, 7, 431,
	2, 2, 2718, 259, 3, 2, 2, 2, 2719, 2722, 5, 334, 168, 2, 2720, 2722, 7,
	409, 2, 2, 2721, 2719, 3, 2, 2, 2, 2721, 2720, 3, 2, 2, 2, 2722, 261, 3,
	2, 2, 2, 2723, 2724, 7, 435, 2, 2, 2724, 263, 3, 2, 2, 2, 2725, 2726, 7,
	187, 2, 2, 2726, 2731, 5, 268, 135, 2, 2727, 2728, 7, 432, 2, 2, 2728,
	2730, 5, 268, 135, 2, 2729, 2727, 3, 2, 2, 2, 2730, 2733, 3, 2, 2, 2, 2731,
	2729, 3, 2, 2, 2, 2731, 2732, 3, 2, 2, 2, 2732, 265, 3, 2, 2, 2, 2733,
	2731, 3, 2, 2, 2, 2734, 2739, 5, 174, 88, 2, 2735, 2736, 7, 432, 2, 2,
	2736, 2738, 5, 174, 88, 2, 2737, 2735, 3, 2, 2, 2, 2738, 2741, 3, 2, 2,
	2, 2739, 2737, 3, 2, 2, 2, 2739, 2740, 3, 2, 2, 2, 2740, 267, 3, 2, 2,
	2, 2741, 2739, 3, 2, 2, 2, 2742, 2743, 7, 430, 2, 2, 2743, 2744, 5, 266,
	134, 2, 2744, 2745, 7, 431, 2, 2, 2745, 269, 3, 2, 2, 2, 2746, 2747, 7,
	107, 2, 2, 2747, 2748, 7, 188, 2, 2, 2748, 2749, 7, 73, 2, 2, 2749, 271,
	3, 2, 2, 2, 2750, 2751, 5, 270, 136, 2, 2751, 2752, 5, 308, 155, 2, 2752,
	2753, 5, 280, 141, 2, 2753, 273, 3, 2, 2, 2, 2754, 2755, 9, 49, 2, 2, 2755,
	2756, 7, 430, 2, 2, 2756, 2757, 7, 431, 2, 2, 2757, 2765, 5, 280, 141,
	2, 2758, 2759, 7, 317, 2, 2, 2759, 2760, 7, 430, 2, 2, 2760, 2761, 5, 174,
	88, 2, 2761, 2762, 7, 431, 2, 2, 2762, 2763, 5, 280, 141, 2, 2763, 2765,
	3, 2, 2, 2, 2764, 2754, 3, 2, 2, 2, 2764, 2758, 3, 2, 2, 2, 2765, 275,
	3, 2, 2, 2, 2766, 2767, 9, 50, 2, 2, 2767, 2769, 7, 430, 2, 2, 2768, 2770,
	5, 278, 140, 2, 2769, 2768, 3, 2, 2, 2, 2769, 2770, 3, 2, 2, 2, 2770, 2771,
	3, 2, 2, 2, 2771, 2772, 5, 174, 88, 2, 2772, 2774, 7, 431, 2, 2, 2773,
	2775, 5, 280, 141, 2, 2774, 2773, 3, 2, 2, 2, 2774, 2775, 3, 2, 2, 2, 2775,
	2808, 3, 2, 2, 2, 2776, 2777, 9, 51, 2, 2, 2777, 2783, 7, 430, 2, 2, 2778,
	2784, 7, 435, 2, 2, 2779, 2781, 5, 278, 140, 2, 2780, 2779, 3, 2, 2, 2,
	2780, 2781, 3, 2, 2, 2, 2781, 2782, 3, 2, 2, 2, 2782, 2784, 5, 174, 88,
	2, 2783, 2778, 3, 2, 2, 2, 2783, 2780, 3, 2, 2, 2, 2784, 2785, 3, 2, 2,
	2, 2785, 2787, 7, 431, 2, 2, 2786, 2788, 5, 280, 141, 2, 2787, 2786, 3,
	2, 2, 2, 2787, 2788, 3, 2, 2, 2, 2788, 2808, 3, 2, 2, 2, 2789, 2790, 7,
	225, 2, 2, 2790, 2792, 7, 430, 2, 2, 2791, 2793, 5, 278, 140, 2, 2792,
	2791, 3, 2, 2, 2, 2792, 2793, 3, 2, 2, 2, 2793, 2794, 3, 2, 2, 2, 2794,
	2795, 5, 174, 88, 2, 2795, 2796, 7, 431, 2, 2, 2796, 2808, 3, 2, 2, 2,
	2797, 2798, 7, 273, 2, 2, 2798, 2799, 7, 430, 2, 2, 2799, 2800, 5, 174,
	88, 2, 2800, 2801, 7, 431, 2, 2, 2801, 2808, 3, 2, 2, 2, 2802, 2803, 7,
	274, 2, 2, 2803, 2804, 7, 430, 2, 2, 2804, 2805, 5, 266, 134, 2, 2805,
	2806, 7, 431, 2, 2, 2806, 2808, 3, 2, 2, 2, 2807, 2766, 3, 2, 2, 2, 2807,
	2776, 3, 2, 2, 2, 2807, 2789, 3, 2, 2, 2, 2807, 2797, 3, 2, 2, 2, 2807,
	2802, 3, 2, 2, 2, 2808, 277, 3, 2, 2, 2, 2809, 2810, 9, 37, 2, 2, 2810,
	279, 3, 2, 2, 2, 2811, 2812, 7, 127, 2, 2, 2812, 2816, 7, 430, 2, 2, 2813,
	2814, 7, 331, 2, 2, 2814, 2815, 7, 18, 2, 2, 2815, 2817, 5, 266, 134, 2,
	2816, 2813, 3, 2, 2, 2, 2816, 2817, 3, 2, 2, 2, 2817, 2819, 3, 2, 2, 2,
	2818, 2820, 5, 202, 102, 2, 2819, 2818, 3, 2, 2, 2, 2819, 2820, 3, 2, 2,
	2, 2820, 2822, 3, 2, 2, 2, 2821, 2823, 5, 282, 142, 2, 2822, 2821, 3, 2,
	2, 2, 2822, 2823, 3, 2, 2, 2, 2823, 2824, 3, 2, 2, 2, 2824, 2825, 7, 431,
	2, 2, 2825, 281, 3, 2, 2, 2, 2826, 2827, 9, 52, 2, 2, 2827, 2828, 5, 284,
	143, 2, 2828, 283, 3, 2, 2, 2, 2829, 2836, 5, 288, 145, 2, 2830, 2831,
	7, 14, 2, 2, 2831, 2832, 5, 286, 144, 2, 2832, 2833, 7, 7, 2, 2, 2833,
	2834, 5, 286, 144, 2, 2834, 2836, 3, 2, 2, 2, 2835, 2829, 3, 2, 2, 2, 2835,
	2830, 3, 2, 2, 2, 2836, 285, 3, 2, 2, 2, 2837, 2840, 5, 288, 145, 2, 2838,
	2840, 5, 290, 146, 2, 2839, 2837, 3, 2, 2, 2, 2839, 2838, 3, 2, 2, 2, 2840,
	287, 3, 2, 2, 2, 2841, 2842, 7, 388, 2, 2, 2842, 2848, 7, 333, 2, 2, 2843,
	2844, 7, 407, 2, 2, 2844, 2848, 7, 333, 2, 2, 2845, 2846, 7, 40, 2, 2,
	2846, 2848, 7, 352, 2, 2, 2847, 2841, 3, 2, 2, 2, 2847, 2843, 3, 2, 2,
	2, 2847, 2845, 3, 2, 2, 2, 2848, 289, 3, 2, 2, 2, 2849, 2850, 7, 388, 2,
	2, 2850, 2854, 7, 265, 2, 2, 2851, 2852, 7, 407, 2, 2, 2852, 2854, 7, 265,
	2, 2, 2853, 2849, 3, 2, 2, 2, 2853, 2851, 3, 2, 2, 2, 2854, 291, 3, 2,
	2, 2, 2855, 2856, 7, 263, 2, 2, 2856, 2861, 5, 294, 148, 2, 2857, 2858,
	7, 432, 2, 2, 2858, 2860, 5, 294, 148, 2, 2859, 2857, 3, 2, 2, 2, 2860,
	2863, 3, 2, 2, 2, 2861, 2859, 3, 2, 2, 2, 2861, 2862, 3, 2, 2, 2, 2862,
	2890, 3, 2, 2, 2, 2863, 2861, 3, 2, 2, 2, 2864, 2865, 7, 244, 2, 2, 2865,
	2868, 7, 413, 2, 2, 2866, 2869, 5, 334, 168, 2, 2867, 2869, 7, 409, 2,
	2, 2868, 2866, 3, 2, 2, 2, 2868, 2867, 3, 2, 2, 2, 2869, 2890, 3, 2, 2,
	2, 2870, 2871, 7, 243, 2, 2, 2871, 2874, 7, 413, 2, 2, 2872, 2875, 5, 334,
	168, 2, 2873, 2875, 7, 409, 2, 2, 2874, 2872, 3, 2, 2, 2, 2874, 2873, 3,
	2, 2, 2, 2875, 2890, 3, 2, 2, 2, 2876, 2877, 7, 310, 2, 2, 2877, 2878,
	7, 413, 2, 2, 2878, 2890, 9, 13, 2, 2, 2879, 2880, 7, 382, 2, 2, 2880,
	2881, 7, 413, 2, 2, 2881, 2890, 9, 13, 2, 2, 2882, 2883, 7, 385, 2, 2,
	2883, 2884, 7, 413, 2, 2, 2884, 2890, 7, 407, 2, 2, 2885, 2886, 7, 242,
	2, 2, 2886, 2890, 9, 13, 2, 2, 2887, 2888, 7, 383, 2, 2, 2888, 2890, 9,
	13, 2, 2, 2889, 2855, 3, 2, 2, 2, 2889, 2864, 3, 2, 2, 2, 2889, 2870, 3,
	2, 2, 2, 2889, 2876, 3, 2, 2, 2, 2889, 2879, 3, 2, 2, 2, 2889, 2882, 3,
	2, 2, 2, 2889, 2885, 3, 2, 2, 2, 2889, 2887, 3, 2, 2, 2, 2890, 293, 3,
	2, 2, 2, 2891, 2898, 7, 430, 2, 2, 2892, 2893, 7, 314, 2, 2, 2893, 2894,
	7, 413, 2, 2, 2894, 2899, 9, 53, 2, 2, 2895, 2896, 7, 249, 2, 2, 2896,
	2897, 7, 413, 2, 2, 2897, 2899, 7, 409, 2, 2, 2898, 2892, 3, 2, 2, 2, 2898,
	2895, 3, 2, 2, 2, 2899, 2900, 3, 2, 2, 2, 2900, 2901, 7, 431, 2, 2, 2901,
	295, 3, 2, 2, 2, 2902, 2905, 5, 298, 150, 2, 2903, 2905, 5, 300, 151, 2,
	2904, 2902, 3, 2, 2, 2, 2904, 2903, 3, 2, 2, 2, 2905, 297, 3, 2, 2, 2,
	2906, 2907, 7, 261, 2, 2, 2907, 2910, 5, 334, 168, 2, 2908, 2909, 7, 34,
	2, 2, 2909, 2911, 7, 263, 2, 2, 2910, 2908, 3, 2, 2, 2, 2910, 2911, 3,
	2, 2, 2, 2911, 2913, 3, 2, 2, 2, 2912, 2914, 7, 50, 2, 2, 2913, 2912, 3,
	2, 2, 2, 2913, 2914, 3, 2, 2, 2, 2914, 2917, 3, 2, 2, 2, 2915, 2916, 7,
	34, 2, 2, 2916, 2918, 7, 302, 2, 2, 2917, 2915, 3, 2, 2, 2, 2917, 2918,
	3, 2, 2, 2, 2918, 2919, 3, 2, 2, 2, 2919, 2924, 5, 300, 151, 2, 2920, 2921,
	7, 432, 2, 2, 2921, 2923, 5, 300, 151, 2, 2922, 2920, 3, 2, 2, 2, 2923,
	2926, 3, 2, 2, 2, 2924, 2922, 3, 2, 2, 2, 2924, 2925, 3, 2, 2, 2, 2925,
	299, 3, 2, 2, 2, 2926, 2924, 3, 2, 2, 2, 2927, 2928, 7, 430, 2, 2, 2928,
	2929, 7, 309, 2, 2, 2929, 2932, 7, 413, 2, 2, 2930, 2933, 5, 334, 168,
	2, 2931, 2933, 7, 409, 2, 2, 2932, 2930, 3, 2, 2, 2, 2932, 2931, 3, 2,
	2, 2, 2933, 2935, 3, 2, 2, 2, 2934, 2936, 7, 432, 2, 2, 2935, 2934, 3,
	2, 2, 2, 2935, 2936, 3, 2, 2, 2, 2936, 2937, 3, 2, 2, 2, 2937, 2938, 7,
	71, 2, 2, 2938, 2939, 7, 413, 2, 2, 2939, 2941, 7, 409, 2, 2, 2940, 2942,
	7, 432, 2, 2, 2941, 2940, 3, 2, 2, 2, 2941, 2942, 3, 2, 2, 2, 2942, 2949,
	3, 2, 2, 2, 2943, 2944, 7, 366, 2, 2, 2944, 2945, 7, 413, 2, 2, 2945, 2947,
	5, 342, 172, 2, 2946, 2948, 7, 432, 2, 2, 2947, 2946, 3, 2, 2, 2, 2947,
	2948, 3, 2, 2, 2, 2948, 2950, 3, 2, 2, 2, 2949, 2943, 3, 2, 2, 2, 2949,
	2950, 3, 2, 2, 2, 2950, 2960, 3, 2, 2, 2, 2951, 2952, 7, 300, 2, 2, 2952,
	2955, 7, 413, 2, 2, 2953, 2956, 5, 342, 172, 2, 2954, 2956, 7, 391, 2,
	2, 2955, 2953, 3, 2, 2, 2, 2955, 2954, 3, 2, 2, 2, 2956, 2958, 3, 2, 2,
	2, 2957, 2959, 7, 432, 2, 2, 2958, 2957, 3, 2, 2, 2, 2958, 2959, 3, 2,
	2, 2, 2959, 2961, 3, 2, 2, 2, 2960, 2951, 3, 2, 2, 2, 2960, 2961, 3, 2,
	2, 2, 2961, 2968, 3, 2, 2, 2, 2962, 2963, 7, 262, 2, 2, 2963, 2964, 7,
	413, 2, 2, 2964, 2966, 5, 342, 172, 2, 2965, 2967, 7, 432, 2, 2, 2966,
	2965, 3, 2, 2, 2, 2966, 2967, 3, 2, 2, 2, 2967, 2969, 3, 2, 2, 2, 2968,
	2962, 3, 2, 2, 2, 2968, 2969, 3, 2, 2, 2, 2969, 2970, 3, 2, 2, 2, 2970,
	2971, 7, 431, 2, 2, 2971, 301, 3, 2, 2, 2, 2972, 2973, 5, 334, 168, 2,
	2973, 2974, 7, 425, 2, 2, 2974, 2975, 5, 334, 168, 2, 2975, 2976, 7, 425,
	2, 2, 2976, 2977, 5, 334, 168, 2, 2977, 2978, 7, 425, 2, 2, 2978, 2990,
	3, 2, 2, 2, 2979, 2980, 5, 334, 168, 2, 2980, 2982, 7, 425, 2, 2, 2981,
	2983, 5, 334, 168, 2, 2982, 2981, 3, 2, 2, 2, 2982, 2983, 3, 2, 2, 2, 2983,
	2984, 3, 2, 2, 2, 2984, 2985, 7, 425, 2, 2, 2985, 2990, 3, 2, 2, 2, 2986,
	2987, 5, 334, 168, 2, 2987, 2988, 7, 425, 2, 2, 2988, 2990, 3, 2, 2, 2,
	2989, 2972, 3, 2, 2, 2, 2989, 2979, 3, 2, 2, 2, 2989, 2986, 3, 2, 2, 2,
	2989, 2990, 3, 2, 2, 2, 2990, 2991, 3, 2, 2, 2, 2991, 2992, 5, 334, 168,
	2, 2992, 303, 3, 2, 2, 2, 2993, 2994, 5, 334, 168, 2, 2994, 2996, 7, 425,
	2, 2, 2995, 2997, 5, 334, 168, 2, 2996, 2995, 3, 2, 2, 2, 2996, 2997, 3,
	2, 2, 2, 2997, 2998, 3, 2, 2, 2, 2998, 2999, 7, 425, 2, 2, 2999, 3004,
	3, 2, 2, 2, 3000, 3001, 5, 334, 168, 2, 3001, 3002, 7, 425, 2, 2, 3002,
	3004, 3, 2, 2, 2, 3003, 2993, 3, 2, 2, 2, 3003, 3000, 3, 2, 2, 2, 3003,
	3004, 3, 2, 2, 2, 3004, 3005, 3, 2, 2, 2, 3005, 3006, 5, 334, 168, 2, 3006,
	305, 3, 2, 2, 2, 3007, 3008, 5, 334, 168, 2, 3008, 3009, 7, 425, 2, 2,
	3009, 3011, 3, 2, 2, 2, 3010, 3007, 3, 2, 2, 2, 3010, 3011, 3, 2, 2, 2,
	3011, 3012, 3, 2, 2, 2, 3012, 3013, 5, 334, 168, 2, 3013, 307, 3, 2, 2,
	2, 3014, 3015, 5, 334, 168, 2, 3015, 3017, 7, 425, 2, 2, 3016, 3018, 5,
	334, 168, 2, 3017, 3016, 3, 2, 2, 2, 3017, 3018, 3, 2, 2, 2, 3018, 3019,
	3, 2, 2, 2, 3019, 3020, 7, 425, 2, 2, 3020, 3025, 3, 2, 2, 2, 3021, 3022,
	5, 334, 168, 2, 3022, 3023, 7, 425, 2, 2, 3023, 3025, 3, 2, 2, 2, 3024,
	3014, 3, 2, 2, 2, 3024, 3021, 3, 2, 2, 2, 3024, 3025, 3, 2, 2, 2, 3025,
	3026, 3, 2, 2, 2, 3026, 3027, 5, 334, 168, 2, 3027, 309, 3, 2, 2, 2, 3028,
	3031, 5, 302, 152, 2, 3029, 3031, 7, 406, 2, 2, 3030, 3028, 3, 2, 2, 2,
	3030, 3029, 3, 2, 2, 2, 3031, 311, 3, 2, 2, 2, 3032, 3033, 5, 304, 153,
	2, 3033, 3034, 7, 425, 2, 2, 3034, 3036, 3, 2, 2, 2, 3035, 3032, 3, 2,
	2, 2, 3035, 3036, 3, 2, 2, 2, 3036, 3037, 3, 2, 2, 2, 3037, 3038, 5, 334,
	168, 2, 3038, 313, 3, 2, 2, 2, 3039, 3044, 5, 334, 168, 2, 3040, 3041,
	7, 432, 2, 2, 3041, 3043, 5, 334, 168, 2, 3042, 3040, 3, 2, 2, 2, 3043,
	3046, 3, 2, 2, 2, 3044, 3042, 3, 2, 2, 2, 3044, 3045, 3, 2, 2, 2, 3045,
	315, 3, 2, 2, 2, 3046, 3044, 3, 2, 2, 2, 3047, 3050, 5, 334, 168, 2, 3048,
	3050, 7, 406, 2, 2, 3049, 3047, 3, 2, 2, 2, 3049, 3048, 3, 2, 2, 2, 3050,
	317, 3, 2, 2, 2, 3051, 3052, 9, 13, 2, 2, 3052, 319, 3, 2, 2, 2, 3053,
	3054, 9, 54, 2, 2, 3054, 321, 3, 2, 2, 2, 3055, 3057, 7, 111, 2, 2, 3056,
	3055, 3, 2, 2, 2, 3056, 3057, 3, 2, 2, 2, 3057, 3058, 3, 2, 2, 2, 3058,
	3059, 7, 112, 2, 2, 3059, 323, 3, 2, 2, 2, 3060, 3066, 5, 308, 155, 2,
	3061, 3066, 7, 149, 2, 2, 3062, 3066, 7, 100, 2, 2, 3063, 3066, 7, 217,
	2, 2, 3064, 3066, 7, 224, 2, 2, 3065, 3060, 3, 2, 2, 2, 3065, 3061, 3,
	2, 2, 2, 3065, 3062, 3, 2, 2, 2, 3065, 3063, 3, 2, 2, 2, 3065, 3064, 3,
	2, 2, 2, 3066, 325, 3, 2, 2, 2, 3067, 3069, 5, 334, 168, 2, 3068, 3070,
	7, 85, 2, 2, 3069, 3068, 3, 2, 2, 2, 3069, 3070, 3, 2, 2, 2, 3070, 3078,
	3, 2, 2, 2, 3071, 3072, 7, 430, 2, 2, 3072, 3075, 9, 55, 2, 2, 3073, 3074,
	7, 432, 2, 2, 3074, 3076, 7, 407, 2, 2, 3075, 3073, 3, 2, 2, 2, 3075, 3076,
	3, 2, 2, 2, 3076, 3077, 3, 2, 2, 2, 3077, 3079, 7, 431, 2, 2, 3078, 3071,
	3, 2, 2, 2, 3078, 3079, 3, 2, 2, 2, 3079, 327, 3, 2, 2, 2, 3080, 3083,
	7, 112, 2, 2, 3081, 3083, 5, 330, 166, 2, 3082, 3080, 3, 2, 2, 2, 3082,
	3081, 3, 2, 2, 2, 3083, 329, 3, 2, 2, 2, 3084, 3100, 7, 409, 2, 2, 3085,
	3100, 7, 410, 2, 2, 3086, 3088, 5, 332, 167, 2, 3087, 3086, 3, 2, 2, 2,
	3087, 3088, 3, 2, 2, 2, 3088, 3089, 3, 2, 2, 2, 3089, 3100, 7, 407, 2,
	2, 3090, 3092, 5, 332, 167, 2, 3091, 3090, 3, 2, 2, 2, 3091, 3092, 3, 2,
	2, 2, 3092, 3093, 3, 2, 2, 2, 3093, 3100, 9, 56, 2, 2, 3094, 3096, 5, 332,
	167, 2, 3095, 3094, 3, 2, 2, 2, 3095, 3096, 3, 2, 2, 2, 3096, 3097, 3,
	2, 2, 2, 3097, 3098, 7, 429, 2, 2, 3098, 3100, 9, 57, 2, 2, 3099, 3084,
	3, 2, 2, 2, 3099, 3085, 3, 2, 2, 2, 3099, 3087, 3, 2, 2, 2, 3099, 3091,
	3, 2, 2, 2, 3099, 3095, 3, 2, 2, 2, 3100, 331, 3, 2, 2, 2, 3101, 3102,
	9, 33, 2, 2, 3102, 333, 3, 2, 2, 2, 3103, 3107, 5, 336, 169, 2, 3104, 3107,
	7, 404, 2, 2, 3105, 3107, 7, 405, 2, 2, 3106, 3103, 3, 2, 2, 2, 3106, 3104,
	3, 2, 2, 2, 3106, 3105, 3, 2, 2, 2, 3107, 335, 3, 2, 2, 2, 3108, 3109,
	9, 58, 2, 2, 3109, 337, 3, 2, 2, 2, 3110, 3126, 7, 413, 2, 2, 3111, 3126,
	7, 414, 2, 2, 3112, 3126, 7, 415, 2, 2, 3113, 3114, 7, 415, 2, 2, 3114,
	3126, 7, 413, 2, 2, 3115, 3116, 7, 414, 2, 2, 3116, 3126, 7, 413, 2, 2,
	3117, 3118, 7, 415, 2, 2, 3118, 3126, 7, 414, 2, 2, 3119, 3120, 7, 416,
	2, 2, 3120, 3126, 7, 413, 2, 2, 3121, 3122, 7, 416, 2, 2, 3122, 3126, 7,
	414, 2, 2, 3123, 3124, 7, 416, 2, 2, 3124, 3126, 7, 415, 2, 2, 3125, 3110,
	3, 2, 2, 2, 3125, 3111, 3, 2, 2, 2, 3125, 3112, 3, 2, 2, 2, 3125, 3113,
	3, 2, 2, 2, 3125, 3115, 3, 2, 2, 2, 3125, 3117, 3, 2, 2, 2, 3125, 3119,
	3, 2, 2, 2, 3125, 3121, 3, 2, 2, 2, 3125, 3123, 3, 2, 2, 2, 3126, 339,
	3, 2, 2, 2, 3127, 3128, 9, 59, 2, 2, 3128, 341, 3, 2, 2, 2, 3129, 3131,
	7, 407, 2, 2, 3130, 3132, 9, 60, 2, 2, 3131, 3130, 3, 2, 2, 2, 3131, 3132,
	3, 2, 2, 2, 3132, 343, 3, 2, 2, 2, 459, 347, 354, 358, 362, 368, 374, 391,
	395, 398, 402, 406, 410, 415, 420, 427, 430, 434, 437, 445, 448, 453, 456,
	461, 466, 469, 474, 480, 487, 491, 493, 498, 511, 516, 518, 527, 530, 534,
	537, 541, 544, 548, 551, 554, 557, 560, 564, 569, 572, 576, 579, 583, 586,
	592, 595, 599, 602, 605, 612, 615, 619, 622, 625, 628, 631, 635, 639, 642,
	650, 654, 658, 661, 664, 667, 670, 677, 681, 683, 691, 697, 703, 705, 709,
	712, 715, 720, 725, 728, 736, 740, 747, 750, 759, 762, 766, 774, 777, 781,
	784, 793, 797, 801, 804, 811, 814, 821, 825, 827, 835, 838, 842, 851, 854,
	858, 862, 865, 870, 886, 890, 896, 898, 901, 909, 915, 920, 923, 932, 940,
	943, 950, 953, 990, 993, 999, 1011, 1013, 1016, 1040, 1051, 1059, 1070,
	1075, 1078, 1086, 1096, 1122, 1128, 1139, 1153, 1161, 1168, 1191, 1204,
	1210, 1215, 1218, 1224, 1228, 1235, 1244, 1248, 1254, 1261, 1265, 1274,
	1282, 1288, 1294, 1311, 1315, 1323, 1327, 1335, 1339, 1341, 1345, 1349,
	1353, 1357, 1363, 1367, 1369, 1374, 1382, 1385, 1388, 1397, 1402, 1407,
	1410, 1412, 1416, 1420, 1423, 1427, 1433, 1438, 1445, 1447, 1451, 1458,
	1462, 1465, 1474, 1477, 1479, 1488, 1499, 1503, 1505, 1507, 1513, 1518,
	1525, 1538, 1540, 1542, 1545, 1548, 1555, 1558, 1564, 1569, 1571, 1574,
	1580, 1588, 1590, 1593, 1597, 1600, 1606, 1609, 1613, 1616, 1622, 1625,
	1627, 1631, 1636, 1644, 1649, 1658, 1663, 1668, 1674, 1678, 1681, 1685,
	1691, 1699, 1704, 1706, 1709, 1714, 1719, 1722, 1727, 1730, 1733, 1739,
	1745, 1749, 1754, 1757, 1762, 1766, 1770, 1776, 1782, 1791, 1801, 1811,
	1813, 1815, 1818, 1821, 1832, 1834, 1836, 1839, 1842, 1845, 1848, 1851,
	1854, 1866, 1869, 1872, 1881, 1884, 1887, 1894, 1897, 1911, 1914, 1921,
	1932, 1936, 1949, 1953, 1961, 1965, 1983, 1998, 2000, 2011, 2018, 2025,
	2033, 2042, 2046, 2056, 2063, 2075, 2077, 2100, 2109, 2115, 2121, 2127,
	2138, 2146, 2154, 2159, 2163, 2167, 2170, 2175, 2179, 2183, 2192, 2195,
	2199, 2204, 2208, 2215, 2224, 2231, 2233, 2247, 2255, 2258, 2260, 2267,
	2271, 2282, 2316, 2332, 2338, 2345, 2351, 2356, 2364, 2367, 2369, 2376,
	2385, 2402, 2404, 2409, 2412, 2416, 2421, 2423, 2427, 2431, 2435, 2442,
	2444, 2446, 2449, 2462, 2466, 2468, 2471, 2475, 2495, 2499, 2503, 2514,
	2521, 2544, 2596, 2600, 2623, 2636, 2644, 2656, 2662, 2671, 2688, 2694,
	2702, 2706, 2714, 2721, 2731, 2739, 2764, 2769, 2774, 2780, 2783, 2787,
	2792, 2807, 2816, 2819, 2822, 2835, 2839, 2847, 2853, 2861, 2868, 2874,
	2889, 2898, 2904, 2910, 2913, 2917, 2924, 2932, 2935, 2941, 2947, 2949,
	2955, 2958, 2960, 2966, 2968, 2982, 2989, 2996, 3003, 3010, 3017, 3024,
	3030, 3035, 3044, 3049, 3056, 3065, 3069, 3075, 3078, 3082, 3087, 3091,
	3095, 3099, 3106, 3125, 3131,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'='", "'>'",
	"'<'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='",
	"'.'", "'_'", "'@'", "'#'", "'$'", "'('", "')'", "','", "';'", "':'", "'*'",
	"'/'", "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'",
}
var symbolicNames = []string{
	"", "HADR_options", "ADD", "ALL", "ALTER", "AND", "ANY", "AS", "ASC", "AUTHORIZATION",
	"BACKUP", "BEGIN", "BETWEEN", "BREAK", "BROWSE", "BULK", "BY", "CASCADE",
	"CASE", "CHANGETABLE", "CHANGES", "CHECK", "CHECKPOINT", "CLOSE", "CLUSTERED",
	"COALESCE", "COLLATE", "COLUMN", "COMMIT", "COMPUTE", "CONSTRAINT", "CONTAINMENT",
	"CONTAINS", "CONTAINSTABLE", "CONTINUE", "CONVERT", "CREATE", "CROSS",
	"CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
	"CURSOR", "DATABASE", "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", "DELETE",
	"DENY", "DESC", "DISK", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DROP", "DUMP",
	"ELSE", "END", "ERRLVL", "ESCAPE", "EXCEPT", "EXECUTE", "EXISTS", "EXIT",
	"EXTERNAL", "FETCH", "FILE", "FILENAME", "FILLFACTOR", "FOR", "FORCESEEK",
	"FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", "GOTO",
	"GRANT", "GROUP", "HAVING", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT",
	"IIF", "IF", "IN", "INDEX", "INNER", "INSERT", "INTERSECT", "INTO", "IS",
	"JOIN", "KEY", "KILL", "LEFT", "LIKE", "LINENO", "LOAD", "LOG", "MERGE",
	"NATIONAL", "NEXT", "NOCHECK", "NONCLUSTERED", "NONE", "NOT", "NULL", "NULLIF",
	"OF", "OFF", "OFFSETS", "ON", "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET",
	"OPENXML", "OPTION", "OR", "ORDER", "OUTER", "OVER", "PARTIAL", "PERCENT",
	"PIVOT", "PLAN", "PRECISION", "PRIMARY", "PRINT", "PROC", "PROCEDURE",
	"PUBLIC", "RAISERROR", "READ", "READTEXT", "RECONFIGURE", "REFERENCES",
	"REPLICATION", "RESTORE", "RESTRICT", "RETURN", "REVERT", "REVOKE", "RIGHT",
	"ROLLBACK", "ROWCOUNT", "ROWGUIDCOL", "RULE", "SAVE", "SCHEMA", "SECURITYAUDIT",
	"SELECT", "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE",
	"SESSION_USER", "SET", "SETUSER", "SHUTDOWN", "SOME", "STATISTICS", "SYSTEM_USER",
	"TABLE", "TABLESAMPLE", "TEXTSIZE", "THEN", "TO", "TOP", "TRAN", "TRANSACTION",
	"TRIGGER", "TRUNCATE", "TRY_CONVERT", "TSEQUAL", "UNION", "UNIQUE", "UNPIVOT",
	"UPDATE", "UPDATETEXT", "USE", "USER", "VALUES", "VALUE", "VARYING", "VIEW",
	"WAITFOR", "WHEN", "WHERE", "WHILE", "WITH", "WITHIN", "WRITETEXT", "ABSOLUTE",
	"AFTER", "ALLOWED", "ALLOW_SNAPSHOT_ISOLATION", "ANSI_NULLS", "ANSI_NULL_DEFAULT",
	"ANSI_PADDING", "ANSI_WARNINGS", "APPLY", "ARITHABORT", "AUTO", "AUTO_CLEANUP",
	"AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS",
	"AUTO_UPDATE_STATISTICS_ASYNC", "AVG", "BASE64", "BINARY_CHECKSUM", "BULK_LOGGED",
	"CALLER", "CAST", "CATCH", "CHANGE_RETENTION", "CHANGE_TRACKING", "CHECKSUM",
	"CHECKSUM_AGG", "COMMITTED", "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL",
	"CONTROL", "COOKIE", "COUNT", "COUNT_BIG", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT",
	"DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DATE_CORRELATION_OPTIMIZATION",
	"DAYS", "DB_CHAINING", "DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE",
	"DELAY", "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", "DIRECTORY_NAME",
	"DISABLE", "DISABLED", "DISABLE_BROKER", "DYNAMIC", "EMERGENCY", "ENABLE_BROKER",
	"ENCRYPTION", "ERROR_BROKER_CONVERSATIONS", "EXPAND", "FAST", "FAST_FORWARD",
	"FILEGROUP", "FILEGROWTH", "FILESTREAM", "FIRST", "FOLLOWING", "FORCE",
	"FORCED", "FORWARD_ONLY", "FULLSCAN", "GB", "GLOBAL", "GO", "GROUPING",
	"GROUPING_ID", "HADR", "HASH", "HONOR_BROKER_PRIORITY", "HOURS", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX",
	"IMMEDIATE", "IMPERSONATE", "INCREMENTAL", "INSENSITIVE", "INSERTED", "ISOLATION",
	"KB", "KEEP", "KEEPFIXED", "KEYSET", "LAST", "LEVEL", "LOCAL", "LOCK_ESCALATION",
	"LOGIN", "LOOP", "MARK", "MAX", "MAXDOP", "MAXRECURSION", "MAXSIZE", "MB",
	"MEMORY_OPTIMIZED_DATA", "MIN", "MINUTES", "MIN_ACTIVE_ROWVERSION", "MIXED_PAGE_ALLOCATION",
	"MODIFY", "MULTI_USER", "NAME", "NESTED_TRIGGERS", "NEW_BROKER", "NOCOUNT",
	"NOEXPAND", "NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NO_WAIT", "NTILE",
	"NUMBER", "NUMERIC_ROUNDABORT", "OFFLINE", "OFFSET", "ONLINE", "ONLY",
	"OPTIMISTIC", "OPTIMIZE", "OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", "PARAMETERIZATION",
	"PARTITION", "PATH", "PRECEDING", "PRIOR", "PRIVILEGES", "QUOTED_IDENTIFIER",
	"RANGE", "RANK", "READONLY", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", "READ_WRITE",
	"RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", "REMOTE", "REPEATABLE",
	"RESTRICTED_USER", "ROBUST", "ROOT", "ROW", "ROWGUID", "ROWS", "ROW_NUMBER",
	"SAMPLE", "SCHEMABINDING", "SCROLL", "SCROLL_LOCKS", "SECONDS", "SELF",
	"SERIALIZABLE", "SHOWPLAN", "SIMPLE", "SINGLE_USER", "SIZE", "SNAPSHOT",
	"SPATIAL_WINDOW_MAX_CELLS", "STATIC", "STATS_STREAM", "STDEV", "STDEVP",
	"SUM", "TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW", "TIES",
	"TIME", "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", "TRUSTWORTHY",
	"TRY", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED",
	"UNKNOWN", "UNLIMITED", "USING", "VAR", "VARP", "VIEWS", "VIEW_METADATA",
	"WORK", "XML", "XMLNAMESPACES", "DOLLAR_ACTION", "SPACE", "COMMENT", "LINE_COMMENT",
	"DOUBLE_QUOTE_ID", "SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", "ID", "STRING",
	"BINARY", "FLOAT", "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN",
	"MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN",
	"XOR_ASSIGN", "OR_ASSIGN", "DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR",
	"LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR", "DIVIDE",
	"MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR",
}

var ruleNames = []string{
	"tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", "ddl_clause",
	"cfl_statement", "another_statement", "delete_statement", "delete_statement_from",
	"insert_statement", "insert_statement_value", "select_statement", "update_statement",
	"where_clause_dml", "output_clause", "output_dml_list_elem", "output_column_name",
	"create_database", "create_index", "create_procedure", "procedure_param",
	"procedure_option", "create_statistics", "create_table", "create_view",
	"view_attribute", "alter_table", "alter_database", "database_optionspec",
	"auto_option", "change_tracking_option", "change_tracking_option_list",
	"containment_option", "cursor_option", "date_correlation_optimization_option",
	"db_encryption_option", "db_state_option", "db_update_option", "db_user_access_option",
	"delayed_durability_option", "external_access_option", "mixed_page_allocation_option",
	"parameterization_option", "recovery_option", "service_broker_option",
	"snapshot_option", "sql_option", "target_recovery_time_option", "termination",
	"drop_index", "drop_procedure", "drop_statistics", "drop_table", "drop_view",
	"create_type", "drop_type", "rowset_function_limited", "openquery", "opendatasource",
	"declare_statement", "cursor_statement", "execute_statement", "execute_statement_arg",
	"execute_var_string", "security_statement", "grant_permission", "set_statement",
	"transaction_statement", "go_statement", "use_statement", "execute_clause",
	"declare_local", "table_type_definition", "column_def_table_constraints",
	"column_def_table_constraint", "column_definition", "column_constraint",
	"table_constraint", "index_options", "index_option", "declare_cursor",
	"declare_set_cursor_common", "fetch_cursor", "set_special", "constant_LOCAL_ID",
	"expression", "constant_expression", "subquery", "with_expression", "common_table_expression",
	"update_elem", "search_condition_list", "search_condition", "predicate",
	"query_expression", "union_op", "query_specification", "top_clause", "top_clause_dm",
	"order_by_clause", "fetch_expression", "for_clause", "xml_common_directives",
	"order_by_expression", "group_by_item", "option_clause", "option", "optimize_for_arg",
	"select_list", "select_list_elem", "table_sources", "table_source", "table_source_item",
	"table_alias", "change_table", "join_type", "table_name_with_hint", "rowset_function",
	"bulk_option", "derived_table", "function_call", "switch_section", "switch_search_condition_section",
	"with_table_hints", "insert_with_table_hints", "table_hint", "index_value",
	"column_alias_list", "column_alias", "a_star", "table_value_constructor",
	"expression_list", "value_list", "next_value_for", "next_value_for_function",
	"ranking_windowed_function", "aggregate_windowed_function", "all_distinct",
	"over_clause", "row_or_range_clause", "window_frame_extent", "window_frame_bound",
	"window_frame_preceding", "window_frame_following", "create_database_option",
	"database_filestream_option", "database_file_spec", "file_group", "file_spec",
	"full_table_name", "table_name", "simple_name", "func_proc_name", "ddl_object",
	"full_column_name", "column_name_list", "cursor_name", "on_off", "clustered",
	"null_notnull", "scalar_function_name", "data_type", "default_value", "constant",
	"sign", "r_id", "simple_id", "comparison_operator", "assignment_operator",
	"file_size",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type tsqlParser struct {
	*antlr.BaseParser
}

func NewtsqlParser(input antlr.TokenStream) *tsqlParser {
	this := new(tsqlParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "tsql.g4"

	return this
}

// tsqlParser tokens.
const (
	tsqlParserEOF                                   = antlr.TokenEOF
	tsqlParserHADR_options                          = 1
	tsqlParserADD                                   = 2
	tsqlParserALL                                   = 3
	tsqlParserALTER                                 = 4
	tsqlParserAND                                   = 5
	tsqlParserANY                                   = 6
	tsqlParserAS                                    = 7
	tsqlParserASC                                   = 8
	tsqlParserAUTHORIZATION                         = 9
	tsqlParserBACKUP                                = 10
	tsqlParserBEGIN                                 = 11
	tsqlParserBETWEEN                               = 12
	tsqlParserBREAK                                 = 13
	tsqlParserBROWSE                                = 14
	tsqlParserBULK                                  = 15
	tsqlParserBY                                    = 16
	tsqlParserCASCADE                               = 17
	tsqlParserCASE                                  = 18
	tsqlParserCHANGETABLE                           = 19
	tsqlParserCHANGES                               = 20
	tsqlParserCHECK                                 = 21
	tsqlParserCHECKPOINT                            = 22
	tsqlParserCLOSE                                 = 23
	tsqlParserCLUSTERED                             = 24
	tsqlParserCOALESCE                              = 25
	tsqlParserCOLLATE                               = 26
	tsqlParserCOLUMN                                = 27
	tsqlParserCOMMIT                                = 28
	tsqlParserCOMPUTE                               = 29
	tsqlParserCONSTRAINT                            = 30
	tsqlParserCONTAINMENT                           = 31
	tsqlParserCONTAINS                              = 32
	tsqlParserCONTAINSTABLE                         = 33
	tsqlParserCONTINUE                              = 34
	tsqlParserCONVERT                               = 35
	tsqlParserCREATE                                = 36
	tsqlParserCROSS                                 = 37
	tsqlParserCURRENT                               = 38
	tsqlParserCURRENT_DATE                          = 39
	tsqlParserCURRENT_TIME                          = 40
	tsqlParserCURRENT_TIMESTAMP                     = 41
	tsqlParserCURRENT_USER                          = 42
	tsqlParserCURSOR                                = 43
	tsqlParserDATABASE                              = 44
	tsqlParserDBCC                                  = 45
	tsqlParserDEALLOCATE                            = 46
	tsqlParserDECLARE                               = 47
	tsqlParserDEFAULT                               = 48
	tsqlParserDELETE                                = 49
	tsqlParserDENY                                  = 50
	tsqlParserDESC                                  = 51
	tsqlParserDISK                                  = 52
	tsqlParserDISTINCT                              = 53
	tsqlParserDISTRIBUTED                           = 54
	tsqlParserDOUBLE                                = 55
	tsqlParserDROP                                  = 56
	tsqlParserDUMP                                  = 57
	tsqlParserELSE                                  = 58
	tsqlParserEND                                   = 59
	tsqlParserERRLVL                                = 60
	tsqlParserESCAPE                                = 61
	tsqlParserEXCEPT                                = 62
	tsqlParserEXECUTE                               = 63
	tsqlParserEXISTS                                = 64
	tsqlParserEXIT                                  = 65
	tsqlParserEXTERNAL                              = 66
	tsqlParserFETCH                                 = 67
	tsqlParserFILE                                  = 68
	tsqlParserFILENAME                              = 69
	tsqlParserFILLFACTOR                            = 70
	tsqlParserFOR                                   = 71
	tsqlParserFORCESEEK                             = 72
	tsqlParserFOREIGN                               = 73
	tsqlParserFREETEXT                              = 74
	tsqlParserFREETEXTTABLE                         = 75
	tsqlParserFROM                                  = 76
	tsqlParserFULL                                  = 77
	tsqlParserFUNCTION                              = 78
	tsqlParserGOTO                                  = 79
	tsqlParserGRANT                                 = 80
	tsqlParserGROUP                                 = 81
	tsqlParserHAVING                                = 82
	tsqlParserIDENTITY                              = 83
	tsqlParserIDENTITYCOL                           = 84
	tsqlParserIDENTITY_INSERT                       = 85
	tsqlParserIIF                                   = 86
	tsqlParserIF                                    = 87
	tsqlParserIN                                    = 88
	tsqlParserINDEX                                 = 89
	tsqlParserINNER                                 = 90
	tsqlParserINSERT                                = 91
	tsqlParserINTERSECT                             = 92
	tsqlParserINTO                                  = 93
	tsqlParserIS                                    = 94
	tsqlParserJOIN                                  = 95
	tsqlParserKEY                                   = 96
	tsqlParserKILL                                  = 97
	tsqlParserLEFT                                  = 98
	tsqlParserLIKE                                  = 99
	tsqlParserLINENO                                = 100
	tsqlParserLOAD                                  = 101
	tsqlParserLOG                                   = 102
	tsqlParserMERGE                                 = 103
	tsqlParserNATIONAL                              = 104
	tsqlParserNEXT                                  = 105
	tsqlParserNOCHECK                               = 106
	tsqlParserNONCLUSTERED                          = 107
	tsqlParserNONE                                  = 108
	tsqlParserNOT                                   = 109
	tsqlParserNULL                                  = 110
	tsqlParserNULLIF                                = 111
	tsqlParserOF                                    = 112
	tsqlParserOFF                                   = 113
	tsqlParserOFFSETS                               = 114
	tsqlParserON                                    = 115
	tsqlParserOPEN                                  = 116
	tsqlParserOPENDATASOURCE                        = 117
	tsqlParserOPENQUERY                             = 118
	tsqlParserOPENROWSET                            = 119
	tsqlParserOPENXML                               = 120
	tsqlParserOPTION                                = 121
	tsqlParserOR                                    = 122
	tsqlParserORDER                                 = 123
	tsqlParserOUTER                                 = 124
	tsqlParserOVER                                  = 125
	tsqlParserPARTIAL                               = 126
	tsqlParserPERCENT                               = 127
	tsqlParserPIVOT                                 = 128
	tsqlParserPLAN                                  = 129
	tsqlParserPRECISION                             = 130
	tsqlParserPRIMARY                               = 131
	tsqlParserPRINT                                 = 132
	tsqlParserPROC                                  = 133
	tsqlParserPROCEDURE                             = 134
	tsqlParserPUBLIC                                = 135
	tsqlParserRAISERROR                             = 136
	tsqlParserREAD                                  = 137
	tsqlParserREADTEXT                              = 138
	tsqlParserRECONFIGURE                           = 139
	tsqlParserREFERENCES                            = 140
	tsqlParserREPLICATION                           = 141
	tsqlParserRESTORE                               = 142
	tsqlParserRESTRICT                              = 143
	tsqlParserRETURN                                = 144
	tsqlParserREVERT                                = 145
	tsqlParserREVOKE                                = 146
	tsqlParserRIGHT                                 = 147
	tsqlParserROLLBACK                              = 148
	tsqlParserROWCOUNT                              = 149
	tsqlParserROWGUIDCOL                            = 150
	tsqlParserRULE                                  = 151
	tsqlParserSAVE                                  = 152
	tsqlParserSCHEMA                                = 153
	tsqlParserSECURITYAUDIT                         = 154
	tsqlParserSELECT                                = 155
	tsqlParserSEMANTICKEYPHRASETABLE                = 156
	tsqlParserSEMANTICSIMILARITYDETAILSTABLE        = 157
	tsqlParserSEMANTICSIMILARITYTABLE               = 158
	tsqlParserSESSION_USER                          = 159
	tsqlParserSET                                   = 160
	tsqlParserSETUSER                               = 161
	tsqlParserSHUTDOWN                              = 162
	tsqlParserSOME                                  = 163
	tsqlParserSTATISTICS                            = 164
	tsqlParserSYSTEM_USER                           = 165
	tsqlParserTABLE                                 = 166
	tsqlParserTABLESAMPLE                           = 167
	tsqlParserTEXTSIZE                              = 168
	tsqlParserTHEN                                  = 169
	tsqlParserTO                                    = 170
	tsqlParserTOP                                   = 171
	tsqlParserTRAN                                  = 172
	tsqlParserTRANSACTION                           = 173
	tsqlParserTRIGGER                               = 174
	tsqlParserTRUNCATE                              = 175
	tsqlParserTRY_CONVERT                           = 176
	tsqlParserTSEQUAL                               = 177
	tsqlParserUNION                                 = 178
	tsqlParserUNIQUE                                = 179
	tsqlParserUNPIVOT                               = 180
	tsqlParserUPDATE                                = 181
	tsqlParserUPDATETEXT                            = 182
	tsqlParserUSE                                   = 183
	tsqlParserUSER                                  = 184
	tsqlParserVALUES                                = 185
	tsqlParserVALUE                                 = 186
	tsqlParserVARYING                               = 187
	tsqlParserVIEW                                  = 188
	tsqlParserWAITFOR                               = 189
	tsqlParserWHEN                                  = 190
	tsqlParserWHERE                                 = 191
	tsqlParserWHILE                                 = 192
	tsqlParserWITH                                  = 193
	tsqlParserWITHIN                                = 194
	tsqlParserWRITETEXT                             = 195
	tsqlParserABSOLUTE                              = 196
	tsqlParserAFTER                                 = 197
	tsqlParserALLOWED                               = 198
	tsqlParserALLOW_SNAPSHOT_ISOLATION              = 199
	tsqlParserANSI_NULLS                            = 200
	tsqlParserANSI_NULL_DEFAULT                     = 201
	tsqlParserANSI_PADDING                          = 202
	tsqlParserANSI_WARNINGS                         = 203
	tsqlParserAPPLY                                 = 204
	tsqlParserARITHABORT                            = 205
	tsqlParserAUTO                                  = 206
	tsqlParserAUTO_CLEANUP                          = 207
	tsqlParserAUTO_CLOSE                            = 208
	tsqlParserAUTO_CREATE_STATISTICS                = 209
	tsqlParserAUTO_SHRINK                           = 210
	tsqlParserAUTO_UPDATE_STATISTICS                = 211
	tsqlParserAUTO_UPDATE_STATISTICS_ASYNC          = 212
	tsqlParserAVG                                   = 213
	tsqlParserBASE64                                = 214
	tsqlParserBINARY_CHECKSUM                       = 215
	tsqlParserBULK_LOGGED                           = 216
	tsqlParserCALLER                                = 217
	tsqlParserCAST                                  = 218
	tsqlParserCATCH                                 = 219
	tsqlParserCHANGE_RETENTION                      = 220
	tsqlParserCHANGE_TRACKING                       = 221
	tsqlParserCHECKSUM                              = 222
	tsqlParserCHECKSUM_AGG                          = 223
	tsqlParserCOMMITTED                             = 224
	tsqlParserCOMPATIBILITY_LEVEL                   = 225
	tsqlParserCONCAT                                = 226
	tsqlParserCONCAT_NULL_YIELDS_NULL               = 227
	tsqlParserCONTROL                               = 228
	tsqlParserCOOKIE                                = 229
	tsqlParserCOUNT                                 = 230
	tsqlParserCOUNT_BIG                             = 231
	tsqlParserCURSOR_CLOSE_ON_COMMIT                = 232
	tsqlParserCURSOR_DEFAULT                        = 233
	tsqlParserDATEADD                               = 234
	tsqlParserDATEDIFF                              = 235
	tsqlParserDATENAME                              = 236
	tsqlParserDATEPART                              = 237
	tsqlParserDATE_CORRELATION_OPTIMIZATION         = 238
	tsqlParserDAYS                                  = 239
	tsqlParserDB_CHAINING                           = 240
	tsqlParserDEFAULT_FULLTEXT_LANGUAGE             = 241
	tsqlParserDEFAULT_LANGUAGE                      = 242
	tsqlParserDELAY                                 = 243
	tsqlParserDELAYED_DURABILITY                    = 244
	tsqlParserDELETED                               = 245
	tsqlParserDENSE_RANK                            = 246
	tsqlParserDIRECTORY_NAME                        = 247
	tsqlParserDISABLE                               = 248
	tsqlParserDISABLED                              = 249
	tsqlParserDISABLE_BROKER                        = 250
	tsqlParserDYNAMIC                               = 251
	tsqlParserEMERGENCY                             = 252
	tsqlParserENABLE_BROKER                         = 253
	tsqlParserENCRYPTION                            = 254
	tsqlParserERROR_BROKER_CONVERSATIONS            = 255
	tsqlParserEXPAND                                = 256
	tsqlParserFAST                                  = 257
	tsqlParserFAST_FORWARD                          = 258
	tsqlParserFILEGROUP                             = 259
	tsqlParserFILEGROWTH                            = 260
	tsqlParserFILESTREAM                            = 261
	tsqlParserFIRST                                 = 262
	tsqlParserFOLLOWING                             = 263
	tsqlParserFORCE                                 = 264
	tsqlParserFORCED                                = 265
	tsqlParserFORWARD_ONLY                          = 266
	tsqlParserFULLSCAN                              = 267
	tsqlParserGB                                    = 268
	tsqlParserGLOBAL                                = 269
	tsqlParserGO                                    = 270
	tsqlParserGROUPING                              = 271
	tsqlParserGROUPING_ID                           = 272
	tsqlParserHADR                                  = 273
	tsqlParserHASH                                  = 274
	tsqlParserHONOR_BROKER_PRIORITY                 = 275
	tsqlParserHOURS                                 = 276
	tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX = 277
	tsqlParserIMMEDIATE                             = 278
	tsqlParserIMPERSONATE                           = 279
	tsqlParserINCREMENTAL                           = 280
	tsqlParserINSENSITIVE                           = 281
	tsqlParserINSERTED                              = 282
	tsqlParserISOLATION                             = 283
	tsqlParserKB                                    = 284
	tsqlParserKEEP                                  = 285
	tsqlParserKEEPFIXED                             = 286
	tsqlParserKEYSET                                = 287
	tsqlParserLAST                                  = 288
	tsqlParserLEVEL                                 = 289
	tsqlParserLOCAL                                 = 290
	tsqlParserLOCK_ESCALATION                       = 291
	tsqlParserLOGIN                                 = 292
	tsqlParserLOOP                                  = 293
	tsqlParserMARK                                  = 294
	tsqlParserMAX                                   = 295
	tsqlParserMAXDOP                                = 296
	tsqlParserMAXRECURSION                          = 297
	tsqlParserMAXSIZE                               = 298
	tsqlParserMB                                    = 299
	tsqlParserMEMORY_OPTIMIZED_DATA                 = 300
	tsqlParserMIN                                   = 301
	tsqlParserMINUTES                               = 302
	tsqlParserMIN_ACTIVE_ROWVERSION                 = 303
	tsqlParserMIXED_PAGE_ALLOCATION                 = 304
	tsqlParserMODIFY                                = 305
	tsqlParserMULTI_USER                            = 306
	tsqlParserNAME                                  = 307
	tsqlParserNESTED_TRIGGERS                       = 308
	tsqlParserNEW_BROKER                            = 309
	tsqlParserNOCOUNT                               = 310
	tsqlParserNOEXPAND                              = 311
	tsqlParserNON_TRANSACTED_ACCESS                 = 312
	tsqlParserNORECOMPUTE                           = 313
	tsqlParserNO_WAIT                               = 314
	tsqlParserNTILE                                 = 315
	tsqlParserNUMBER                                = 316
	tsqlParserNUMERIC_ROUNDABORT                    = 317
	tsqlParserOFFLINE                               = 318
	tsqlParserOFFSET                                = 319
	tsqlParserONLINE                                = 320
	tsqlParserONLY                                  = 321
	tsqlParserOPTIMISTIC                            = 322
	tsqlParserOPTIMIZE                              = 323
	tsqlParserOUT                                   = 324
	tsqlParserOUTPUT                                = 325
	tsqlParserOWNER                                 = 326
	tsqlParserPAGE_VERIFY                           = 327
	tsqlParserPARAMETERIZATION                      = 328
	tsqlParserPARTITION                             = 329
	tsqlParserPATH                                  = 330
	tsqlParserPRECEDING                             = 331
	tsqlParserPRIOR                                 = 332
	tsqlParserPRIVILEGES                            = 333
	tsqlParserQUOTED_IDENTIFIER                     = 334
	tsqlParserRANGE                                 = 335
	tsqlParserRANK                                  = 336
	tsqlParserREADONLY                              = 337
	tsqlParserREAD_COMMITTED_SNAPSHOT               = 338
	tsqlParserREAD_ONLY                             = 339
	tsqlParserREAD_WRITE                            = 340
	tsqlParserRECOMPILE                             = 341
	tsqlParserRECOVERY                              = 342
	tsqlParserRECURSIVE_TRIGGERS                    = 343
	tsqlParserRELATIVE                              = 344
	tsqlParserREMOTE                                = 345
	tsqlParserREPEATABLE                            = 346
	tsqlParserRESTRICTED_USER                       = 347
	tsqlParserROBUST                                = 348
	tsqlParserROOT                                  = 349
	tsqlParserROW                                   = 350
	tsqlParserROWGUID                               = 351
	tsqlParserROWS                                  = 352
	tsqlParserROW_NUMBER                            = 353
	tsqlParserSAMPLE                                = 354
	tsqlParserSCHEMABINDING                         = 355
	tsqlParserSCROLL                                = 356
	tsqlParserSCROLL_LOCKS                          = 357
	tsqlParserSECONDS                               = 358
	tsqlParserSELF                                  = 359
	tsqlParserSERIALIZABLE                          = 360
	tsqlParserSHOWPLAN                              = 361
	tsqlParserSIMPLE                                = 362
	tsqlParserSINGLE_USER                           = 363
	tsqlParserSIZE                                  = 364
	tsqlParserSNAPSHOT                              = 365
	tsqlParserSPATIAL_WINDOW_MAX_CELLS              = 366
	tsqlParserSTATIC                                = 367
	tsqlParserSTATS_STREAM                          = 368
	tsqlParserSTDEV                                 = 369
	tsqlParserSTDEVP                                = 370
	tsqlParserSUM                                   = 371
	tsqlParserTAKE                                  = 372
	tsqlParserTARGET_RECOVERY_TIME                  = 373
	tsqlParserTB                                    = 374
	tsqlParserTEXTIMAGE_ON                          = 375
	tsqlParserTHROW                                 = 376
	tsqlParserTIES                                  = 377
	tsqlParserTIME                                  = 378
	tsqlParserTORN_PAGE_DETECTION                   = 379
	tsqlParserTRANSFORM_NOISE_WORDS                 = 380
	tsqlParserTRUSTWORTHY                           = 381
	tsqlParserTRY                                   = 382
	tsqlParserTWO_DIGIT_YEAR_CUTOFF                 = 383
	tsqlParserTYPE                                  = 384
	tsqlParserTYPE_WARNING                          = 385
	tsqlParserUNBOUNDED                             = 386
	tsqlParserUNCOMMITTED                           = 387
	tsqlParserUNKNOWN                               = 388
	tsqlParserUNLIMITED                             = 389
	tsqlParserUSING                                 = 390
	tsqlParserVAR                                   = 391
	tsqlParserVARP                                  = 392
	tsqlParserVIEWS                                 = 393
	tsqlParserVIEW_METADATA                         = 394
	tsqlParserWORK                                  = 395
	tsqlParserXML                                   = 396
	tsqlParserXMLNAMESPACES                         = 397
	tsqlParserDOLLAR_ACTION                         = 398
	tsqlParserSPACE                                 = 399
	tsqlParserCOMMENT                               = 400
	tsqlParserLINE_COMMENT                          = 401
	tsqlParserDOUBLE_QUOTE_ID                       = 402
	tsqlParserSQUARE_BRACKET_ID                     = 403
	tsqlParserLOCAL_ID                              = 404
	tsqlParserDECIMAL                               = 405
	tsqlParserID                                    = 406
	tsqlParserSTRING                                = 407
	tsqlParserBINARY                                = 408
	tsqlParserFLOAT                                 = 409
	tsqlParserREAL                                  = 410
	tsqlParserEQUAL                                 = 411
	tsqlParserGREATER                               = 412
	tsqlParserLESS                                  = 413
	tsqlParserEXCLAMATION                           = 414
	tsqlParserPLUS_ASSIGN                           = 415
	tsqlParserMINUS_ASSIGN                          = 416
	tsqlParserMULT_ASSIGN                           = 417
	tsqlParserDIV_ASSIGN                            = 418
	tsqlParserMOD_ASSIGN                            = 419
	tsqlParserAND_ASSIGN                            = 420
	tsqlParserXOR_ASSIGN                            = 421
	tsqlParserOR_ASSIGN                             = 422
	tsqlParserDOT                                   = 423
	tsqlParserUNDERLINE                             = 424
	tsqlParserAT                                    = 425
	tsqlParserSHARP                                 = 426
	tsqlParserDOLLAR                                = 427
	tsqlParserLR_BRACKET                            = 428
	tsqlParserRR_BRACKET                            = 429
	tsqlParserCOMMA                                 = 430
	tsqlParserSEMI                                  = 431
	tsqlParserCOLON                                 = 432
	tsqlParserSTAR                                  = 433
	tsqlParserDIVIDE                                = 434
	tsqlParserMODULE                                = 435
	tsqlParserPLUS                                  = 436
	tsqlParserMINUS                                 = 437
	tsqlParserBIT_NOT                               = 438
	tsqlParserBIT_OR                                = 439
	tsqlParserBIT_AND                               = 440
	tsqlParserBIT_XOR                               = 441
)

// tsqlParser rules.
const (
	tsqlParserRULE_tsql_file                            = 0
	tsqlParserRULE_batch                                = 1
	tsqlParserRULE_sql_clauses                          = 2
	tsqlParserRULE_sql_clause                           = 3
	tsqlParserRULE_dml_clause                           = 4
	tsqlParserRULE_ddl_clause                           = 5
	tsqlParserRULE_cfl_statement                        = 6
	tsqlParserRULE_another_statement                    = 7
	tsqlParserRULE_delete_statement                     = 8
	tsqlParserRULE_delete_statement_from                = 9
	tsqlParserRULE_insert_statement                     = 10
	tsqlParserRULE_insert_statement_value               = 11
	tsqlParserRULE_select_statement                     = 12
	tsqlParserRULE_update_statement                     = 13
	tsqlParserRULE_where_clause_dml                     = 14
	tsqlParserRULE_output_clause                        = 15
	tsqlParserRULE_output_dml_list_elem                 = 16
	tsqlParserRULE_output_column_name                   = 17
	tsqlParserRULE_create_database                      = 18
	tsqlParserRULE_create_index                         = 19
	tsqlParserRULE_create_procedure                     = 20
	tsqlParserRULE_procedure_param                      = 21
	tsqlParserRULE_procedure_option                     = 22
	tsqlParserRULE_create_statistics                    = 23
	tsqlParserRULE_create_table                         = 24
	tsqlParserRULE_create_view                          = 25
	tsqlParserRULE_view_attribute                       = 26
	tsqlParserRULE_alter_table                          = 27
	tsqlParserRULE_alter_database                       = 28
	tsqlParserRULE_database_optionspec                  = 29
	tsqlParserRULE_auto_option                          = 30
	tsqlParserRULE_change_tracking_option               = 31
	tsqlParserRULE_change_tracking_option_list          = 32
	tsqlParserRULE_containment_option                   = 33
	tsqlParserRULE_cursor_option                        = 34
	tsqlParserRULE_date_correlation_optimization_option = 35
	tsqlParserRULE_db_encryption_option                 = 36
	tsqlParserRULE_db_state_option                      = 37
	tsqlParserRULE_db_update_option                     = 38
	tsqlParserRULE_db_user_access_option                = 39
	tsqlParserRULE_delayed_durability_option            = 40
	tsqlParserRULE_external_access_option               = 41
	tsqlParserRULE_mixed_page_allocation_option         = 42
	tsqlParserRULE_parameterization_option              = 43
	tsqlParserRULE_recovery_option                      = 44
	tsqlParserRULE_service_broker_option                = 45
	tsqlParserRULE_snapshot_option                      = 46
	tsqlParserRULE_sql_option                           = 47
	tsqlParserRULE_target_recovery_time_option          = 48
	tsqlParserRULE_termination                          = 49
	tsqlParserRULE_drop_index                           = 50
	tsqlParserRULE_drop_procedure                       = 51
	tsqlParserRULE_drop_statistics                      = 52
	tsqlParserRULE_drop_table                           = 53
	tsqlParserRULE_drop_view                            = 54
	tsqlParserRULE_create_type                          = 55
	tsqlParserRULE_drop_type                            = 56
	tsqlParserRULE_rowset_function_limited              = 57
	tsqlParserRULE_openquery                            = 58
	tsqlParserRULE_opendatasource                       = 59
	tsqlParserRULE_declare_statement                    = 60
	tsqlParserRULE_cursor_statement                     = 61
	tsqlParserRULE_execute_statement                    = 62
	tsqlParserRULE_execute_statement_arg                = 63
	tsqlParserRULE_execute_var_string                   = 64
	tsqlParserRULE_security_statement                   = 65
	tsqlParserRULE_grant_permission                     = 66
	tsqlParserRULE_set_statement                        = 67
	tsqlParserRULE_transaction_statement                = 68
	tsqlParserRULE_go_statement                         = 69
	tsqlParserRULE_use_statement                        = 70
	tsqlParserRULE_execute_clause                       = 71
	tsqlParserRULE_declare_local                        = 72
	tsqlParserRULE_table_type_definition                = 73
	tsqlParserRULE_column_def_table_constraints         = 74
	tsqlParserRULE_column_def_table_constraint          = 75
	tsqlParserRULE_column_definition                    = 76
	tsqlParserRULE_column_constraint                    = 77
	tsqlParserRULE_table_constraint                     = 78
	tsqlParserRULE_index_options                        = 79
	tsqlParserRULE_index_option                         = 80
	tsqlParserRULE_declare_cursor                       = 81
	tsqlParserRULE_declare_set_cursor_common            = 82
	tsqlParserRULE_fetch_cursor                         = 83
	tsqlParserRULE_set_special                          = 84
	tsqlParserRULE_constant_LOCAL_ID                    = 85
	tsqlParserRULE_expression                           = 86
	tsqlParserRULE_constant_expression                  = 87
	tsqlParserRULE_subquery                             = 88
	tsqlParserRULE_with_expression                      = 89
	tsqlParserRULE_common_table_expression              = 90
	tsqlParserRULE_update_elem                          = 91
	tsqlParserRULE_search_condition_list                = 92
	tsqlParserRULE_search_condition                     = 93
	tsqlParserRULE_predicate                            = 94
	tsqlParserRULE_query_expression                     = 95
	tsqlParserRULE_union_op                             = 96
	tsqlParserRULE_query_specification                  = 97
	tsqlParserRULE_top_clause                           = 98
	tsqlParserRULE_top_clause_dm                        = 99
	tsqlParserRULE_order_by_clause                      = 100
	tsqlParserRULE_fetch_expression                     = 101
	tsqlParserRULE_for_clause                           = 102
	tsqlParserRULE_xml_common_directives                = 103
	tsqlParserRULE_order_by_expression                  = 104
	tsqlParserRULE_group_by_item                        = 105
	tsqlParserRULE_option_clause                        = 106
	tsqlParserRULE_option                               = 107
	tsqlParserRULE_optimize_for_arg                     = 108
	tsqlParserRULE_select_list                          = 109
	tsqlParserRULE_select_list_elem                     = 110
	tsqlParserRULE_table_sources                        = 111
	tsqlParserRULE_table_source                         = 112
	tsqlParserRULE_table_source_item                    = 113
	tsqlParserRULE_table_alias                          = 114
	tsqlParserRULE_change_table                         = 115
	tsqlParserRULE_join_type                            = 116
	tsqlParserRULE_table_name_with_hint                 = 117
	tsqlParserRULE_rowset_function                      = 118
	tsqlParserRULE_bulk_option                          = 119
	tsqlParserRULE_derived_table                        = 120
	tsqlParserRULE_function_call                        = 121
	tsqlParserRULE_switch_section                       = 122
	tsqlParserRULE_switch_search_condition_section      = 123
	tsqlParserRULE_with_table_hints                     = 124
	tsqlParserRULE_insert_with_table_hints              = 125
	tsqlParserRULE_table_hint                           = 126
	tsqlParserRULE_index_value                          = 127
	tsqlParserRULE_column_alias_list                    = 128
	tsqlParserRULE_column_alias                         = 129
	tsqlParserRULE_a_star                               = 130
	tsqlParserRULE_table_value_constructor              = 131
	tsqlParserRULE_expression_list                      = 132
	tsqlParserRULE_value_list                           = 133
	tsqlParserRULE_next_value_for                       = 134
	tsqlParserRULE_next_value_for_function              = 135
	tsqlParserRULE_ranking_windowed_function            = 136
	tsqlParserRULE_aggregate_windowed_function          = 137
	tsqlParserRULE_all_distinct                         = 138
	tsqlParserRULE_over_clause                          = 139
	tsqlParserRULE_row_or_range_clause                  = 140
	tsqlParserRULE_window_frame_extent                  = 141
	tsqlParserRULE_window_frame_bound                   = 142
	tsqlParserRULE_window_frame_preceding               = 143
	tsqlParserRULE_window_frame_following               = 144
	tsqlParserRULE_create_database_option               = 145
	tsqlParserRULE_database_filestream_option           = 146
	tsqlParserRULE_database_file_spec                   = 147
	tsqlParserRULE_file_group                           = 148
	tsqlParserRULE_file_spec                            = 149
	tsqlParserRULE_full_table_name                      = 150
	tsqlParserRULE_table_name                           = 151
	tsqlParserRULE_simple_name                          = 152
	tsqlParserRULE_func_proc_name                       = 153
	tsqlParserRULE_ddl_object                           = 154
	tsqlParserRULE_full_column_name                     = 155
	tsqlParserRULE_column_name_list                     = 156
	tsqlParserRULE_cursor_name                          = 157
	tsqlParserRULE_on_off                               = 158
	tsqlParserRULE_clustered                            = 159
	tsqlParserRULE_null_notnull                         = 160
	tsqlParserRULE_scalar_function_name                 = 161
	tsqlParserRULE_data_type                            = 162
	tsqlParserRULE_default_value                        = 163
	tsqlParserRULE_constant                             = 164
	tsqlParserRULE_sign                                 = 165
	tsqlParserRULE_r_id                                 = 166
	tsqlParserRULE_simple_id                            = 167
	tsqlParserRULE_comparison_operator                  = 168
	tsqlParserRULE_assignment_operator                  = 169
	tsqlParserRULE_file_size                            = 170
)

// ITsql_fileContext is an interface to support dynamic dispatch.
type ITsql_fileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTsql_fileContext differentiates from other interfaces.
	IsTsql_fileContext()
}

type Tsql_fileContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTsql_fileContext() *Tsql_fileContext {
	var p = new(Tsql_fileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_tsql_file
	return p
}

func (*Tsql_fileContext) IsTsql_fileContext() {}

func NewTsql_fileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tsql_fileContext {
	var p = new(Tsql_fileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_tsql_file

	return p
}

func (s *Tsql_fileContext) GetParser() antlr.Parser { return s.parser }

func (s *Tsql_fileContext) EOF() antlr.TerminalNode {
	return s.GetToken(tsqlParserEOF, 0)
}

func (s *Tsql_fileContext) AllBatch() []IBatchContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBatchContext)(nil)).Elem())
	var tst = make([]IBatchContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBatchContext)
		}
	}

	return tst
}

func (s *Tsql_fileContext) Batch(i int) IBatchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBatchContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBatchContext)
}

func (s *Tsql_fileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tsql_fileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tsql_fileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTsql_file(s)
	}
}

func (s *Tsql_fileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTsql_file(s)
	}
}

func (p *tsqlParser) Tsql_file() (localctx ITsql_fileContext) {
	localctx = NewTsql_fileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, tsqlParserRULE_tsql_file)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(345)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<tsqlParserALTER)|(1<<tsqlParserBEGIN)|(1<<tsqlParserBREAK)|(1<<tsqlParserCLOSE)|(1<<tsqlParserCOMMIT))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(tsqlParserCONTINUE-34))|(1<<(tsqlParserCREATE-34))|(1<<(tsqlParserDEALLOCATE-34))|(1<<(tsqlParserDECLARE-34))|(1<<(tsqlParserDELETE-34))|(1<<(tsqlParserDROP-34))|(1<<(tsqlParserEXECUTE-34)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(tsqlParserFETCH-67))|(1<<(tsqlParserFORCESEEK-67))|(1<<(tsqlParserGOTO-67))|(1<<(tsqlParserGRANT-67))|(1<<(tsqlParserIF-67))|(1<<(tsqlParserINSERT-67)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(tsqlParserNEXT-105))|(1<<(tsqlParserOPEN-105))|(1<<(tsqlParserPRINT-105))|(1<<(tsqlParserRAISERROR-105)))) != 0) || (((_la-144)&-(0x1f+1)) == 0 && ((1<<uint((_la-144)))&((1<<(tsqlParserRETURN-144))|(1<<(tsqlParserREVERT-144))|(1<<(tsqlParserROLLBACK-144))|(1<<(tsqlParserSAVE-144))|(1<<(tsqlParserSELECT-144))|(1<<(tsqlParserSET-144)))) != 0) || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(tsqlParserUPDATE-181))|(1<<(tsqlParserUSE-181))|(1<<(tsqlParserWAITFOR-181))|(1<<(tsqlParserWHILE-181))|(1<<(tsqlParserWITH-181))|(1<<(tsqlParserABSOLUTE-181))|(1<<(tsqlParserAPPLY-181))|(1<<(tsqlParserAUTO-181)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(tsqlParserAVG-213))|(1<<(tsqlParserBASE64-213))|(1<<(tsqlParserCALLER-213))|(1<<(tsqlParserCAST-213))|(1<<(tsqlParserCATCH-213))|(1<<(tsqlParserCHECKSUM_AGG-213))|(1<<(tsqlParserCOMMITTED-213))|(1<<(tsqlParserCONCAT-213))|(1<<(tsqlParserCONTROL-213))|(1<<(tsqlParserCOOKIE-213))|(1<<(tsqlParserCOUNT-213))|(1<<(tsqlParserCOUNT_BIG-213))|(1<<(tsqlParserDELAY-213)))) != 0) || (((_la-245)&-(0x1f+1)) == 0 && ((1<<uint((_la-245)))&((1<<(tsqlParserDELETED-245))|(1<<(tsqlParserDENSE_RANK-245))|(1<<(tsqlParserDISABLE-245))|(1<<(tsqlParserDYNAMIC-245))|(1<<(tsqlParserENCRYPTION-245))|(1<<(tsqlParserEXPAND-245))|(1<<(tsqlParserFAST-245))|(1<<(tsqlParserFAST_FORWARD-245))|(1<<(tsqlParserFIRST-245))|(1<<(tsqlParserFOLLOWING-245))|(1<<(tsqlParserFORCE-245))|(1<<(tsqlParserFORCED-245))|(1<<(tsqlParserFORWARD_ONLY-245))|(1<<(tsqlParserFULLSCAN-245))|(1<<(tsqlParserGLOBAL-245))|(1<<(tsqlParserGO-245))|(1<<(tsqlParserGROUPING-245))|(1<<(tsqlParserGROUPING_ID-245))|(1<<(tsqlParserHASH-245)))) != 0) || (((_la-277)&-(0x1f+1)) == 0 && ((1<<uint((_la-277)))&((1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-277))|(1<<(tsqlParserIMPERSONATE-277))|(1<<(tsqlParserINSENSITIVE-277))|(1<<(tsqlParserINSERTED-277))|(1<<(tsqlParserISOLATION-277))|(1<<(tsqlParserKEEP-277))|(1<<(tsqlParserKEEPFIXED-277))|(1<<(tsqlParserKEYSET-277))|(1<<(tsqlParserLAST-277))|(1<<(tsqlParserLEVEL-277))|(1<<(tsqlParserLOCAL-277))|(1<<(tsqlParserLOCK_ESCALATION-277))|(1<<(tsqlParserLOGIN-277))|(1<<(tsqlParserLOOP-277))|(1<<(tsqlParserMARK-277))|(1<<(tsqlParserMAX-277))|(1<<(tsqlParserMAXDOP-277))|(1<<(tsqlParserMAXRECURSION-277))|(1<<(tsqlParserMIN-277))|(1<<(tsqlParserMODIFY-277))|(1<<(tsqlParserNAME-277)))) != 0) || (((_la-310)&-(0x1f+1)) == 0 && ((1<<uint((_la-310)))&((1<<(tsqlParserNOCOUNT-310))|(1<<(tsqlParserNOEXPAND-310))|(1<<(tsqlParserNORECOMPUTE-310))|(1<<(tsqlParserNTILE-310))|(1<<(tsqlParserNUMBER-310))|(1<<(tsqlParserOFFSET-310))|(1<<(tsqlParserONLINE-310))|(1<<(tsqlParserONLY-310))|(1<<(tsqlParserOPTIMISTIC-310))|(1<<(tsqlParserOPTIMIZE-310))|(1<<(tsqlParserOUT-310))|(1<<(tsqlParserOUTPUT-310))|(1<<(tsqlParserOWNER-310))|(1<<(tsqlParserPARAMETERIZATION-310))|(1<<(tsqlParserPARTITION-310))|(1<<(tsqlParserPATH-310))|(1<<(tsqlParserPRECEDING-310))|(1<<(tsqlParserPRIOR-310))|(1<<(tsqlParserPRIVILEGES-310))|(1<<(tsqlParserRANGE-310))|(1<<(tsqlParserRANK-310))|(1<<(tsqlParserREADONLY-310))|(1<<(tsqlParserREAD_ONLY-310))|(1<<(tsqlParserRECOMPILE-310)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(tsqlParserRELATIVE-344))|(1<<(tsqlParserREMOTE-344))|(1<<(tsqlParserREPEATABLE-344))|(1<<(tsqlParserROBUST-344))|(1<<(tsqlParserROOT-344))|(1<<(tsqlParserROW-344))|(1<<(tsqlParserROWGUID-344))|(1<<(tsqlParserROWS-344))|(1<<(tsqlParserROW_NUMBER-344))|(1<<(tsqlParserSAMPLE-344))|(1<<(tsqlParserSCHEMABINDING-344))|(1<<(tsqlParserSCROLL-344))|(1<<(tsqlParserSCROLL_LOCKS-344))|(1<<(tsqlParserSELF-344))|(1<<(tsqlParserSERIALIZABLE-344))|(1<<(tsqlParserSIMPLE-344))|(1<<(tsqlParserSIZE-344))|(1<<(tsqlParserSNAPSHOT-344))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-344))|(1<<(tsqlParserSTATIC-344))|(1<<(tsqlParserSTATS_STREAM-344))|(1<<(tsqlParserSTDEV-344))|(1<<(tsqlParserSTDEVP-344))|(1<<(tsqlParserSUM-344))|(1<<(tsqlParserTEXTIMAGE_ON-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(tsqlParserTHROW-376))|(1<<(tsqlParserTIES-376))|(1<<(tsqlParserTIME-376))|(1<<(tsqlParserTRY-376))|(1<<(tsqlParserTYPE-376))|(1<<(tsqlParserTYPE_WARNING-376))|(1<<(tsqlParserUNBOUNDED-376))|(1<<(tsqlParserUNCOMMITTED-376))|(1<<(tsqlParserUNKNOWN-376))|(1<<(tsqlParserUSING-376))|(1<<(tsqlParserVAR-376))|(1<<(tsqlParserVARP-376))|(1<<(tsqlParserVIEWS-376))|(1<<(tsqlParserVIEW_METADATA-376))|(1<<(tsqlParserWORK-376))|(1<<(tsqlParserXML-376))|(1<<(tsqlParserXMLNAMESPACES-376))|(1<<(tsqlParserDOUBLE_QUOTE_ID-376))|(1<<(tsqlParserSQUARE_BRACKET_ID-376))|(1<<(tsqlParserID-376)))) != 0) || _la == tsqlParserLR_BRACKET {
		{
			p.SetState(342)
			p.Batch()
		}

		p.SetState(347)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(348)
		p.Match(tsqlParserEOF)
	}

	return localctx
}

// IBatchContext is an interface to support dynamic dispatch.
type IBatchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBatchContext differentiates from other interfaces.
	IsBatchContext()
}

type BatchContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBatchContext() *BatchContext {
	var p = new(BatchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_batch
	return p
}

func (*BatchContext) IsBatchContext() {}

func NewBatchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BatchContext {
	var p = new(BatchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_batch

	return p
}

func (s *BatchContext) GetParser() antlr.Parser { return s.parser }

func (s *BatchContext) Sql_clauses() ISql_clausesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_clausesContext)
}

func (s *BatchContext) Go_statement() IGo_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGo_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGo_statementContext)
}

func (s *BatchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BatchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BatchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBatch(s)
	}
}

func (s *BatchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBatch(s)
	}
}

func (p *tsqlParser) Batch() (localctx IBatchContext) {
	localctx = NewBatchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, tsqlParserRULE_batch)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(350)
		p.Sql_clauses()
	}
	p.SetState(352)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(351)
			p.Go_statement()
		}

	}

	return localctx
}

// ISql_clausesContext is an interface to support dynamic dispatch.
type ISql_clausesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_clausesContext differentiates from other interfaces.
	IsSql_clausesContext()
}

type Sql_clausesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_clausesContext() *Sql_clausesContext {
	var p = new(Sql_clausesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_sql_clauses
	return p
}

func (*Sql_clausesContext) IsSql_clausesContext() {}

func NewSql_clausesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_clausesContext {
	var p = new(Sql_clausesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_sql_clauses

	return p
}

func (s *Sql_clausesContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_clausesContext) AllSql_clause() []ISql_clauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem())
	var tst = make([]ISql_clauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_clauseContext)
		}
	}

	return tst
}

func (s *Sql_clausesContext) Sql_clause(i int) ISql_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_clauseContext)
}

func (s *Sql_clausesContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserSEMI)
}

func (s *Sql_clausesContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserSEMI, i)
}

func (s *Sql_clausesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_clausesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_clausesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSql_clauses(s)
	}
}

func (s *Sql_clausesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSql_clauses(s)
	}
}

func (p *tsqlParser) Sql_clauses() (localctx ISql_clausesContext) {
	localctx = NewSql_clausesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, tsqlParserRULE_sql_clauses)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(358)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(354)
				p.Sql_clause()
			}
			p.SetState(356)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(355)
					p.Match(tsqlParserSEMI)
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(360)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())
	}

	return localctx
}

// ISql_clauseContext is an interface to support dynamic dispatch.
type ISql_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_clauseContext differentiates from other interfaces.
	IsSql_clauseContext()
}

type Sql_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_clauseContext() *Sql_clauseContext {
	var p = new(Sql_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_sql_clause
	return p
}

func (*Sql_clauseContext) IsSql_clauseContext() {}

func NewSql_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_clauseContext {
	var p = new(Sql_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_sql_clause

	return p
}

func (s *Sql_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_clauseContext) Dml_clause() IDml_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDml_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDml_clauseContext)
}

func (s *Sql_clauseContext) Ddl_clause() IDdl_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdl_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdl_clauseContext)
}

func (s *Sql_clauseContext) Cfl_statement() ICfl_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfl_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICfl_statementContext)
}

func (s *Sql_clauseContext) Another_statement() IAnother_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnother_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnother_statementContext)
}

func (s *Sql_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSql_clause(s)
	}
}

func (s *Sql_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSql_clause(s)
	}
}

func (p *tsqlParser) Sql_clause() (localctx ISql_clauseContext) {
	localctx = NewSql_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, tsqlParserRULE_sql_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(366)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(362)
			p.Dml_clause()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(363)
			p.Ddl_clause()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(364)
			p.Cfl_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(365)
			p.Another_statement()
		}

	}

	return localctx
}

// IDml_clauseContext is an interface to support dynamic dispatch.
type IDml_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDml_clauseContext differentiates from other interfaces.
	IsDml_clauseContext()
}

type Dml_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDml_clauseContext() *Dml_clauseContext {
	var p = new(Dml_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_dml_clause
	return p
}

func (*Dml_clauseContext) IsDml_clauseContext() {}

func NewDml_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dml_clauseContext {
	var p = new(Dml_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_dml_clause

	return p
}

func (s *Dml_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Dml_clauseContext) Delete_statement() IDelete_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_statementContext)
}

func (s *Dml_clauseContext) Insert_statement() IInsert_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_statementContext)
}

func (s *Dml_clauseContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Dml_clauseContext) Update_statement() IUpdate_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdate_statementContext)
}

func (s *Dml_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dml_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dml_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDml_clause(s)
	}
}

func (s *Dml_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDml_clause(s)
	}
}

func (p *tsqlParser) Dml_clause() (localctx IDml_clauseContext) {
	localctx = NewDml_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, tsqlParserRULE_dml_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(372)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(368)
			p.Delete_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(369)
			p.Insert_statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(370)
			p.Select_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(371)
			p.Update_statement()
		}

	}

	return localctx
}

// IDdl_clauseContext is an interface to support dynamic dispatch.
type IDdl_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDdl_clauseContext differentiates from other interfaces.
	IsDdl_clauseContext()
}

type Ddl_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDdl_clauseContext() *Ddl_clauseContext {
	var p = new(Ddl_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_ddl_clause
	return p
}

func (*Ddl_clauseContext) IsDdl_clauseContext() {}

func NewDdl_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ddl_clauseContext {
	var p = new(Ddl_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_ddl_clause

	return p
}

func (s *Ddl_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Ddl_clauseContext) Create_database() ICreate_databaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_databaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_databaseContext)
}

func (s *Ddl_clauseContext) Create_index() ICreate_indexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_indexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_indexContext)
}

func (s *Ddl_clauseContext) Create_procedure() ICreate_procedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_procedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_procedureContext)
}

func (s *Ddl_clauseContext) Create_statistics() ICreate_statisticsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_statisticsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_statisticsContext)
}

func (s *Ddl_clauseContext) Create_table() ICreate_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_tableContext)
}

func (s *Ddl_clauseContext) Create_type() ICreate_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_typeContext)
}

func (s *Ddl_clauseContext) Create_view() ICreate_viewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_viewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_viewContext)
}

func (s *Ddl_clauseContext) Alter_table() IAlter_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_tableContext)
}

func (s *Ddl_clauseContext) Alter_database() IAlter_databaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_databaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_databaseContext)
}

func (s *Ddl_clauseContext) Drop_index() IDrop_indexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_indexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_indexContext)
}

func (s *Ddl_clauseContext) Drop_procedure() IDrop_procedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_procedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_procedureContext)
}

func (s *Ddl_clauseContext) Drop_statistics() IDrop_statisticsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_statisticsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_statisticsContext)
}

func (s *Ddl_clauseContext) Drop_table() IDrop_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_tableContext)
}

func (s *Ddl_clauseContext) Drop_type() IDrop_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_typeContext)
}

func (s *Ddl_clauseContext) Drop_view() IDrop_viewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_viewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_viewContext)
}

func (s *Ddl_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ddl_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ddl_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDdl_clause(s)
	}
}

func (s *Ddl_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDdl_clause(s)
	}
}

func (p *tsqlParser) Ddl_clause() (localctx IDdl_clauseContext) {
	localctx = NewDdl_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, tsqlParserRULE_ddl_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(389)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(374)
			p.Create_database()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(375)
			p.Create_index()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(376)
			p.Create_procedure()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(377)
			p.Create_statistics()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(378)
			p.Create_table()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(379)
			p.Create_type()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(380)
			p.Create_view()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(381)
			p.Alter_table()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(382)
			p.Alter_database()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(383)
			p.Drop_index()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(384)
			p.Drop_procedure()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(385)
			p.Drop_statistics()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(386)
			p.Drop_table()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(387)
			p.Drop_type()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(388)
			p.Drop_view()
		}

	}

	return localctx
}

// ICfl_statementContext is an interface to support dynamic dispatch.
type ICfl_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCfl_statementContext differentiates from other interfaces.
	IsCfl_statementContext()
}

type Cfl_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCfl_statementContext() *Cfl_statementContext {
	var p = new(Cfl_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_cfl_statement
	return p
}

func (*Cfl_statementContext) IsCfl_statementContext() {}

func NewCfl_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cfl_statementContext {
	var p = new(Cfl_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_cfl_statement

	return p
}

func (s *Cfl_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Cfl_statementContext) CopyFrom(ctx *Cfl_statementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Cfl_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cfl_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Waitfor_statementContext struct {
	*Cfl_statementContext
}

func NewWaitfor_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Waitfor_statementContext {
	var p = new(Waitfor_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Waitfor_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Waitfor_statementContext) WAITFOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserWAITFOR, 0)
}

func (s *Waitfor_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Waitfor_statementContext) DELAY() antlr.TerminalNode {
	return s.GetToken(tsqlParserDELAY, 0)
}

func (s *Waitfor_statementContext) TIME() antlr.TerminalNode {
	return s.GetToken(tsqlParserTIME, 0)
}

func (s *Waitfor_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWaitfor_statement(s)
	}
}

func (s *Waitfor_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWaitfor_statement(s)
	}
}

type Print_statementContext struct {
	*Cfl_statementContext
}

func NewPrint_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Print_statementContext {
	var p = new(Print_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Print_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Print_statementContext) PRINT() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRINT, 0)
}

func (s *Print_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Print_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterPrint_statement(s)
	}
}

func (s *Print_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitPrint_statement(s)
	}
}

type Continue_statementContext struct {
	*Cfl_statementContext
}

func NewContinue_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Continue_statementContext {
	var p = new(Continue_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Continue_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Continue_statementContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONTINUE, 0)
}

func (s *Continue_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterContinue_statement(s)
	}
}

func (s *Continue_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitContinue_statement(s)
	}
}

type If_statementContext struct {
	*Cfl_statementContext
	if_expr   ISql_clauseContext
	else_expr ISql_clauseContext
}

func NewIf_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *If_statementContext {
	var p = new(If_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *If_statementContext) GetIf_expr() ISql_clauseContext { return s.if_expr }

func (s *If_statementContext) GetElse_expr() ISql_clauseContext { return s.else_expr }

func (s *If_statementContext) SetIf_expr(v ISql_clauseContext) { s.if_expr = v }

func (s *If_statementContext) SetElse_expr(v ISql_clauseContext) { s.else_expr = v }

func (s *If_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(tsqlParserIF, 0)
}

func (s *If_statementContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *If_statementContext) AllSql_clause() []ISql_clauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem())
	var tst = make([]ISql_clauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_clauseContext)
		}
	}

	return tst
}

func (s *If_statementContext) Sql_clause(i int) ISql_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_clauseContext)
}

func (s *If_statementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(tsqlParserELSE, 0)
}

func (s *If_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterIf_statement(s)
	}
}

func (s *If_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitIf_statement(s)
	}
}

type Raiseerror_statementContext struct {
	*Cfl_statementContext
	msg      antlr.Token
	severity IConstant_LOCAL_IDContext
	state    IConstant_LOCAL_IDContext
}

func NewRaiseerror_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Raiseerror_statementContext {
	var p = new(Raiseerror_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Raiseerror_statementContext) GetMsg() antlr.Token { return s.msg }

func (s *Raiseerror_statementContext) SetMsg(v antlr.Token) { s.msg = v }

func (s *Raiseerror_statementContext) GetSeverity() IConstant_LOCAL_IDContext { return s.severity }

func (s *Raiseerror_statementContext) GetState() IConstant_LOCAL_IDContext { return s.state }

func (s *Raiseerror_statementContext) SetSeverity(v IConstant_LOCAL_IDContext) { s.severity = v }

func (s *Raiseerror_statementContext) SetState(v IConstant_LOCAL_IDContext) { s.state = v }

func (s *Raiseerror_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raiseerror_statementContext) RAISERROR() antlr.TerminalNode {
	return s.GetToken(tsqlParserRAISERROR, 0)
}

func (s *Raiseerror_statementContext) AllConstant_LOCAL_ID() []IConstant_LOCAL_IDContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstant_LOCAL_IDContext)(nil)).Elem())
	var tst = make([]IConstant_LOCAL_IDContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstant_LOCAL_IDContext)
		}
	}

	return tst
}

func (s *Raiseerror_statementContext) Constant_LOCAL_ID(i int) IConstant_LOCAL_IDContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_LOCAL_IDContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstant_LOCAL_IDContext)
}

func (s *Raiseerror_statementContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Raiseerror_statementContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Raiseerror_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Raiseerror_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterRaiseerror_statement(s)
	}
}

func (s *Raiseerror_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitRaiseerror_statement(s)
	}
}

type Throw_statementContext struct {
	*Cfl_statementContext
	error_number antlr.Token
	message      antlr.Token
	state        antlr.Token
}

func NewThrow_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Throw_statementContext {
	var p = new(Throw_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Throw_statementContext) GetError_number() antlr.Token { return s.error_number }

func (s *Throw_statementContext) GetMessage() antlr.Token { return s.message }

func (s *Throw_statementContext) GetState() antlr.Token { return s.state }

func (s *Throw_statementContext) SetError_number(v antlr.Token) { s.error_number = v }

func (s *Throw_statementContext) SetMessage(v antlr.Token) { s.message = v }

func (s *Throw_statementContext) SetState(v antlr.Token) { s.state = v }

func (s *Throw_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Throw_statementContext) THROW() antlr.TerminalNode {
	return s.GetToken(tsqlParserTHROW, 0)
}

func (s *Throw_statementContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserDECIMAL)
}

func (s *Throw_statementContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, i)
}

func (s *Throw_statementContext) AllLOCAL_ID() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserLOCAL_ID)
}

func (s *Throw_statementContext) LOCAL_ID(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, i)
}

func (s *Throw_statementContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Throw_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterThrow_statement(s)
	}
}

func (s *Throw_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitThrow_statement(s)
	}
}

type Try_catch_statementContext struct {
	*Cfl_statementContext
	try_clauses   ISql_clausesContext
	catch_clauses ISql_clausesContext
}

func NewTry_catch_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Try_catch_statementContext {
	var p = new(Try_catch_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Try_catch_statementContext) GetTry_clauses() ISql_clausesContext { return s.try_clauses }

func (s *Try_catch_statementContext) GetCatch_clauses() ISql_clausesContext { return s.catch_clauses }

func (s *Try_catch_statementContext) SetTry_clauses(v ISql_clausesContext) { s.try_clauses = v }

func (s *Try_catch_statementContext) SetCatch_clauses(v ISql_clausesContext) { s.catch_clauses = v }

func (s *Try_catch_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Try_catch_statementContext) AllBEGIN() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserBEGIN)
}

func (s *Try_catch_statementContext) BEGIN(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserBEGIN, i)
}

func (s *Try_catch_statementContext) AllTRY() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserTRY)
}

func (s *Try_catch_statementContext) TRY(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserTRY, i)
}

func (s *Try_catch_statementContext) AllEND() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserEND)
}

func (s *Try_catch_statementContext) END(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserEND, i)
}

func (s *Try_catch_statementContext) AllCATCH() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserCATCH)
}

func (s *Try_catch_statementContext) CATCH(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserCATCH, i)
}

func (s *Try_catch_statementContext) AllSql_clauses() []ISql_clausesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem())
	var tst = make([]ISql_clausesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_clausesContext)
		}
	}

	return tst
}

func (s *Try_catch_statementContext) Sql_clauses(i int) ISql_clausesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_clausesContext)
}

func (s *Try_catch_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTry_catch_statement(s)
	}
}

func (s *Try_catch_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTry_catch_statement(s)
	}
}

type While_statementContext struct {
	*Cfl_statementContext
}

func NewWhile_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *While_statementContext {
	var p = new(While_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *While_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *While_statementContext) WHILE() antlr.TerminalNode {
	return s.GetToken(tsqlParserWHILE, 0)
}

func (s *While_statementContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *While_statementContext) Sql_clause() ISql_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_clauseContext)
}

func (s *While_statementContext) BREAK() antlr.TerminalNode {
	return s.GetToken(tsqlParserBREAK, 0)
}

func (s *While_statementContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONTINUE, 0)
}

func (s *While_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWhile_statement(s)
	}
}

func (s *While_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWhile_statement(s)
	}
}

type Block_statementContext struct {
	*Cfl_statementContext
}

func NewBlock_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Block_statementContext {
	var p = new(Block_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Block_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Block_statementContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserBEGIN, 0)
}

func (s *Block_statementContext) END() antlr.TerminalNode {
	return s.GetToken(tsqlParserEND, 0)
}

func (s *Block_statementContext) Sql_clauses() ISql_clausesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_clausesContext)
}

func (s *Block_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBlock_statement(s)
	}
}

func (s *Block_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBlock_statement(s)
	}
}

type Break_statementContext struct {
	*Cfl_statementContext
}

func NewBreak_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Break_statementContext {
	var p = new(Break_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Break_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Break_statementContext) BREAK() antlr.TerminalNode {
	return s.GetToken(tsqlParserBREAK, 0)
}

func (s *Break_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBreak_statement(s)
	}
}

func (s *Break_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBreak_statement(s)
	}
}

type Goto_statementContext struct {
	*Cfl_statementContext
}

func NewGoto_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Goto_statementContext {
	var p = new(Goto_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Goto_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Goto_statementContext) GOTO() antlr.TerminalNode {
	return s.GetToken(tsqlParserGOTO, 0)
}

func (s *Goto_statementContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Goto_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterGoto_statement(s)
	}
}

func (s *Goto_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitGoto_statement(s)
	}
}

type Return_statementContext struct {
	*Cfl_statementContext
}

func NewReturn_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Return_statementContext {
	var p = new(Return_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Return_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Return_statementContext) RETURN() antlr.TerminalNode {
	return s.GetToken(tsqlParserRETURN, 0)
}

func (s *Return_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Return_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterReturn_statement(s)
	}
}

func (s *Return_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitReturn_statement(s)
	}
}

func (p *tsqlParser) Cfl_statement() (localctx ICfl_statementContext) {
	localctx = NewCfl_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, tsqlParserRULE_cfl_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(516)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) {
	case 1:
		localctx = NewBlock_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(391)
			p.Match(tsqlParserBEGIN)
		}
		p.SetState(393)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserSEMI {
			{
				p.SetState(392)
				p.Match(tsqlParserSEMI)
			}

		}
		p.SetState(396)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<tsqlParserALTER)|(1<<tsqlParserBEGIN)|(1<<tsqlParserBREAK)|(1<<tsqlParserCLOSE)|(1<<tsqlParserCOMMIT))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(tsqlParserCONTINUE-34))|(1<<(tsqlParserCREATE-34))|(1<<(tsqlParserDEALLOCATE-34))|(1<<(tsqlParserDECLARE-34))|(1<<(tsqlParserDELETE-34))|(1<<(tsqlParserDROP-34))|(1<<(tsqlParserEXECUTE-34)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(tsqlParserFETCH-67))|(1<<(tsqlParserFORCESEEK-67))|(1<<(tsqlParserGOTO-67))|(1<<(tsqlParserGRANT-67))|(1<<(tsqlParserIF-67))|(1<<(tsqlParserINSERT-67)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(tsqlParserNEXT-105))|(1<<(tsqlParserOPEN-105))|(1<<(tsqlParserPRINT-105))|(1<<(tsqlParserRAISERROR-105)))) != 0) || (((_la-144)&-(0x1f+1)) == 0 && ((1<<uint((_la-144)))&((1<<(tsqlParserRETURN-144))|(1<<(tsqlParserREVERT-144))|(1<<(tsqlParserROLLBACK-144))|(1<<(tsqlParserSAVE-144))|(1<<(tsqlParserSELECT-144))|(1<<(tsqlParserSET-144)))) != 0) || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(tsqlParserUPDATE-181))|(1<<(tsqlParserUSE-181))|(1<<(tsqlParserWAITFOR-181))|(1<<(tsqlParserWHILE-181))|(1<<(tsqlParserWITH-181))|(1<<(tsqlParserABSOLUTE-181))|(1<<(tsqlParserAPPLY-181))|(1<<(tsqlParserAUTO-181)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(tsqlParserAVG-213))|(1<<(tsqlParserBASE64-213))|(1<<(tsqlParserCALLER-213))|(1<<(tsqlParserCAST-213))|(1<<(tsqlParserCATCH-213))|(1<<(tsqlParserCHECKSUM_AGG-213))|(1<<(tsqlParserCOMMITTED-213))|(1<<(tsqlParserCONCAT-213))|(1<<(tsqlParserCONTROL-213))|(1<<(tsqlParserCOOKIE-213))|(1<<(tsqlParserCOUNT-213))|(1<<(tsqlParserCOUNT_BIG-213))|(1<<(tsqlParserDELAY-213)))) != 0) || (((_la-245)&-(0x1f+1)) == 0 && ((1<<uint((_la-245)))&((1<<(tsqlParserDELETED-245))|(1<<(tsqlParserDENSE_RANK-245))|(1<<(tsqlParserDISABLE-245))|(1<<(tsqlParserDYNAMIC-245))|(1<<(tsqlParserENCRYPTION-245))|(1<<(tsqlParserEXPAND-245))|(1<<(tsqlParserFAST-245))|(1<<(tsqlParserFAST_FORWARD-245))|(1<<(tsqlParserFIRST-245))|(1<<(tsqlParserFOLLOWING-245))|(1<<(tsqlParserFORCE-245))|(1<<(tsqlParserFORCED-245))|(1<<(tsqlParserFORWARD_ONLY-245))|(1<<(tsqlParserFULLSCAN-245))|(1<<(tsqlParserGLOBAL-245))|(1<<(tsqlParserGO-245))|(1<<(tsqlParserGROUPING-245))|(1<<(tsqlParserGROUPING_ID-245))|(1<<(tsqlParserHASH-245)))) != 0) || (((_la-277)&-(0x1f+1)) == 0 && ((1<<uint((_la-277)))&((1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-277))|(1<<(tsqlParserIMPERSONATE-277))|(1<<(tsqlParserINSENSITIVE-277))|(1<<(tsqlParserINSERTED-277))|(1<<(tsqlParserISOLATION-277))|(1<<(tsqlParserKEEP-277))|(1<<(tsqlParserKEEPFIXED-277))|(1<<(tsqlParserKEYSET-277))|(1<<(tsqlParserLAST-277))|(1<<(tsqlParserLEVEL-277))|(1<<(tsqlParserLOCAL-277))|(1<<(tsqlParserLOCK_ESCALATION-277))|(1<<(tsqlParserLOGIN-277))|(1<<(tsqlParserLOOP-277))|(1<<(tsqlParserMARK-277))|(1<<(tsqlParserMAX-277))|(1<<(tsqlParserMAXDOP-277))|(1<<(tsqlParserMAXRECURSION-277))|(1<<(tsqlParserMIN-277))|(1<<(tsqlParserMODIFY-277))|(1<<(tsqlParserNAME-277)))) != 0) || (((_la-310)&-(0x1f+1)) == 0 && ((1<<uint((_la-310)))&((1<<(tsqlParserNOCOUNT-310))|(1<<(tsqlParserNOEXPAND-310))|(1<<(tsqlParserNORECOMPUTE-310))|(1<<(tsqlParserNTILE-310))|(1<<(tsqlParserNUMBER-310))|(1<<(tsqlParserOFFSET-310))|(1<<(tsqlParserONLINE-310))|(1<<(tsqlParserONLY-310))|(1<<(tsqlParserOPTIMISTIC-310))|(1<<(tsqlParserOPTIMIZE-310))|(1<<(tsqlParserOUT-310))|(1<<(tsqlParserOUTPUT-310))|(1<<(tsqlParserOWNER-310))|(1<<(tsqlParserPARAMETERIZATION-310))|(1<<(tsqlParserPARTITION-310))|(1<<(tsqlParserPATH-310))|(1<<(tsqlParserPRECEDING-310))|(1<<(tsqlParserPRIOR-310))|(1<<(tsqlParserPRIVILEGES-310))|(1<<(tsqlParserRANGE-310))|(1<<(tsqlParserRANK-310))|(1<<(tsqlParserREADONLY-310))|(1<<(tsqlParserREAD_ONLY-310))|(1<<(tsqlParserRECOMPILE-310)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(tsqlParserRELATIVE-344))|(1<<(tsqlParserREMOTE-344))|(1<<(tsqlParserREPEATABLE-344))|(1<<(tsqlParserROBUST-344))|(1<<(tsqlParserROOT-344))|(1<<(tsqlParserROW-344))|(1<<(tsqlParserROWGUID-344))|(1<<(tsqlParserROWS-344))|(1<<(tsqlParserROW_NUMBER-344))|(1<<(tsqlParserSAMPLE-344))|(1<<(tsqlParserSCHEMABINDING-344))|(1<<(tsqlParserSCROLL-344))|(1<<(tsqlParserSCROLL_LOCKS-344))|(1<<(tsqlParserSELF-344))|(1<<(tsqlParserSERIALIZABLE-344))|(1<<(tsqlParserSIMPLE-344))|(1<<(tsqlParserSIZE-344))|(1<<(tsqlParserSNAPSHOT-344))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-344))|(1<<(tsqlParserSTATIC-344))|(1<<(tsqlParserSTATS_STREAM-344))|(1<<(tsqlParserSTDEV-344))|(1<<(tsqlParserSTDEVP-344))|(1<<(tsqlParserSUM-344))|(1<<(tsqlParserTEXTIMAGE_ON-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(tsqlParserTHROW-376))|(1<<(tsqlParserTIES-376))|(1<<(tsqlParserTIME-376))|(1<<(tsqlParserTRY-376))|(1<<(tsqlParserTYPE-376))|(1<<(tsqlParserTYPE_WARNING-376))|(1<<(tsqlParserUNBOUNDED-376))|(1<<(tsqlParserUNCOMMITTED-376))|(1<<(tsqlParserUNKNOWN-376))|(1<<(tsqlParserUSING-376))|(1<<(tsqlParserVAR-376))|(1<<(tsqlParserVARP-376))|(1<<(tsqlParserVIEWS-376))|(1<<(tsqlParserVIEW_METADATA-376))|(1<<(tsqlParserWORK-376))|(1<<(tsqlParserXML-376))|(1<<(tsqlParserXMLNAMESPACES-376))|(1<<(tsqlParserDOUBLE_QUOTE_ID-376))|(1<<(tsqlParserSQUARE_BRACKET_ID-376))|(1<<(tsqlParserID-376)))) != 0) || _la == tsqlParserLR_BRACKET {
			{
				p.SetState(395)
				p.Sql_clauses()
			}

		}
		{
			p.SetState(398)
			p.Match(tsqlParserEND)
		}
		p.SetState(400)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(399)
				p.Match(tsqlParserSEMI)
			}

		}

	case 2:
		localctx = NewBreak_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(402)
			p.Match(tsqlParserBREAK)
		}
		p.SetState(404)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(403)
				p.Match(tsqlParserSEMI)
			}

		}

	case 3:
		localctx = NewContinue_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(406)
			p.Match(tsqlParserCONTINUE)
		}
		p.SetState(408)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(407)
				p.Match(tsqlParserSEMI)
			}

		}

	case 4:
		localctx = NewGoto_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(410)
			p.Match(tsqlParserGOTO)
		}
		{
			p.SetState(411)
			p.R_id()
		}
		p.SetState(413)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(412)
				p.Match(tsqlParserSEMI)
			}

		}

	case 5:
		localctx = NewGoto_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(415)
			p.R_id()
		}
		{
			p.SetState(416)
			p.Match(tsqlParserCOLON)
		}
		p.SetState(418)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(417)
				p.Match(tsqlParserSEMI)
			}

		}

	case 6:
		localctx = NewIf_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(420)
			p.Match(tsqlParserIF)
		}
		{
			p.SetState(421)
			p.search_condition(0)
		}
		{
			p.SetState(422)

			var _x = p.Sql_clause()

			localctx.(*If_statementContext).if_expr = _x
		}
		p.SetState(425)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(423)
				p.Match(tsqlParserELSE)
			}
			{
				p.SetState(424)

				var _x = p.Sql_clause()

				localctx.(*If_statementContext).else_expr = _x
			}

		}
		p.SetState(428)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(427)
				p.Match(tsqlParserSEMI)
			}

		}

	case 7:
		localctx = NewReturn_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(430)
			p.Match(tsqlParserRETURN)
		}
		p.SetState(432)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(431)
				p.expression(0)
			}

		}
		p.SetState(435)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(434)
				p.Match(tsqlParserSEMI)
			}

		}

	case 8:
		localctx = NewThrow_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(437)
			p.Match(tsqlParserTHROW)
		}
		p.SetState(443)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserLOCAL_ID || _la == tsqlParserDECIMAL {
			{
				p.SetState(438)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*Throw_statementContext).error_number = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == tsqlParserLOCAL_ID || _la == tsqlParserDECIMAL) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*Throw_statementContext).error_number = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(439)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(440)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*Throw_statementContext).message = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == tsqlParserLOCAL_ID || _la == tsqlParserSTRING) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*Throw_statementContext).message = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(441)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(442)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*Throw_statementContext).state = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == tsqlParserLOCAL_ID || _la == tsqlParserDECIMAL) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*Throw_statementContext).state = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(446)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(445)
				p.Match(tsqlParserSEMI)
			}

		}

	case 9:
		localctx = NewTry_catch_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(448)
			p.Match(tsqlParserBEGIN)
		}
		{
			p.SetState(449)
			p.Match(tsqlParserTRY)
		}
		p.SetState(451)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserSEMI {
			{
				p.SetState(450)
				p.Match(tsqlParserSEMI)
			}

		}
		p.SetState(454)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<tsqlParserALTER)|(1<<tsqlParserBEGIN)|(1<<tsqlParserBREAK)|(1<<tsqlParserCLOSE)|(1<<tsqlParserCOMMIT))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(tsqlParserCONTINUE-34))|(1<<(tsqlParserCREATE-34))|(1<<(tsqlParserDEALLOCATE-34))|(1<<(tsqlParserDECLARE-34))|(1<<(tsqlParserDELETE-34))|(1<<(tsqlParserDROP-34))|(1<<(tsqlParserEXECUTE-34)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(tsqlParserFETCH-67))|(1<<(tsqlParserFORCESEEK-67))|(1<<(tsqlParserGOTO-67))|(1<<(tsqlParserGRANT-67))|(1<<(tsqlParserIF-67))|(1<<(tsqlParserINSERT-67)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(tsqlParserNEXT-105))|(1<<(tsqlParserOPEN-105))|(1<<(tsqlParserPRINT-105))|(1<<(tsqlParserRAISERROR-105)))) != 0) || (((_la-144)&-(0x1f+1)) == 0 && ((1<<uint((_la-144)))&((1<<(tsqlParserRETURN-144))|(1<<(tsqlParserREVERT-144))|(1<<(tsqlParserROLLBACK-144))|(1<<(tsqlParserSAVE-144))|(1<<(tsqlParserSELECT-144))|(1<<(tsqlParserSET-144)))) != 0) || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(tsqlParserUPDATE-181))|(1<<(tsqlParserUSE-181))|(1<<(tsqlParserWAITFOR-181))|(1<<(tsqlParserWHILE-181))|(1<<(tsqlParserWITH-181))|(1<<(tsqlParserABSOLUTE-181))|(1<<(tsqlParserAPPLY-181))|(1<<(tsqlParserAUTO-181)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(tsqlParserAVG-213))|(1<<(tsqlParserBASE64-213))|(1<<(tsqlParserCALLER-213))|(1<<(tsqlParserCAST-213))|(1<<(tsqlParserCATCH-213))|(1<<(tsqlParserCHECKSUM_AGG-213))|(1<<(tsqlParserCOMMITTED-213))|(1<<(tsqlParserCONCAT-213))|(1<<(tsqlParserCONTROL-213))|(1<<(tsqlParserCOOKIE-213))|(1<<(tsqlParserCOUNT-213))|(1<<(tsqlParserCOUNT_BIG-213))|(1<<(tsqlParserDELAY-213)))) != 0) || (((_la-245)&-(0x1f+1)) == 0 && ((1<<uint((_la-245)))&((1<<(tsqlParserDELETED-245))|(1<<(tsqlParserDENSE_RANK-245))|(1<<(tsqlParserDISABLE-245))|(1<<(tsqlParserDYNAMIC-245))|(1<<(tsqlParserENCRYPTION-245))|(1<<(tsqlParserEXPAND-245))|(1<<(tsqlParserFAST-245))|(1<<(tsqlParserFAST_FORWARD-245))|(1<<(tsqlParserFIRST-245))|(1<<(tsqlParserFOLLOWING-245))|(1<<(tsqlParserFORCE-245))|(1<<(tsqlParserFORCED-245))|(1<<(tsqlParserFORWARD_ONLY-245))|(1<<(tsqlParserFULLSCAN-245))|(1<<(tsqlParserGLOBAL-245))|(1<<(tsqlParserGO-245))|(1<<(tsqlParserGROUPING-245))|(1<<(tsqlParserGROUPING_ID-245))|(1<<(tsqlParserHASH-245)))) != 0) || (((_la-277)&-(0x1f+1)) == 0 && ((1<<uint((_la-277)))&((1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-277))|(1<<(tsqlParserIMPERSONATE-277))|(1<<(tsqlParserINSENSITIVE-277))|(1<<(tsqlParserINSERTED-277))|(1<<(tsqlParserISOLATION-277))|(1<<(tsqlParserKEEP-277))|(1<<(tsqlParserKEEPFIXED-277))|(1<<(tsqlParserKEYSET-277))|(1<<(tsqlParserLAST-277))|(1<<(tsqlParserLEVEL-277))|(1<<(tsqlParserLOCAL-277))|(1<<(tsqlParserLOCK_ESCALATION-277))|(1<<(tsqlParserLOGIN-277))|(1<<(tsqlParserLOOP-277))|(1<<(tsqlParserMARK-277))|(1<<(tsqlParserMAX-277))|(1<<(tsqlParserMAXDOP-277))|(1<<(tsqlParserMAXRECURSION-277))|(1<<(tsqlParserMIN-277))|(1<<(tsqlParserMODIFY-277))|(1<<(tsqlParserNAME-277)))) != 0) || (((_la-310)&-(0x1f+1)) == 0 && ((1<<uint((_la-310)))&((1<<(tsqlParserNOCOUNT-310))|(1<<(tsqlParserNOEXPAND-310))|(1<<(tsqlParserNORECOMPUTE-310))|(1<<(tsqlParserNTILE-310))|(1<<(tsqlParserNUMBER-310))|(1<<(tsqlParserOFFSET-310))|(1<<(tsqlParserONLINE-310))|(1<<(tsqlParserONLY-310))|(1<<(tsqlParserOPTIMISTIC-310))|(1<<(tsqlParserOPTIMIZE-310))|(1<<(tsqlParserOUT-310))|(1<<(tsqlParserOUTPUT-310))|(1<<(tsqlParserOWNER-310))|(1<<(tsqlParserPARAMETERIZATION-310))|(1<<(tsqlParserPARTITION-310))|(1<<(tsqlParserPATH-310))|(1<<(tsqlParserPRECEDING-310))|(1<<(tsqlParserPRIOR-310))|(1<<(tsqlParserPRIVILEGES-310))|(1<<(tsqlParserRANGE-310))|(1<<(tsqlParserRANK-310))|(1<<(tsqlParserREADONLY-310))|(1<<(tsqlParserREAD_ONLY-310))|(1<<(tsqlParserRECOMPILE-310)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(tsqlParserRELATIVE-344))|(1<<(tsqlParserREMOTE-344))|(1<<(tsqlParserREPEATABLE-344))|(1<<(tsqlParserROBUST-344))|(1<<(tsqlParserROOT-344))|(1<<(tsqlParserROW-344))|(1<<(tsqlParserROWGUID-344))|(1<<(tsqlParserROWS-344))|(1<<(tsqlParserROW_NUMBER-344))|(1<<(tsqlParserSAMPLE-344))|(1<<(tsqlParserSCHEMABINDING-344))|(1<<(tsqlParserSCROLL-344))|(1<<(tsqlParserSCROLL_LOCKS-344))|(1<<(tsqlParserSELF-344))|(1<<(tsqlParserSERIALIZABLE-344))|(1<<(tsqlParserSIMPLE-344))|(1<<(tsqlParserSIZE-344))|(1<<(tsqlParserSNAPSHOT-344))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-344))|(1<<(tsqlParserSTATIC-344))|(1<<(tsqlParserSTATS_STREAM-344))|(1<<(tsqlParserSTDEV-344))|(1<<(tsqlParserSTDEVP-344))|(1<<(tsqlParserSUM-344))|(1<<(tsqlParserTEXTIMAGE_ON-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(tsqlParserTHROW-376))|(1<<(tsqlParserTIES-376))|(1<<(tsqlParserTIME-376))|(1<<(tsqlParserTRY-376))|(1<<(tsqlParserTYPE-376))|(1<<(tsqlParserTYPE_WARNING-376))|(1<<(tsqlParserUNBOUNDED-376))|(1<<(tsqlParserUNCOMMITTED-376))|(1<<(tsqlParserUNKNOWN-376))|(1<<(tsqlParserUSING-376))|(1<<(tsqlParserVAR-376))|(1<<(tsqlParserVARP-376))|(1<<(tsqlParserVIEWS-376))|(1<<(tsqlParserVIEW_METADATA-376))|(1<<(tsqlParserWORK-376))|(1<<(tsqlParserXML-376))|(1<<(tsqlParserXMLNAMESPACES-376))|(1<<(tsqlParserDOUBLE_QUOTE_ID-376))|(1<<(tsqlParserSQUARE_BRACKET_ID-376))|(1<<(tsqlParserID-376)))) != 0) || _la == tsqlParserLR_BRACKET {
			{
				p.SetState(453)

				var _x = p.Sql_clauses()

				localctx.(*Try_catch_statementContext).try_clauses = _x
			}

		}
		{
			p.SetState(456)
			p.Match(tsqlParserEND)
		}
		{
			p.SetState(457)
			p.Match(tsqlParserTRY)
		}
		p.SetState(459)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserSEMI {
			{
				p.SetState(458)
				p.Match(tsqlParserSEMI)
			}

		}
		{
			p.SetState(461)
			p.Match(tsqlParserBEGIN)
		}
		{
			p.SetState(462)
			p.Match(tsqlParserCATCH)
		}
		p.SetState(464)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserSEMI {
			{
				p.SetState(463)
				p.Match(tsqlParserSEMI)
			}

		}
		p.SetState(467)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<tsqlParserALTER)|(1<<tsqlParserBEGIN)|(1<<tsqlParserBREAK)|(1<<tsqlParserCLOSE)|(1<<tsqlParserCOMMIT))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(tsqlParserCONTINUE-34))|(1<<(tsqlParserCREATE-34))|(1<<(tsqlParserDEALLOCATE-34))|(1<<(tsqlParserDECLARE-34))|(1<<(tsqlParserDELETE-34))|(1<<(tsqlParserDROP-34))|(1<<(tsqlParserEXECUTE-34)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(tsqlParserFETCH-67))|(1<<(tsqlParserFORCESEEK-67))|(1<<(tsqlParserGOTO-67))|(1<<(tsqlParserGRANT-67))|(1<<(tsqlParserIF-67))|(1<<(tsqlParserINSERT-67)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(tsqlParserNEXT-105))|(1<<(tsqlParserOPEN-105))|(1<<(tsqlParserPRINT-105))|(1<<(tsqlParserRAISERROR-105)))) != 0) || (((_la-144)&-(0x1f+1)) == 0 && ((1<<uint((_la-144)))&((1<<(tsqlParserRETURN-144))|(1<<(tsqlParserREVERT-144))|(1<<(tsqlParserROLLBACK-144))|(1<<(tsqlParserSAVE-144))|(1<<(tsqlParserSELECT-144))|(1<<(tsqlParserSET-144)))) != 0) || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(tsqlParserUPDATE-181))|(1<<(tsqlParserUSE-181))|(1<<(tsqlParserWAITFOR-181))|(1<<(tsqlParserWHILE-181))|(1<<(tsqlParserWITH-181))|(1<<(tsqlParserABSOLUTE-181))|(1<<(tsqlParserAPPLY-181))|(1<<(tsqlParserAUTO-181)))) != 0) || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(tsqlParserAVG-213))|(1<<(tsqlParserBASE64-213))|(1<<(tsqlParserCALLER-213))|(1<<(tsqlParserCAST-213))|(1<<(tsqlParserCATCH-213))|(1<<(tsqlParserCHECKSUM_AGG-213))|(1<<(tsqlParserCOMMITTED-213))|(1<<(tsqlParserCONCAT-213))|(1<<(tsqlParserCONTROL-213))|(1<<(tsqlParserCOOKIE-213))|(1<<(tsqlParserCOUNT-213))|(1<<(tsqlParserCOUNT_BIG-213))|(1<<(tsqlParserDELAY-213)))) != 0) || (((_la-245)&-(0x1f+1)) == 0 && ((1<<uint((_la-245)))&((1<<(tsqlParserDELETED-245))|(1<<(tsqlParserDENSE_RANK-245))|(1<<(tsqlParserDISABLE-245))|(1<<(tsqlParserDYNAMIC-245))|(1<<(tsqlParserENCRYPTION-245))|(1<<(tsqlParserEXPAND-245))|(1<<(tsqlParserFAST-245))|(1<<(tsqlParserFAST_FORWARD-245))|(1<<(tsqlParserFIRST-245))|(1<<(tsqlParserFOLLOWING-245))|(1<<(tsqlParserFORCE-245))|(1<<(tsqlParserFORCED-245))|(1<<(tsqlParserFORWARD_ONLY-245))|(1<<(tsqlParserFULLSCAN-245))|(1<<(tsqlParserGLOBAL-245))|(1<<(tsqlParserGO-245))|(1<<(tsqlParserGROUPING-245))|(1<<(tsqlParserGROUPING_ID-245))|(1<<(tsqlParserHASH-245)))) != 0) || (((_la-277)&-(0x1f+1)) == 0 && ((1<<uint((_la-277)))&((1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-277))|(1<<(tsqlParserIMPERSONATE-277))|(1<<(tsqlParserINSENSITIVE-277))|(1<<(tsqlParserINSERTED-277))|(1<<(tsqlParserISOLATION-277))|(1<<(tsqlParserKEEP-277))|(1<<(tsqlParserKEEPFIXED-277))|(1<<(tsqlParserKEYSET-277))|(1<<(tsqlParserLAST-277))|(1<<(tsqlParserLEVEL-277))|(1<<(tsqlParserLOCAL-277))|(1<<(tsqlParserLOCK_ESCALATION-277))|(1<<(tsqlParserLOGIN-277))|(1<<(tsqlParserLOOP-277))|(1<<(tsqlParserMARK-277))|(1<<(tsqlParserMAX-277))|(1<<(tsqlParserMAXDOP-277))|(1<<(tsqlParserMAXRECURSION-277))|(1<<(tsqlParserMIN-277))|(1<<(tsqlParserMODIFY-277))|(1<<(tsqlParserNAME-277)))) != 0) || (((_la-310)&-(0x1f+1)) == 0 && ((1<<uint((_la-310)))&((1<<(tsqlParserNOCOUNT-310))|(1<<(tsqlParserNOEXPAND-310))|(1<<(tsqlParserNORECOMPUTE-310))|(1<<(tsqlParserNTILE-310))|(1<<(tsqlParserNUMBER-310))|(1<<(tsqlParserOFFSET-310))|(1<<(tsqlParserONLINE-310))|(1<<(tsqlParserONLY-310))|(1<<(tsqlParserOPTIMISTIC-310))|(1<<(tsqlParserOPTIMIZE-310))|(1<<(tsqlParserOUT-310))|(1<<(tsqlParserOUTPUT-310))|(1<<(tsqlParserOWNER-310))|(1<<(tsqlParserPARAMETERIZATION-310))|(1<<(tsqlParserPARTITION-310))|(1<<(tsqlParserPATH-310))|(1<<(tsqlParserPRECEDING-310))|(1<<(tsqlParserPRIOR-310))|(1<<(tsqlParserPRIVILEGES-310))|(1<<(tsqlParserRANGE-310))|(1<<(tsqlParserRANK-310))|(1<<(tsqlParserREADONLY-310))|(1<<(tsqlParserREAD_ONLY-310))|(1<<(tsqlParserRECOMPILE-310)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(tsqlParserRELATIVE-344))|(1<<(tsqlParserREMOTE-344))|(1<<(tsqlParserREPEATABLE-344))|(1<<(tsqlParserROBUST-344))|(1<<(tsqlParserROOT-344))|(1<<(tsqlParserROW-344))|(1<<(tsqlParserROWGUID-344))|(1<<(tsqlParserROWS-344))|(1<<(tsqlParserROW_NUMBER-344))|(1<<(tsqlParserSAMPLE-344))|(1<<(tsqlParserSCHEMABINDING-344))|(1<<(tsqlParserSCROLL-344))|(1<<(tsqlParserSCROLL_LOCKS-344))|(1<<(tsqlParserSELF-344))|(1<<(tsqlParserSERIALIZABLE-344))|(1<<(tsqlParserSIMPLE-344))|(1<<(tsqlParserSIZE-344))|(1<<(tsqlParserSNAPSHOT-344))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-344))|(1<<(tsqlParserSTATIC-344))|(1<<(tsqlParserSTATS_STREAM-344))|(1<<(tsqlParserSTDEV-344))|(1<<(tsqlParserSTDEVP-344))|(1<<(tsqlParserSUM-344))|(1<<(tsqlParserTEXTIMAGE_ON-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(tsqlParserTHROW-376))|(1<<(tsqlParserTIES-376))|(1<<(tsqlParserTIME-376))|(1<<(tsqlParserTRY-376))|(1<<(tsqlParserTYPE-376))|(1<<(tsqlParserTYPE_WARNING-376))|(1<<(tsqlParserUNBOUNDED-376))|(1<<(tsqlParserUNCOMMITTED-376))|(1<<(tsqlParserUNKNOWN-376))|(1<<(tsqlParserUSING-376))|(1<<(tsqlParserVAR-376))|(1<<(tsqlParserVARP-376))|(1<<(tsqlParserVIEWS-376))|(1<<(tsqlParserVIEW_METADATA-376))|(1<<(tsqlParserWORK-376))|(1<<(tsqlParserXML-376))|(1<<(tsqlParserXMLNAMESPACES-376))|(1<<(tsqlParserDOUBLE_QUOTE_ID-376))|(1<<(tsqlParserSQUARE_BRACKET_ID-376))|(1<<(tsqlParserID-376)))) != 0) || _la == tsqlParserLR_BRACKET {
			{
				p.SetState(466)

				var _x = p.Sql_clauses()

				localctx.(*Try_catch_statementContext).catch_clauses = _x
			}

		}
		{
			p.SetState(469)
			p.Match(tsqlParserEND)
		}
		{
			p.SetState(470)
			p.Match(tsqlParserCATCH)
		}
		p.SetState(472)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(471)
				p.Match(tsqlParserSEMI)
			}

		}

	case 10:
		localctx = NewWaitfor_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(474)
			p.Match(tsqlParserWAITFOR)
		}
		{
			p.SetState(475)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserDELAY || _la == tsqlParserTIME) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(476)
			p.expression(0)
		}
		p.SetState(478)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(477)
				p.Match(tsqlParserSEMI)
			}

		}

	case 11:
		localctx = NewWhile_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(480)
			p.Match(tsqlParserWHILE)
		}
		{
			p.SetState(481)
			p.search_condition(0)
		}
		p.SetState(491)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(482)
				p.Sql_clause()
			}

		case 2:
			{
				p.SetState(483)
				p.Match(tsqlParserBREAK)
			}
			p.SetState(485)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(484)
					p.Match(tsqlParserSEMI)
				}

			}

		case 3:
			{
				p.SetState(487)
				p.Match(tsqlParserCONTINUE)
			}
			p.SetState(489)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(488)
					p.Match(tsqlParserSEMI)
				}

			}

		}

	case 12:
		localctx = NewPrint_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(493)
			p.Match(tsqlParserPRINT)
		}
		{
			p.SetState(494)
			p.expression(0)
		}
		p.SetState(496)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(495)
				p.Match(tsqlParserSEMI)
			}

		}

	case 13:
		localctx = NewRaiseerror_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(498)
			p.Match(tsqlParserRAISERROR)
		}
		{
			p.SetState(499)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(500)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Raiseerror_statementContext).msg = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-404)&-(0x1f+1)) == 0 && ((1<<uint((_la-404)))&((1<<(tsqlParserLOCAL_ID-404))|(1<<(tsqlParserDECIMAL-404))|(1<<(tsqlParserSTRING-404)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Raiseerror_statementContext).msg = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(501)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(502)

			var _x = p.Constant_LOCAL_ID()

			localctx.(*Raiseerror_statementContext).severity = _x
		}
		{
			p.SetState(503)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(504)

			var _x = p.Constant_LOCAL_ID()

			localctx.(*Raiseerror_statementContext).state = _x
		}
		p.SetState(509)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(505)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(506)
				p.Constant_LOCAL_ID()
			}

			p.SetState(511)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(512)
			p.Match(tsqlParserRR_BRACKET)
		}
		p.SetState(514)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(513)
				p.Match(tsqlParserSEMI)
			}

		}

	}

	return localctx
}

// IAnother_statementContext is an interface to support dynamic dispatch.
type IAnother_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnother_statementContext differentiates from other interfaces.
	IsAnother_statementContext()
}

type Another_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnother_statementContext() *Another_statementContext {
	var p = new(Another_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_another_statement
	return p
}

func (*Another_statementContext) IsAnother_statementContext() {}

func NewAnother_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Another_statementContext {
	var p = new(Another_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_another_statement

	return p
}

func (s *Another_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Another_statementContext) Declare_statement() IDeclare_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_statementContext)
}

func (s *Another_statementContext) Cursor_statement() ICursor_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_statementContext)
}

func (s *Another_statementContext) Execute_statement() IExecute_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_statementContext)
}

func (s *Another_statementContext) Security_statement() ISecurity_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISecurity_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISecurity_statementContext)
}

func (s *Another_statementContext) Set_statement() ISet_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_statementContext)
}

func (s *Another_statementContext) Transaction_statement() ITransaction_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransaction_statementContext)
}

func (s *Another_statementContext) Use_statement() IUse_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUse_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUse_statementContext)
}

func (s *Another_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Another_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Another_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterAnother_statement(s)
	}
}

func (s *Another_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitAnother_statement(s)
	}
}

func (p *tsqlParser) Another_statement() (localctx IAnother_statementContext) {
	localctx = NewAnother_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, tsqlParserRULE_another_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(525)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(518)
			p.Declare_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(519)
			p.Cursor_statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(520)
			p.Execute_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(521)
			p.Security_statement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(522)
			p.Set_statement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(523)
			p.Transaction_statement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(524)
			p.Use_statement()
		}

	}

	return localctx
}

// IDelete_statementContext is an interface to support dynamic dispatch.
type IDelete_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelete_statementContext differentiates from other interfaces.
	IsDelete_statementContext()
}

type Delete_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelete_statementContext() *Delete_statementContext {
	var p = new(Delete_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_delete_statement
	return p
}

func (*Delete_statementContext) IsDelete_statementContext() {}

func NewDelete_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_statementContext {
	var p = new(Delete_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_delete_statement

	return p
}

func (s *Delete_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_statementContext) DELETE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDELETE, 0)
}

func (s *Delete_statementContext) Delete_statement_from() IDelete_statement_fromContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_statement_fromContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_statement_fromContext)
}

func (s *Delete_statementContext) With_expression() IWith_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Delete_statementContext) Top_clause_dm() ITop_clause_dmContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITop_clause_dmContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITop_clause_dmContext)
}

func (s *Delete_statementContext) AllFROM() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserFROM)
}

func (s *Delete_statementContext) FROM(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserFROM, i)
}

func (s *Delete_statementContext) Insert_with_table_hints() IInsert_with_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_with_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_with_table_hintsContext)
}

func (s *Delete_statementContext) Output_clause() IOutput_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_clauseContext)
}

func (s *Delete_statementContext) Table_sources() ITable_sourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourcesContext)
}

func (s *Delete_statementContext) Where_clause_dml() IWhere_clause_dmlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhere_clause_dmlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhere_clause_dmlContext)
}

func (s *Delete_statementContext) For_clause() IFor_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_clauseContext)
}

func (s *Delete_statementContext) Option_clause() IOption_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_clauseContext)
}

func (s *Delete_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDelete_statement(s)
	}
}

func (s *Delete_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDelete_statement(s)
	}
}

func (p *tsqlParser) Delete_statement() (localctx IDelete_statementContext) {
	localctx = NewDelete_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, tsqlParserRULE_delete_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(528)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH {
		{
			p.SetState(527)
			p.With_expression()
		}

	}
	{
		p.SetState(530)
		p.Match(tsqlParserDELETE)
	}
	p.SetState(532)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserTOP {
		{
			p.SetState(531)
			p.Top_clause_dm()
		}

	}
	p.SetState(535)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFROM {
		{
			p.SetState(534)
			p.Match(tsqlParserFROM)
		}

	}
	{
		p.SetState(537)
		p.Delete_statement_from()
	}
	p.SetState(539)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(538)
			p.Insert_with_table_hints()
		}

	}
	p.SetState(542)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(541)
			p.Output_clause()
		}

	}
	p.SetState(546)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFROM {
		{
			p.SetState(544)
			p.Match(tsqlParserFROM)
		}
		{
			p.SetState(545)
			p.Table_sources()
		}

	}
	p.SetState(549)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWHERE {
		{
			p.SetState(548)
			p.Where_clause_dml()
		}

	}
	p.SetState(552)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFOR {
		{
			p.SetState(551)
			p.For_clause()
		}

	}
	p.SetState(555)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserOPTION {
		{
			p.SetState(554)
			p.Option_clause()
		}

	}
	p.SetState(558)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(557)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IDelete_statement_fromContext is an interface to support dynamic dispatch.
type IDelete_statement_fromContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable_var returns the table_var token.
	GetTable_var() antlr.Token

	// SetTable_var sets the table_var token.
	SetTable_var(antlr.Token)

	// IsDelete_statement_fromContext differentiates from other interfaces.
	IsDelete_statement_fromContext()
}

type Delete_statement_fromContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	table_var antlr.Token
}

func NewEmptyDelete_statement_fromContext() *Delete_statement_fromContext {
	var p = new(Delete_statement_fromContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_delete_statement_from
	return p
}

func (*Delete_statement_fromContext) IsDelete_statement_fromContext() {}

func NewDelete_statement_fromContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_statement_fromContext {
	var p = new(Delete_statement_fromContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_delete_statement_from

	return p
}

func (s *Delete_statement_fromContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_statement_fromContext) GetTable_var() antlr.Token { return s.table_var }

func (s *Delete_statement_fromContext) SetTable_var(v antlr.Token) { s.table_var = v }

func (s *Delete_statement_fromContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Delete_statement_fromContext) With_table_hints() IWith_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_table_hintsContext)
}

func (s *Delete_statement_fromContext) Ddl_object() IDdl_objectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdl_objectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdl_objectContext)
}

func (s *Delete_statement_fromContext) Rowset_function_limited() IRowset_function_limitedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowset_function_limitedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowset_function_limitedContext)
}

func (s *Delete_statement_fromContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Delete_statement_fromContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_statement_fromContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_statement_fromContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDelete_statement_from(s)
	}
}

func (s *Delete_statement_fromContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDelete_statement_from(s)
	}
}

func (p *tsqlParser) Delete_statement_from() (localctx IDelete_statement_fromContext) {
	localctx = NewDelete_statement_fromContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, tsqlParserRULE_delete_statement_from)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(567)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(560)
			p.R_id()
		}
		p.SetState(562)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(561)
				p.With_table_hints()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(564)
			p.Ddl_object()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(565)
			p.Rowset_function_limited()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(566)

			var _m = p.Match(tsqlParserLOCAL_ID)

			localctx.(*Delete_statement_fromContext).table_var = _m
		}

	}

	return localctx
}

// IInsert_statementContext is an interface to support dynamic dispatch.
type IInsert_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_statementContext differentiates from other interfaces.
	IsInsert_statementContext()
}

type Insert_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_statementContext() *Insert_statementContext {
	var p = new(Insert_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_insert_statement
	return p
}

func (*Insert_statementContext) IsInsert_statementContext() {}

func NewInsert_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_statementContext {
	var p = new(Insert_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_insert_statement

	return p
}

func (s *Insert_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_statementContext) INSERT() antlr.TerminalNode {
	return s.GetToken(tsqlParserINSERT, 0)
}

func (s *Insert_statementContext) Insert_statement_value() IInsert_statement_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_statement_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_statement_valueContext)
}

func (s *Insert_statementContext) Ddl_object() IDdl_objectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdl_objectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdl_objectContext)
}

func (s *Insert_statementContext) Rowset_function_limited() IRowset_function_limitedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowset_function_limitedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowset_function_limitedContext)
}

func (s *Insert_statementContext) With_expression() IWith_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Insert_statementContext) Top_clause_dm() ITop_clause_dmContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITop_clause_dmContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITop_clause_dmContext)
}

func (s *Insert_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(tsqlParserINTO, 0)
}

func (s *Insert_statementContext) Insert_with_table_hints() IInsert_with_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_with_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_with_table_hintsContext)
}

func (s *Insert_statementContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Insert_statementContext) Output_clause() IOutput_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_clauseContext)
}

func (s *Insert_statementContext) For_clause() IFor_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_clauseContext)
}

func (s *Insert_statementContext) Option_clause() IOption_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_clauseContext)
}

func (s *Insert_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterInsert_statement(s)
	}
}

func (s *Insert_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitInsert_statement(s)
	}
}

func (p *tsqlParser) Insert_statement() (localctx IInsert_statementContext) {
	localctx = NewInsert_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, tsqlParserRULE_insert_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(570)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH {
		{
			p.SetState(569)
			p.With_expression()
		}

	}
	{
		p.SetState(572)
		p.Match(tsqlParserINSERT)
	}
	p.SetState(574)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserTOP {
		{
			p.SetState(573)
			p.Top_clause_dm()
		}

	}
	p.SetState(577)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserINTO {
		{
			p.SetState(576)
			p.Match(tsqlParserINTO)
		}

	}
	p.SetState(581)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserLOCAL_ID, tsqlParserID:
		{
			p.SetState(579)
			p.Ddl_object()
		}

	case tsqlParserOPENDATASOURCE, tsqlParserOPENQUERY:
		{
			p.SetState(580)
			p.Rowset_function_limited()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(584)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(583)
			p.Insert_with_table_hints()
		}

	}
	p.SetState(590)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(586)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(587)
			p.Column_name_list()
		}
		{
			p.SetState(588)
			p.Match(tsqlParserRR_BRACKET)
		}

	}
	p.SetState(593)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserOUTPUT {
		{
			p.SetState(592)
			p.Output_clause()
		}

	}
	{
		p.SetState(595)
		p.Insert_statement_value()
	}
	p.SetState(597)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFOR {
		{
			p.SetState(596)
			p.For_clause()
		}

	}
	p.SetState(600)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserOPTION {
		{
			p.SetState(599)
			p.Option_clause()
		}

	}
	p.SetState(603)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(602)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IInsert_statement_valueContext is an interface to support dynamic dispatch.
type IInsert_statement_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_statement_valueContext differentiates from other interfaces.
	IsInsert_statement_valueContext()
}

type Insert_statement_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_statement_valueContext() *Insert_statement_valueContext {
	var p = new(Insert_statement_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_insert_statement_value
	return p
}

func (*Insert_statement_valueContext) IsInsert_statement_valueContext() {}

func NewInsert_statement_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_statement_valueContext {
	var p = new(Insert_statement_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_insert_statement_value

	return p
}

func (s *Insert_statement_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_statement_valueContext) Table_value_constructor() ITable_value_constructorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_value_constructorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_value_constructorContext)
}

func (s *Insert_statement_valueContext) Derived_table() IDerived_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDerived_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDerived_tableContext)
}

func (s *Insert_statement_valueContext) Execute_statement() IExecute_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_statementContext)
}

func (s *Insert_statement_valueContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT, 0)
}

func (s *Insert_statement_valueContext) VALUES() antlr.TerminalNode {
	return s.GetToken(tsqlParserVALUES, 0)
}

func (s *Insert_statement_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_statement_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_statement_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterInsert_statement_value(s)
	}
}

func (s *Insert_statement_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitInsert_statement_value(s)
	}
}

func (p *tsqlParser) Insert_statement_value() (localctx IInsert_statement_valueContext) {
	localctx = NewInsert_statement_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, tsqlParserRULE_insert_statement_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(610)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserVALUES:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(605)
			p.Table_value_constructor()
		}

	case tsqlParserSELECT, tsqlParserWITH, tsqlParserLR_BRACKET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(606)
			p.Derived_table()
		}

	case tsqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(607)
			p.Execute_statement()
		}

	case tsqlParserDEFAULT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(608)
			p.Match(tsqlParserDEFAULT)
		}
		{
			p.SetState(609)
			p.Match(tsqlParserVALUES)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelect_statementContext is an interface to support dynamic dispatch.
type ISelect_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_statementContext differentiates from other interfaces.
	IsSelect_statementContext()
}

type Select_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_statementContext() *Select_statementContext {
	var p = new(Select_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_select_statement
	return p
}

func (*Select_statementContext) IsSelect_statementContext() {}

func NewSelect_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_statementContext {
	var p = new(Select_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_select_statement

	return p
}

func (s *Select_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_statementContext) Query_expression() IQuery_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_expressionContext)
}

func (s *Select_statementContext) With_expression() IWith_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Select_statementContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Select_statementContext) For_clause() IFor_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_clauseContext)
}

func (s *Select_statementContext) Option_clause() IOption_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_clauseContext)
}

func (s *Select_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSelect_statement(s)
	}
}

func (s *Select_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSelect_statement(s)
	}
}

func (p *tsqlParser) Select_statement() (localctx ISelect_statementContext) {
	localctx = NewSelect_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, tsqlParserRULE_select_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(613)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH {
		{
			p.SetState(612)
			p.With_expression()
		}

	}
	{
		p.SetState(615)
		p.query_expression(0)
	}
	p.SetState(617)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(616)
			p.Order_by_clause()
		}

	}
	p.SetState(620)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(619)
			p.For_clause()
		}

	}
	p.SetState(623)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(622)
			p.Option_clause()
		}

	}
	p.SetState(626)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(625)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IUpdate_statementContext is an interface to support dynamic dispatch.
type IUpdate_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdate_statementContext differentiates from other interfaces.
	IsUpdate_statementContext()
}

type Update_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_statementContext() *Update_statementContext {
	var p = new(Update_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_update_statement
	return p
}

func (*Update_statementContext) IsUpdate_statementContext() {}

func NewUpdate_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_statementContext {
	var p = new(Update_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_update_statement

	return p
}

func (s *Update_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_statementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserUPDATE, 0)
}

func (s *Update_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(tsqlParserSET, 0)
}

func (s *Update_statementContext) AllUpdate_elem() []IUpdate_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem())
	var tst = make([]IUpdate_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdate_elemContext)
		}
	}

	return tst
}

func (s *Update_statementContext) Update_elem(i int) IUpdate_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdate_elemContext)
}

func (s *Update_statementContext) Ddl_object() IDdl_objectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdl_objectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdl_objectContext)
}

func (s *Update_statementContext) Rowset_function_limited() IRowset_function_limitedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowset_function_limitedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowset_function_limitedContext)
}

func (s *Update_statementContext) With_expression() IWith_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Update_statementContext) Top_clause_dm() ITop_clause_dmContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITop_clause_dmContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITop_clause_dmContext)
}

func (s *Update_statementContext) With_table_hints() IWith_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_table_hintsContext)
}

func (s *Update_statementContext) Output_clause() IOutput_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_clauseContext)
}

func (s *Update_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(tsqlParserFROM, 0)
}

func (s *Update_statementContext) Table_sources() ITable_sourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourcesContext)
}

func (s *Update_statementContext) Where_clause_dml() IWhere_clause_dmlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhere_clause_dmlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhere_clause_dmlContext)
}

func (s *Update_statementContext) For_clause() IFor_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_clauseContext)
}

func (s *Update_statementContext) Option_clause() IOption_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_clauseContext)
}

func (s *Update_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterUpdate_statement(s)
	}
}

func (s *Update_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitUpdate_statement(s)
	}
}

func (p *tsqlParser) Update_statement() (localctx IUpdate_statementContext) {
	localctx = NewUpdate_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, tsqlParserRULE_update_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(629)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH {
		{
			p.SetState(628)
			p.With_expression()
		}

	}
	{
		p.SetState(631)
		p.Match(tsqlParserUPDATE)
	}
	p.SetState(633)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserTOP {
		{
			p.SetState(632)
			p.Top_clause_dm()
		}

	}
	p.SetState(637)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserLOCAL_ID, tsqlParserID:
		{
			p.SetState(635)
			p.Ddl_object()
		}

	case tsqlParserOPENDATASOURCE, tsqlParserOPENQUERY:
		{
			p.SetState(636)
			p.Rowset_function_limited()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(640)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH || _la == tsqlParserLR_BRACKET {
		{
			p.SetState(639)
			p.With_table_hints()
		}

	}
	{
		p.SetState(642)
		p.Match(tsqlParserSET)
	}
	{
		p.SetState(643)
		p.Update_elem()
	}
	p.SetState(648)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(644)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(645)
			p.Update_elem()
		}

		p.SetState(650)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(652)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(651)
			p.Output_clause()
		}

	}
	p.SetState(656)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFROM {
		{
			p.SetState(654)
			p.Match(tsqlParserFROM)
		}
		{
			p.SetState(655)
			p.Table_sources()
		}

	}
	p.SetState(659)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWHERE {
		{
			p.SetState(658)
			p.Where_clause_dml()
		}

	}
	p.SetState(662)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFOR {
		{
			p.SetState(661)
			p.For_clause()
		}

	}
	p.SetState(665)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserOPTION {
		{
			p.SetState(664)
			p.Option_clause()
		}

	}
	p.SetState(668)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(667)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IWhere_clause_dmlContext is an interface to support dynamic dispatch.
type IWhere_clause_dmlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCursor_var returns the cursor_var token.
	GetCursor_var() antlr.Token

	// SetCursor_var sets the cursor_var token.
	SetCursor_var(antlr.Token)

	// IsWhere_clause_dmlContext differentiates from other interfaces.
	IsWhere_clause_dmlContext()
}

type Where_clause_dmlContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	cursor_var antlr.Token
}

func NewEmptyWhere_clause_dmlContext() *Where_clause_dmlContext {
	var p = new(Where_clause_dmlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_where_clause_dml
	return p
}

func (*Where_clause_dmlContext) IsWhere_clause_dmlContext() {}

func NewWhere_clause_dmlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Where_clause_dmlContext {
	var p = new(Where_clause_dmlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_where_clause_dml

	return p
}

func (s *Where_clause_dmlContext) GetParser() antlr.Parser { return s.parser }

func (s *Where_clause_dmlContext) GetCursor_var() antlr.Token { return s.cursor_var }

func (s *Where_clause_dmlContext) SetCursor_var(v antlr.Token) { s.cursor_var = v }

func (s *Where_clause_dmlContext) WHERE() antlr.TerminalNode {
	return s.GetToken(tsqlParserWHERE, 0)
}

func (s *Where_clause_dmlContext) Search_condition_list() ISearch_condition_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_condition_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_condition_listContext)
}

func (s *Where_clause_dmlContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURRENT, 0)
}

func (s *Where_clause_dmlContext) OF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOF, 0)
}

func (s *Where_clause_dmlContext) Cursor_name() ICursor_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_nameContext)
}

func (s *Where_clause_dmlContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Where_clause_dmlContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserGLOBAL, 0)
}

func (s *Where_clause_dmlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Where_clause_dmlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Where_clause_dmlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWhere_clause_dml(s)
	}
}

func (s *Where_clause_dmlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWhere_clause_dml(s)
	}
}

func (p *tsqlParser) Where_clause_dml() (localctx IWhere_clause_dmlContext) {
	localctx = NewWhere_clause_dmlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, tsqlParserRULE_where_clause_dml)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(670)
		p.Match(tsqlParserWHERE)
	}
	p.SetState(681)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserCASE, tsqlParserCOALESCE, tsqlParserCONVERT, tsqlParserCURRENT_TIMESTAMP, tsqlParserCURRENT_USER, tsqlParserDEFAULT, tsqlParserEXISTS, tsqlParserFORCESEEK, tsqlParserIDENTITY, tsqlParserIIF, tsqlParserLEFT, tsqlParserNEXT, tsqlParserNOT, tsqlParserNULL, tsqlParserNULLIF, tsqlParserOVER, tsqlParserRIGHT, tsqlParserSESSION_USER, tsqlParserSYSTEM_USER, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserBINARY_CHECKSUM, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDATEADD, tsqlParserDATEDIFF, tsqlParserDATENAME, tsqlParserDATEPART, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMIN_ACTIVE_ROWVERSION, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserLOCAL_ID, tsqlParserDECIMAL, tsqlParserID, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserLR_BRACKET, tsqlParserPLUS, tsqlParserMINUS, tsqlParserBIT_NOT:
		{
			p.SetState(671)
			p.Search_condition_list()
		}

	case tsqlParserCURRENT:
		{
			p.SetState(672)
			p.Match(tsqlParserCURRENT)
		}
		{
			p.SetState(673)
			p.Match(tsqlParserOF)
		}
		p.SetState(679)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) {
		case 1:
			p.SetState(675)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(674)
					p.Match(tsqlParserGLOBAL)
				}

			}
			{
				p.SetState(677)
				p.Cursor_name()
			}

		case 2:
			{
				p.SetState(678)

				var _m = p.Match(tsqlParserLOCAL_ID)

				localctx.(*Where_clause_dmlContext).cursor_var = _m
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOutput_clauseContext is an interface to support dynamic dispatch.
type IOutput_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOutput_clauseContext differentiates from other interfaces.
	IsOutput_clauseContext()
}

type Output_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOutput_clauseContext() *Output_clauseContext {
	var p = new(Output_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_output_clause
	return p
}

func (*Output_clauseContext) IsOutput_clauseContext() {}

func NewOutput_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Output_clauseContext {
	var p = new(Output_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_output_clause

	return p
}

func (s *Output_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Output_clauseContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUTPUT, 0)
}

func (s *Output_clauseContext) AllOutput_dml_list_elem() []IOutput_dml_list_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOutput_dml_list_elemContext)(nil)).Elem())
	var tst = make([]IOutput_dml_list_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOutput_dml_list_elemContext)
		}
	}

	return tst
}

func (s *Output_clauseContext) Output_dml_list_elem(i int) IOutput_dml_list_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_dml_list_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOutput_dml_list_elemContext)
}

func (s *Output_clauseContext) INTO() antlr.TerminalNode {
	return s.GetToken(tsqlParserINTO, 0)
}

func (s *Output_clauseContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Output_clauseContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Output_clauseContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Output_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Output_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Output_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOutput_clause(s)
	}
}

func (s *Output_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOutput_clause(s)
	}
}

func (p *tsqlParser) Output_clause() (localctx IOutput_clauseContext) {
	localctx = NewOutput_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, tsqlParserRULE_output_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(683)
		p.Match(tsqlParserOUTPUT)
	}
	{
		p.SetState(684)
		p.Output_dml_list_elem()
	}
	p.SetState(689)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(685)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(686)
			p.Output_dml_list_elem()
		}

		p.SetState(691)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(703)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserINTO {
		{
			p.SetState(692)
			p.Match(tsqlParserINTO)
		}
		p.SetState(695)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserLOCAL_ID:
			{
				p.SetState(693)
				p.Match(tsqlParserLOCAL_ID)
			}

		case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(694)
				p.Table_name()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(701)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(697)
				p.Match(tsqlParserLR_BRACKET)
			}
			{
				p.SetState(698)
				p.Column_name_list()
			}
			{
				p.SetState(699)
				p.Match(tsqlParserRR_BRACKET)
			}

		}

	}

	return localctx
}

// IOutput_dml_list_elemContext is an interface to support dynamic dispatch.
type IOutput_dml_list_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOutput_dml_list_elemContext differentiates from other interfaces.
	IsOutput_dml_list_elemContext()
}

type Output_dml_list_elemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOutput_dml_list_elemContext() *Output_dml_list_elemContext {
	var p = new(Output_dml_list_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_output_dml_list_elem
	return p
}

func (*Output_dml_list_elemContext) IsOutput_dml_list_elemContext() {}

func NewOutput_dml_list_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Output_dml_list_elemContext {
	var p = new(Output_dml_list_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_output_dml_list_elem

	return p
}

func (s *Output_dml_list_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Output_dml_list_elemContext) Output_column_name() IOutput_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_column_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_column_nameContext)
}

func (s *Output_dml_list_elemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Output_dml_list_elemContext) Column_alias() IColumn_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_aliasContext)
}

func (s *Output_dml_list_elemContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Output_dml_list_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Output_dml_list_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Output_dml_list_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOutput_dml_list_elem(s)
	}
}

func (s *Output_dml_list_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOutput_dml_list_elem(s)
	}
}

func (p *tsqlParser) Output_dml_list_elem() (localctx IOutput_dml_list_elemContext) {
	localctx = NewOutput_dml_list_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, tsqlParserRULE_output_dml_list_elem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(707)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(705)
			p.Output_column_name()
		}

	case 2:
		{
			p.SetState(706)
			p.expression(0)
		}

	}
	p.SetState(713)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext()) == 1 {
		p.SetState(710)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserAS {
			{
				p.SetState(709)
				p.Match(tsqlParserAS)
			}

		}
		{
			p.SetState(712)
			p.Column_alias()
		}

	}

	return localctx
}

// IOutput_column_nameContext is an interface to support dynamic dispatch.
type IOutput_column_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOutput_column_nameContext differentiates from other interfaces.
	IsOutput_column_nameContext()
}

type Output_column_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOutput_column_nameContext() *Output_column_nameContext {
	var p = new(Output_column_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_output_column_name
	return p
}

func (*Output_column_nameContext) IsOutput_column_nameContext() {}

func NewOutput_column_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Output_column_nameContext {
	var p = new(Output_column_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_output_column_name

	return p
}

func (s *Output_column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Output_column_nameContext) DELETED() antlr.TerminalNode {
	return s.GetToken(tsqlParserDELETED, 0)
}

func (s *Output_column_nameContext) INSERTED() antlr.TerminalNode {
	return s.GetToken(tsqlParserINSERTED, 0)
}

func (s *Output_column_nameContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Output_column_nameContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Output_column_nameContext) DOLLAR_ACTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserDOLLAR_ACTION, 0)
}

func (s *Output_column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Output_column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Output_column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOutput_column_name(s)
	}
}

func (s *Output_column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOutput_column_name(s)
	}
}

func (p *tsqlParser) Output_column_name() (localctx IOutput_column_nameContext) {
	localctx = NewOutput_column_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, tsqlParserRULE_output_column_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(726)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(718)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(715)
				p.Match(tsqlParserDELETED)
			}

		case 2:
			{
				p.SetState(716)
				p.Match(tsqlParserINSERTED)
			}

		case 3:
			{
				p.SetState(717)
				p.Table_name()
			}

		}
		{
			p.SetState(720)
			p.Match(tsqlParserDOT)
		}
		p.SetState(723)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserSTAR:
			{
				p.SetState(721)
				p.Match(tsqlParserSTAR)
			}

		case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(722)
				p.R_id()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case tsqlParserDOLLAR_ACTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(725)
			p.Match(tsqlParserDOLLAR_ACTION)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_databaseContext is an interface to support dynamic dispatch.
type ICreate_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase returns the database rule contexts.
	GetDatabase() IR_idContext

	// GetCollation_name returns the collation_name rule contexts.
	GetCollation_name() IR_idContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IR_idContext)

	// SetCollation_name sets the collation_name rule contexts.
	SetCollation_name(IR_idContext)

	// IsCreate_databaseContext differentiates from other interfaces.
	IsCreate_databaseContext()
}

type Create_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	database       IR_idContext
	collation_name IR_idContext
}

func NewEmptyCreate_databaseContext() *Create_databaseContext {
	var p = new(Create_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_create_database
	return p
}

func (*Create_databaseContext) IsCreate_databaseContext() {}

func NewCreate_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_databaseContext {
	var p = new(Create_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_create_database

	return p
}

func (s *Create_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_databaseContext) GetDatabase() IR_idContext { return s.database }

func (s *Create_databaseContext) GetCollation_name() IR_idContext { return s.collation_name }

func (s *Create_databaseContext) SetDatabase(v IR_idContext) { s.database = v }

func (s *Create_databaseContext) SetCollation_name(v IR_idContext) { s.collation_name = v }

func (s *Create_databaseContext) CREATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCREATE, 0)
}

func (s *Create_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDATABASE, 0)
}

func (s *Create_databaseContext) AllR_id() []IR_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IR_idContext)(nil)).Elem())
	var tst = make([]IR_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IR_idContext)
		}
	}

	return tst
}

func (s *Create_databaseContext) R_id(i int) IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Create_databaseContext) CONTAINMENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONTAINMENT, 0)
}

func (s *Create_databaseContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserON)
}

func (s *Create_databaseContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserON, i)
}

func (s *Create_databaseContext) AllDatabase_file_spec() []IDatabase_file_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDatabase_file_specContext)(nil)).Elem())
	var tst = make([]IDatabase_file_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDatabase_file_specContext)
		}
	}

	return tst
}

func (s *Create_databaseContext) Database_file_spec(i int) IDatabase_file_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_file_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDatabase_file_specContext)
}

func (s *Create_databaseContext) LOG() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOG, 0)
}

func (s *Create_databaseContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOLLATE, 0)
}

func (s *Create_databaseContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Create_databaseContext) AllCreate_database_option() []ICreate_database_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreate_database_optionContext)(nil)).Elem())
	var tst = make([]ICreate_database_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreate_database_optionContext)
		}
	}

	return tst
}

func (s *Create_databaseContext) Create_database_option(i int) ICreate_database_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_database_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreate_database_optionContext)
}

func (s *Create_databaseContext) NONE() antlr.TerminalNode {
	return s.GetToken(tsqlParserNONE, 0)
}

func (s *Create_databaseContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserPARTIAL, 0)
}

func (s *Create_databaseContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRIMARY, 0)
}

func (s *Create_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCreate_database(s)
	}
}

func (s *Create_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCreate_database(s)
	}
}

func (p *tsqlParser) Create_database() (localctx ICreate_databaseContext) {
	localctx = NewCreate_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, tsqlParserRULE_create_database)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(728)
		p.Match(tsqlParserCREATE)
	}
	{
		p.SetState(729)
		p.Match(tsqlParserDATABASE)
	}

	{
		p.SetState(730)

		var _x = p.R_id()

		localctx.(*Create_databaseContext).database = _x
	}

	p.SetState(734)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCONTAINMENT {
		{
			p.SetState(731)
			p.Match(tsqlParserCONTAINMENT)
		}
		{
			p.SetState(732)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(733)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserNONE || _la == tsqlParserPARTIAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(748)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserON {
		{
			p.SetState(736)
			p.Match(tsqlParserON)
		}
		p.SetState(738)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserPRIMARY {
			{
				p.SetState(737)
				p.Match(tsqlParserPRIMARY)
			}

		}
		{
			p.SetState(740)
			p.Database_file_spec()
		}
		p.SetState(745)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(741)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(742)
				p.Database_file_spec()
			}

			p.SetState(747)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(760)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserLOG {
		{
			p.SetState(750)
			p.Match(tsqlParserLOG)
		}
		{
			p.SetState(751)
			p.Match(tsqlParserON)
		}
		{
			p.SetState(752)
			p.Database_file_spec()
		}
		p.SetState(757)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(753)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(754)
				p.Database_file_spec()
			}

			p.SetState(759)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(764)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCOLLATE {
		{
			p.SetState(762)
			p.Match(tsqlParserCOLLATE)
		}
		{
			p.SetState(763)

			var _x = p.R_id()

			localctx.(*Create_databaseContext).collation_name = _x
		}

	}
	p.SetState(775)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(766)
			p.Match(tsqlParserWITH)
		}
		{
			p.SetState(767)
			p.Create_database_option()
		}
		p.SetState(772)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(768)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(769)
				p.Create_database_option()
			}

			p.SetState(774)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ICreate_indexContext is an interface to support dynamic dispatch.
type ICreate_indexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_indexContext differentiates from other interfaces.
	IsCreate_indexContext()
}

type Create_indexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_indexContext() *Create_indexContext {
	var p = new(Create_indexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_create_index
	return p
}

func (*Create_indexContext) IsCreate_indexContext() {}

func NewCreate_indexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_indexContext {
	var p = new(Create_indexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_create_index

	return p
}

func (s *Create_indexContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_indexContext) CREATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCREATE, 0)
}

func (s *Create_indexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(tsqlParserINDEX, 0)
}

func (s *Create_indexContext) AllR_id() []IR_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IR_idContext)(nil)).Elem())
	var tst = make([]IR_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IR_idContext)
		}
	}

	return tst
}

func (s *Create_indexContext) R_id(i int) IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Create_indexContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserON)
}

func (s *Create_indexContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserON, i)
}

func (s *Create_indexContext) Table_name_with_hint() ITable_name_with_hintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_with_hintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_with_hintContext)
}

func (s *Create_indexContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Create_indexContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNIQUE, 0)
}

func (s *Create_indexContext) Clustered() IClusteredContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClusteredContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClusteredContext)
}

func (s *Create_indexContext) Index_options() IIndex_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionsContext)
}

func (s *Create_indexContext) ASC() antlr.TerminalNode {
	return s.GetToken(tsqlParserASC, 0)
}

func (s *Create_indexContext) DESC() antlr.TerminalNode {
	return s.GetToken(tsqlParserDESC, 0)
}

func (s *Create_indexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_indexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_indexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCreate_index(s)
	}
}

func (s *Create_indexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCreate_index(s)
	}
}

func (p *tsqlParser) Create_index() (localctx ICreate_indexContext) {
	localctx = NewCreate_indexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, tsqlParserRULE_create_index)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(777)
		p.Match(tsqlParserCREATE)
	}
	p.SetState(779)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserUNIQUE {
		{
			p.SetState(778)
			p.Match(tsqlParserUNIQUE)
		}

	}
	p.SetState(782)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCLUSTERED || _la == tsqlParserNONCLUSTERED {
		{
			p.SetState(781)
			p.Clustered()
		}

	}
	{
		p.SetState(784)
		p.Match(tsqlParserINDEX)
	}
	{
		p.SetState(785)
		p.R_id()
	}
	{
		p.SetState(786)
		p.Match(tsqlParserON)
	}
	{
		p.SetState(787)
		p.Table_name_with_hint()
	}
	{
		p.SetState(788)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(789)
		p.Column_name_list()
	}
	p.SetState(791)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserASC || _la == tsqlParserDESC {
		{
			p.SetState(790)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserASC || _la == tsqlParserDESC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(793)
		p.Match(tsqlParserRR_BRACKET)
	}
	p.SetState(795)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(794)
			p.Index_options()
		}

	}
	p.SetState(799)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserON {
		{
			p.SetState(797)
			p.Match(tsqlParserON)
		}
		{
			p.SetState(798)
			p.R_id()
		}

	}
	p.SetState(802)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(801)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// ICreate_procedureContext is an interface to support dynamic dispatch.
type ICreate_procedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetProc returns the proc rule contexts.
	GetProc() IFunc_proc_nameContext

	// SetProc sets the proc rule contexts.
	SetProc(IFunc_proc_nameContext)

	// IsCreate_procedureContext differentiates from other interfaces.
	IsCreate_procedureContext()
}

type Create_procedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	proc   IFunc_proc_nameContext
}

func NewEmptyCreate_procedureContext() *Create_procedureContext {
	var p = new(Create_procedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_create_procedure
	return p
}

func (*Create_procedureContext) IsCreate_procedureContext() {}

func NewCreate_procedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_procedureContext {
	var p = new(Create_procedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_create_procedure

	return p
}

func (s *Create_procedureContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_procedureContext) GetProc() IFunc_proc_nameContext { return s.proc }

func (s *Create_procedureContext) SetProc(v IFunc_proc_nameContext) { s.proc = v }

func (s *Create_procedureContext) CREATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCREATE, 0)
}

func (s *Create_procedureContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Create_procedureContext) Sql_clauses() ISql_clausesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_clausesContext)
}

func (s *Create_procedureContext) PROC() antlr.TerminalNode {
	return s.GetToken(tsqlParserPROC, 0)
}

func (s *Create_procedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(tsqlParserPROCEDURE, 0)
}

func (s *Create_procedureContext) Func_proc_name() IFunc_proc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_proc_nameContext)
}

func (s *Create_procedureContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Create_procedureContext) AllProcedure_param() []IProcedure_paramContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedure_paramContext)(nil)).Elem())
	var tst = make([]IProcedure_paramContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedure_paramContext)
		}
	}

	return tst
}

func (s *Create_procedureContext) Procedure_param(i int) IProcedure_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedure_paramContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedure_paramContext)
}

func (s *Create_procedureContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Create_procedureContext) AllProcedure_option() []IProcedure_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedure_optionContext)(nil)).Elem())
	var tst = make([]IProcedure_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedure_optionContext)
		}
	}

	return tst
}

func (s *Create_procedureContext) Procedure_option(i int) IProcedure_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedure_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedure_optionContext)
}

func (s *Create_procedureContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *Create_procedureContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserREPLICATION, 0)
}

func (s *Create_procedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_procedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_procedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCreate_procedure(s)
	}
}

func (s *Create_procedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCreate_procedure(s)
	}
}

func (p *tsqlParser) Create_procedure() (localctx ICreate_procedureContext) {
	localctx = NewCreate_procedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, tsqlParserRULE_create_procedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(804)
		p.Match(tsqlParserCREATE)
	}
	{
		p.SetState(805)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserPROC || _la == tsqlParserPROCEDURE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(806)

		var _x = p.Func_proc_name()

		localctx.(*Create_procedureContext).proc = _x
	}
	p.SetState(809)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserSEMI {
		{
			p.SetState(807)
			p.Match(tsqlParserSEMI)
		}
		{
			p.SetState(808)
			p.Match(tsqlParserDECIMAL)
		}

	}
	p.SetState(825)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserLOCAL_ID || _la == tsqlParserLR_BRACKET {
		p.SetState(812)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserLR_BRACKET {
			{
				p.SetState(811)
				p.Match(tsqlParserLR_BRACKET)
			}

		}
		{
			p.SetState(814)
			p.Procedure_param()
		}
		p.SetState(819)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(815)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(816)
				p.Procedure_param()
			}

			p.SetState(821)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(823)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserRR_BRACKET {
			{
				p.SetState(822)
				p.Match(tsqlParserRR_BRACKET)
			}

		}

	}
	p.SetState(836)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH {
		{
			p.SetState(827)
			p.Match(tsqlParserWITH)
		}
		{
			p.SetState(828)
			p.Procedure_option()
		}
		p.SetState(833)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(829)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(830)
				p.Procedure_option()
			}

			p.SetState(835)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(840)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFOR {
		{
			p.SetState(838)
			p.Match(tsqlParserFOR)
		}
		{
			p.SetState(839)
			p.Match(tsqlParserREPLICATION)
		}

	}
	{
		p.SetState(842)
		p.Match(tsqlParserAS)
	}
	{
		p.SetState(843)
		p.Sql_clauses()
	}

	return localctx
}

// IProcedure_paramContext is an interface to support dynamic dispatch.
type IProcedure_paramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetParam_name returns the param_name token.
	GetParam_name() antlr.Token

	// SetParam_name sets the param_name token.
	SetParam_name(antlr.Token)

	// GetData_type_name returns the data_type_name rule contexts.
	GetData_type_name() IData_typeContext

	// GetDefault_val returns the default_val rule contexts.
	GetDefault_val() IDefault_valueContext

	// SetData_type_name sets the data_type_name rule contexts.
	SetData_type_name(IData_typeContext)

	// SetDefault_val sets the default_val rule contexts.
	SetDefault_val(IDefault_valueContext)

	// IsProcedure_paramContext differentiates from other interfaces.
	IsProcedure_paramContext()
}

type Procedure_paramContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	param_name     antlr.Token
	data_type_name IData_typeContext
	default_val    IDefault_valueContext
}

func NewEmptyProcedure_paramContext() *Procedure_paramContext {
	var p = new(Procedure_paramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_procedure_param
	return p
}

func (*Procedure_paramContext) IsProcedure_paramContext() {}

func NewProcedure_paramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_paramContext {
	var p = new(Procedure_paramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_procedure_param

	return p
}

func (s *Procedure_paramContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_paramContext) GetParam_name() antlr.Token { return s.param_name }

func (s *Procedure_paramContext) SetParam_name(v antlr.Token) { s.param_name = v }

func (s *Procedure_paramContext) GetData_type_name() IData_typeContext { return s.data_type_name }

func (s *Procedure_paramContext) GetDefault_val() IDefault_valueContext { return s.default_val }

func (s *Procedure_paramContext) SetData_type_name(v IData_typeContext) { s.data_type_name = v }

func (s *Procedure_paramContext) SetDefault_val(v IDefault_valueContext) { s.default_val = v }

func (s *Procedure_paramContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Procedure_paramContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Procedure_paramContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Procedure_paramContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Procedure_paramContext) VARYING() antlr.TerminalNode {
	return s.GetToken(tsqlParserVARYING, 0)
}

func (s *Procedure_paramContext) Default_value() IDefault_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefault_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefault_valueContext)
}

func (s *Procedure_paramContext) OUT() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUT, 0)
}

func (s *Procedure_paramContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUTPUT, 0)
}

func (s *Procedure_paramContext) READONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserREADONLY, 0)
}

func (s *Procedure_paramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_paramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedure_paramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterProcedure_param(s)
	}
}

func (s *Procedure_paramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitProcedure_param(s)
	}
}

func (p *tsqlParser) Procedure_param() (localctx IProcedure_paramContext) {
	localctx = NewProcedure_paramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, tsqlParserRULE_procedure_param)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(845)

		var _m = p.Match(tsqlParserLOCAL_ID)

		localctx.(*Procedure_paramContext).param_name = _m
	}
	p.SetState(849)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 110, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(846)
			p.R_id()
		}
		{
			p.SetState(847)
			p.Match(tsqlParserDOT)
		}

	}
	p.SetState(852)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserAS {
		{
			p.SetState(851)
			p.Match(tsqlParserAS)
		}

	}
	{
		p.SetState(854)

		var _x = p.Data_type()

		localctx.(*Procedure_paramContext).data_type_name = _x
	}
	p.SetState(856)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserVARYING {
		{
			p.SetState(855)
			p.Match(tsqlParserVARYING)
		}

	}
	p.SetState(860)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserEQUAL {
		{
			p.SetState(858)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(859)

			var _x = p.Default_value()

			localctx.(*Procedure_paramContext).default_val = _x
		}

	}
	p.SetState(863)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(tsqlParserOUT-324))|(1<<(tsqlParserOUTPUT-324))|(1<<(tsqlParserREADONLY-324)))) != 0 {
		{
			p.SetState(862)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-324)&-(0x1f+1)) == 0 && ((1<<uint((_la-324)))&((1<<(tsqlParserOUT-324))|(1<<(tsqlParserOUTPUT-324))|(1<<(tsqlParserREADONLY-324)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IProcedure_optionContext is an interface to support dynamic dispatch.
type IProcedure_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProcedure_optionContext differentiates from other interfaces.
	IsProcedure_optionContext()
}

type Procedure_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedure_optionContext() *Procedure_optionContext {
	var p = new(Procedure_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_procedure_option
	return p
}

func (*Procedure_optionContext) IsProcedure_optionContext() {}

func NewProcedure_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_optionContext {
	var p = new(Procedure_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_procedure_option

	return p
}

func (s *Procedure_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_optionContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserENCRYPTION, 0)
}

func (s *Procedure_optionContext) RECOMPILE() antlr.TerminalNode {
	return s.GetToken(tsqlParserRECOMPILE, 0)
}

func (s *Procedure_optionContext) Execute_clause() IExecute_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_clauseContext)
}

func (s *Procedure_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedure_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterProcedure_option(s)
	}
}

func (s *Procedure_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitProcedure_option(s)
	}
}

func (p *tsqlParser) Procedure_option() (localctx IProcedure_optionContext) {
	localctx = NewProcedure_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, tsqlParserRULE_procedure_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(868)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserENCRYPTION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(865)
			p.Match(tsqlParserENCRYPTION)
		}

	case tsqlParserRECOMPILE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(866)
			p.Match(tsqlParserRECOMPILE)
		}

	case tsqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(867)
			p.Execute_clause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_statisticsContext is an interface to support dynamic dispatch.
type ICreate_statisticsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_statisticsContext differentiates from other interfaces.
	IsCreate_statisticsContext()
}

type Create_statisticsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_statisticsContext() *Create_statisticsContext {
	var p = new(Create_statisticsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_create_statistics
	return p
}

func (*Create_statisticsContext) IsCreate_statisticsContext() {}

func NewCreate_statisticsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_statisticsContext {
	var p = new(Create_statisticsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_create_statistics

	return p
}

func (s *Create_statisticsContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_statisticsContext) CREATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCREATE, 0)
}

func (s *Create_statisticsContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTATISTICS, 0)
}

func (s *Create_statisticsContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Create_statisticsContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Create_statisticsContext) Table_name_with_hint() ITable_name_with_hintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_with_hintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_with_hintContext)
}

func (s *Create_statisticsContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Create_statisticsContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Create_statisticsContext) FULLSCAN() antlr.TerminalNode {
	return s.GetToken(tsqlParserFULLSCAN, 0)
}

func (s *Create_statisticsContext) SAMPLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSAMPLE, 0)
}

func (s *Create_statisticsContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Create_statisticsContext) STATS_STREAM() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTATS_STREAM, 0)
}

func (s *Create_statisticsContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserPERCENT, 0)
}

func (s *Create_statisticsContext) ROWS() antlr.TerminalNode {
	return s.GetToken(tsqlParserROWS, 0)
}

func (s *Create_statisticsContext) NORECOMPUTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserNORECOMPUTE, 0)
}

func (s *Create_statisticsContext) INCREMENTAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserINCREMENTAL, 0)
}

func (s *Create_statisticsContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Create_statisticsContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Create_statisticsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_statisticsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_statisticsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCreate_statistics(s)
	}
}

func (s *Create_statisticsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCreate_statistics(s)
	}
}

func (p *tsqlParser) Create_statistics() (localctx ICreate_statisticsContext) {
	localctx = NewCreate_statisticsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, tsqlParserRULE_create_statistics)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(870)
		p.Match(tsqlParserCREATE)
	}
	{
		p.SetState(871)
		p.Match(tsqlParserSTATISTICS)
	}
	{
		p.SetState(872)
		p.R_id()
	}
	{
		p.SetState(873)
		p.Match(tsqlParserON)
	}
	{
		p.SetState(874)
		p.Table_name_with_hint()
	}
	{
		p.SetState(875)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(876)
		p.Column_name_list()
	}
	{
		p.SetState(877)
		p.Match(tsqlParserRR_BRACKET)
	}
	p.SetState(896)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(878)
			p.Match(tsqlParserWITH)
		}
		p.SetState(884)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserFULLSCAN:
			{
				p.SetState(879)
				p.Match(tsqlParserFULLSCAN)
			}

		case tsqlParserSAMPLE:
			{
				p.SetState(880)
				p.Match(tsqlParserSAMPLE)
			}
			{
				p.SetState(881)
				p.Match(tsqlParserDECIMAL)
			}
			{
				p.SetState(882)
				_la = p.GetTokenStream().LA(1)

				if !(_la == tsqlParserPERCENT || _la == tsqlParserROWS) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		case tsqlParserSTATS_STREAM:
			{
				p.SetState(883)
				p.Match(tsqlParserSTATS_STREAM)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(888)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(886)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(887)
				p.Match(tsqlParserNORECOMPUTE)
			}

		}
		p.SetState(894)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCOMMA {
			{
				p.SetState(890)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(891)
				p.Match(tsqlParserINCREMENTAL)
			}
			{
				p.SetState(892)
				p.Match(tsqlParserEQUAL)
			}
			{
				p.SetState(893)
				p.On_off()
			}

		}

	}
	p.SetState(899)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(898)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// ICreate_tableContext is an interface to support dynamic dispatch.
type ICreate_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ITable_nameContext

	// SetName sets the name rule contexts.
	SetName(ITable_nameContext)

	// IsCreate_tableContext differentiates from other interfaces.
	IsCreate_tableContext()
}

type Create_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   ITable_nameContext
}

func NewEmptyCreate_tableContext() *Create_tableContext {
	var p = new(Create_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_create_table
	return p
}

func (*Create_tableContext) IsCreate_tableContext() {}

func NewCreate_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_tableContext {
	var p = new(Create_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_create_table

	return p
}

func (s *Create_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_tableContext) GetName() ITable_nameContext { return s.name }

func (s *Create_tableContext) SetName(v ITable_nameContext) { s.name = v }

func (s *Create_tableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCREATE, 0)
}

func (s *Create_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTABLE, 0)
}

func (s *Create_tableContext) Column_def_table_constraints() IColumn_def_table_constraintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintsContext)
}

func (s *Create_tableContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_tableContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Create_tableContext) AllR_id() []IR_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IR_idContext)(nil)).Elem())
	var tst = make([]IR_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IR_idContext)
		}
	}

	return tst
}

func (s *Create_tableContext) R_id(i int) IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Create_tableContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserDEFAULT)
}

func (s *Create_tableContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT, i)
}

func (s *Create_tableContext) TEXTIMAGE_ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserTEXTIMAGE_ON, 0)
}

func (s *Create_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCreate_table(s)
	}
}

func (s *Create_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCreate_table(s)
	}
}

func (p *tsqlParser) Create_table() (localctx ICreate_tableContext) {
	localctx = NewCreate_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, tsqlParserRULE_create_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(901)
		p.Match(tsqlParserCREATE)
	}
	{
		p.SetState(902)
		p.Match(tsqlParserTABLE)
	}
	{
		p.SetState(903)

		var _x = p.Table_name()

		localctx.(*Create_tableContext).name = _x
	}
	{
		p.SetState(904)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(905)
		p.Column_def_table_constraints()
	}
	p.SetState(907)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCOMMA {
		{
			p.SetState(906)
			p.Match(tsqlParserCOMMA)
		}

	}
	{
		p.SetState(909)
		p.Match(tsqlParserRR_BRACKET)
	}
	p.SetState(913)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(910)
			p.Match(tsqlParserON)
		}
		{
			p.SetState(911)
			p.R_id()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(912)
			p.Match(tsqlParserDEFAULT)
		}

	}
	p.SetState(918)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 123, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(915)
			p.Match(tsqlParserTEXTIMAGE_ON)
		}
		{
			p.SetState(916)
			p.R_id()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 123, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(917)
			p.Match(tsqlParserDEFAULT)
		}

	}
	p.SetState(921)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(920)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// ICreate_viewContext is an interface to support dynamic dispatch.
type ICreate_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_viewContext differentiates from other interfaces.
	IsCreate_viewContext()
}

type Create_viewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_viewContext() *Create_viewContext {
	var p = new(Create_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_create_view
	return p
}

func (*Create_viewContext) IsCreate_viewContext() {}

func NewCreate_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_viewContext {
	var p = new(Create_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_create_view

	return p
}

func (s *Create_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_viewContext) CREATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCREATE, 0)
}

func (s *Create_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(tsqlParserVIEW, 0)
}

func (s *Create_viewContext) Simple_name() ISimple_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_nameContext)
}

func (s *Create_viewContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Create_viewContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Create_viewContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Create_viewContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserWITH)
}

func (s *Create_viewContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, i)
}

func (s *Create_viewContext) AllView_attribute() []IView_attributeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IView_attributeContext)(nil)).Elem())
	var tst = make([]IView_attributeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IView_attributeContext)
		}
	}

	return tst
}

func (s *Create_viewContext) View_attribute(i int) IView_attributeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IView_attributeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IView_attributeContext)
}

func (s *Create_viewContext) CHECK() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECK, 0)
}

func (s *Create_viewContext) OPTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPTION, 0)
}

func (s *Create_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCreate_view(s)
	}
}

func (s *Create_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCreate_view(s)
	}
}

func (p *tsqlParser) Create_view() (localctx ICreate_viewContext) {
	localctx = NewCreate_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, tsqlParserRULE_create_view)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(923)
		p.Match(tsqlParserCREATE)
	}
	{
		p.SetState(924)
		p.Match(tsqlParserVIEW)
	}
	{
		p.SetState(925)
		p.Simple_name()
	}
	p.SetState(930)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserLR_BRACKET {
		{
			p.SetState(926)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(927)
			p.Column_name_list()
		}
		{
			p.SetState(928)
			p.Match(tsqlParserRR_BRACKET)
		}

	}
	p.SetState(941)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH {
		{
			p.SetState(932)
			p.Match(tsqlParserWITH)
		}
		{
			p.SetState(933)
			p.View_attribute()
		}
		p.SetState(938)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(934)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(935)
				p.View_attribute()
			}

			p.SetState(940)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(943)
		p.Match(tsqlParserAS)
	}
	{
		p.SetState(944)
		p.Select_statement()
	}
	p.SetState(948)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(945)
			p.Match(tsqlParserWITH)
		}
		{
			p.SetState(946)
			p.Match(tsqlParserCHECK)
		}
		{
			p.SetState(947)
			p.Match(tsqlParserOPTION)
		}

	}
	p.SetState(951)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(950)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IView_attributeContext is an interface to support dynamic dispatch.
type IView_attributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsView_attributeContext differentiates from other interfaces.
	IsView_attributeContext()
}

type View_attributeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyView_attributeContext() *View_attributeContext {
	var p = new(View_attributeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_view_attribute
	return p
}

func (*View_attributeContext) IsView_attributeContext() {}

func NewView_attributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *View_attributeContext {
	var p = new(View_attributeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_view_attribute

	return p
}

func (s *View_attributeContext) GetParser() antlr.Parser { return s.parser }

func (s *View_attributeContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserENCRYPTION, 0)
}

func (s *View_attributeContext) SCHEMABINDING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSCHEMABINDING, 0)
}

func (s *View_attributeContext) VIEW_METADATA() antlr.TerminalNode {
	return s.GetToken(tsqlParserVIEW_METADATA, 0)
}

func (s *View_attributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *View_attributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *View_attributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterView_attribute(s)
	}
}

func (s *View_attributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitView_attribute(s)
	}
}

func (p *tsqlParser) View_attribute() (localctx IView_attributeContext) {
	localctx = NewView_attributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, tsqlParserRULE_view_attribute)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(953)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserENCRYPTION || _la == tsqlParserSCHEMABINDING || _la == tsqlParserVIEW_METADATA) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IAlter_tableContext is an interface to support dynamic dispatch.
type IAlter_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConstraint returns the constraint rule contexts.
	GetConstraint() IR_idContext

	// GetFk returns the fk rule contexts.
	GetFk() IColumn_name_listContext

	// GetPk returns the pk rule contexts.
	GetPk() IColumn_name_listContext

	// SetConstraint sets the constraint rule contexts.
	SetConstraint(IR_idContext)

	// SetFk sets the fk rule contexts.
	SetFk(IColumn_name_listContext)

	// SetPk sets the pk rule contexts.
	SetPk(IColumn_name_listContext)

	// IsAlter_tableContext differentiates from other interfaces.
	IsAlter_tableContext()
}

type Alter_tableContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	constraint IR_idContext
	fk         IColumn_name_listContext
	pk         IColumn_name_listContext
}

func NewEmptyAlter_tableContext() *Alter_tableContext {
	var p = new(Alter_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_alter_table
	return p
}

func (*Alter_tableContext) IsAlter_tableContext() {}

func NewAlter_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_tableContext {
	var p = new(Alter_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_alter_table

	return p
}

func (s *Alter_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_tableContext) GetConstraint() IR_idContext { return s.constraint }

func (s *Alter_tableContext) GetFk() IColumn_name_listContext { return s.fk }

func (s *Alter_tableContext) GetPk() IColumn_name_listContext { return s.pk }

func (s *Alter_tableContext) SetConstraint(v IR_idContext) { s.constraint = v }

func (s *Alter_tableContext) SetFk(v IColumn_name_listContext) { s.fk = v }

func (s *Alter_tableContext) SetPk(v IColumn_name_listContext) { s.pk = v }

func (s *Alter_tableContext) ALTER() antlr.TerminalNode {
	return s.GetToken(tsqlParserALTER, 0)
}

func (s *Alter_tableContext) AllTABLE() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserTABLE)
}

func (s *Alter_tableContext) TABLE(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserTABLE, i)
}

func (s *Alter_tableContext) AllTable_name() []ITable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_nameContext)(nil)).Elem())
	var tst = make([]ITable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_nameContext)
		}
	}

	return tst
}

func (s *Alter_tableContext) Table_name(i int) ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Alter_tableContext) SET() antlr.TerminalNode {
	return s.GetToken(tsqlParserSET, 0)
}

func (s *Alter_tableContext) LOCK_ESCALATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCK_ESCALATION, 0)
}

func (s *Alter_tableContext) ADD() antlr.TerminalNode {
	return s.GetToken(tsqlParserADD, 0)
}

func (s *Alter_tableContext) Column_def_table_constraint() IColumn_def_table_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintContext)
}

func (s *Alter_tableContext) DROP() antlr.TerminalNode {
	return s.GetToken(tsqlParserDROP, 0)
}

func (s *Alter_tableContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONSTRAINT, 0)
}

func (s *Alter_tableContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Alter_tableContext) CHECK() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECK, 0)
}

func (s *Alter_tableContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOREIGN, 0)
}

func (s *Alter_tableContext) KEY() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEY, 0)
}

func (s *Alter_tableContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(tsqlParserREFERENCES, 0)
}

func (s *Alter_tableContext) AUTO() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO, 0)
}

func (s *Alter_tableContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDISABLE, 0)
}

func (s *Alter_tableContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Alter_tableContext) AllColumn_name_list() []IColumn_name_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem())
	var tst = make([]IColumn_name_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_name_listContext)
		}
	}

	return tst
}

func (s *Alter_tableContext) Column_name_list(i int) IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Alter_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterAlter_table(s)
	}
}

func (s *Alter_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitAlter_table(s)
	}
}

func (p *tsqlParser) Alter_table() (localctx IAlter_tableContext) {
	localctx = NewAlter_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, tsqlParserRULE_alter_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(955)
		p.Match(tsqlParserALTER)
	}
	{
		p.SetState(956)
		p.Match(tsqlParserTABLE)
	}
	{
		p.SetState(957)
		p.Table_name()
	}
	p.SetState(988)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserSET:
		{
			p.SetState(958)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(959)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(960)
			p.Match(tsqlParserLOCK_ESCALATION)
		}
		{
			p.SetState(961)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(962)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserTABLE || _la == tsqlParserAUTO || _la == tsqlParserDISABLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(963)
			p.Match(tsqlParserRR_BRACKET)
		}

	case tsqlParserADD:
		{
			p.SetState(964)
			p.Match(tsqlParserADD)
		}
		{
			p.SetState(965)
			p.Column_def_table_constraint()
		}

	case tsqlParserDROP:
		{
			p.SetState(966)
			p.Match(tsqlParserDROP)
		}
		{
			p.SetState(967)
			p.Match(tsqlParserCONSTRAINT)
		}
		{
			p.SetState(968)

			var _x = p.R_id()

			localctx.(*Alter_tableContext).constraint = _x
		}

	case tsqlParserWITH:
		{
			p.SetState(969)
			p.Match(tsqlParserWITH)
		}
		{
			p.SetState(970)
			p.Match(tsqlParserCHECK)
		}
		{
			p.SetState(971)
			p.Match(tsqlParserADD)
		}
		{
			p.SetState(972)
			p.Match(tsqlParserCONSTRAINT)
		}
		{
			p.SetState(973)

			var _x = p.R_id()

			localctx.(*Alter_tableContext).constraint = _x
		}
		{
			p.SetState(974)
			p.Match(tsqlParserFOREIGN)
		}
		{
			p.SetState(975)
			p.Match(tsqlParserKEY)
		}
		{
			p.SetState(976)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(977)

			var _x = p.Column_name_list()

			localctx.(*Alter_tableContext).fk = _x
		}
		{
			p.SetState(978)
			p.Match(tsqlParserRR_BRACKET)
		}
		{
			p.SetState(979)
			p.Match(tsqlParserREFERENCES)
		}
		{
			p.SetState(980)
			p.Table_name()
		}
		{
			p.SetState(981)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(982)

			var _x = p.Column_name_list()

			localctx.(*Alter_tableContext).pk = _x
		}
		{
			p.SetState(983)
			p.Match(tsqlParserRR_BRACKET)
		}

	case tsqlParserCHECK:
		{
			p.SetState(985)
			p.Match(tsqlParserCHECK)
		}
		{
			p.SetState(986)
			p.Match(tsqlParserCONSTRAINT)
		}
		{
			p.SetState(987)

			var _x = p.R_id()

			localctx.(*Alter_tableContext).constraint = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(991)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(990)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IAlter_databaseContext is an interface to support dynamic dispatch.
type IAlter_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase returns the database rule contexts.
	GetDatabase() IR_idContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IR_idContext

	// GetCollation returns the collation rule contexts.
	GetCollation() IR_idContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IR_idContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IR_idContext)

	// SetCollation sets the collation rule contexts.
	SetCollation(IR_idContext)

	// IsAlter_databaseContext differentiates from other interfaces.
	IsAlter_databaseContext()
}

type Alter_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	database  IR_idContext
	new_name  IR_idContext
	collation IR_idContext
}

func NewEmptyAlter_databaseContext() *Alter_databaseContext {
	var p = new(Alter_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_alter_database
	return p
}

func (*Alter_databaseContext) IsAlter_databaseContext() {}

func NewAlter_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_databaseContext {
	var p = new(Alter_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_alter_database

	return p
}

func (s *Alter_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_databaseContext) GetDatabase() IR_idContext { return s.database }

func (s *Alter_databaseContext) GetNew_name() IR_idContext { return s.new_name }

func (s *Alter_databaseContext) GetCollation() IR_idContext { return s.collation }

func (s *Alter_databaseContext) SetDatabase(v IR_idContext) { s.database = v }

func (s *Alter_databaseContext) SetNew_name(v IR_idContext) { s.new_name = v }

func (s *Alter_databaseContext) SetCollation(v IR_idContext) { s.collation = v }

func (s *Alter_databaseContext) ALTER() antlr.TerminalNode {
	return s.GetToken(tsqlParserALTER, 0)
}

func (s *Alter_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDATABASE, 0)
}

func (s *Alter_databaseContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURRENT, 0)
}

func (s *Alter_databaseContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(tsqlParserMODIFY, 0)
}

func (s *Alter_databaseContext) NAME() antlr.TerminalNode {
	return s.GetToken(tsqlParserNAME, 0)
}

func (s *Alter_databaseContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOLLATE, 0)
}

func (s *Alter_databaseContext) SET() antlr.TerminalNode {
	return s.GetToken(tsqlParserSET, 0)
}

func (s *Alter_databaseContext) Database_optionspec() IDatabase_optionspecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_optionspecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_optionspecContext)
}

func (s *Alter_databaseContext) AllR_id() []IR_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IR_idContext)(nil)).Elem())
	var tst = make([]IR_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IR_idContext)
		}
	}

	return tst
}

func (s *Alter_databaseContext) R_id(i int) IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Alter_databaseContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Alter_databaseContext) Termination() ITerminationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITerminationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITerminationContext)
}

func (s *Alter_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterAlter_database(s)
	}
}

func (s *Alter_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitAlter_database(s)
	}
}

func (p *tsqlParser) Alter_database() (localctx IAlter_databaseContext) {
	localctx = NewAlter_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, tsqlParserRULE_alter_database)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(993)
		p.Match(tsqlParserALTER)
	}
	{
		p.SetState(994)
		p.Match(tsqlParserDATABASE)
	}
	p.SetState(997)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		{
			p.SetState(995)

			var _x = p.R_id()

			localctx.(*Alter_databaseContext).database = _x
		}

	case tsqlParserCURRENT:
		{
			p.SetState(996)
			p.Match(tsqlParserCURRENT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1011)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserMODIFY:
		{
			p.SetState(999)
			p.Match(tsqlParserMODIFY)
		}
		{
			p.SetState(1000)
			p.Match(tsqlParserNAME)
		}
		{
			p.SetState(1001)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1002)

			var _x = p.R_id()

			localctx.(*Alter_databaseContext).new_name = _x
		}

	case tsqlParserCOLLATE:
		{
			p.SetState(1003)
			p.Match(tsqlParserCOLLATE)
		}
		{
			p.SetState(1004)

			var _x = p.R_id()

			localctx.(*Alter_databaseContext).collation = _x
		}

	case tsqlParserSET:
		{
			p.SetState(1005)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1006)
			p.Database_optionspec()
		}
		p.SetState(1009)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1007)
				p.Match(tsqlParserWITH)
			}
			{
				p.SetState(1008)
				p.Termination()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1014)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1013)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IDatabase_optionspecContext is an interface to support dynamic dispatch.
type IDatabase_optionspecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatabase_optionspecContext differentiates from other interfaces.
	IsDatabase_optionspecContext()
}

type Database_optionspecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabase_optionspecContext() *Database_optionspecContext {
	var p = new(Database_optionspecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_database_optionspec
	return p
}

func (*Database_optionspecContext) IsDatabase_optionspecContext() {}

func NewDatabase_optionspecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Database_optionspecContext {
	var p = new(Database_optionspecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_database_optionspec

	return p
}

func (s *Database_optionspecContext) GetParser() antlr.Parser { return s.parser }

func (s *Database_optionspecContext) Auto_option() IAuto_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAuto_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAuto_optionContext)
}

func (s *Database_optionspecContext) Change_tracking_option() IChange_tracking_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChange_tracking_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChange_tracking_optionContext)
}

func (s *Database_optionspecContext) Containment_option() IContainment_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContainment_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContainment_optionContext)
}

func (s *Database_optionspecContext) Cursor_option() ICursor_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_optionContext)
}

func (s *Database_optionspecContext) Date_correlation_optimization_option() IDate_correlation_optimization_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDate_correlation_optimization_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDate_correlation_optimization_optionContext)
}

func (s *Database_optionspecContext) Db_encryption_option() IDb_encryption_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDb_encryption_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDb_encryption_optionContext)
}

func (s *Database_optionspecContext) Db_state_option() IDb_state_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDb_state_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDb_state_optionContext)
}

func (s *Database_optionspecContext) Db_update_option() IDb_update_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDb_update_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDb_update_optionContext)
}

func (s *Database_optionspecContext) Db_user_access_option() IDb_user_access_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDb_user_access_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDb_user_access_optionContext)
}

func (s *Database_optionspecContext) Delayed_durability_option() IDelayed_durability_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelayed_durability_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelayed_durability_optionContext)
}

func (s *Database_optionspecContext) External_access_option() IExternal_access_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExternal_access_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExternal_access_optionContext)
}

func (s *Database_optionspecContext) FILESTREAM() antlr.TerminalNode {
	return s.GetToken(tsqlParserFILESTREAM, 0)
}

func (s *Database_optionspecContext) Database_filestream_option() IDatabase_filestream_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_filestream_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_filestream_optionContext)
}

func (s *Database_optionspecContext) HADR_options() antlr.TerminalNode {
	return s.GetToken(tsqlParserHADR_options, 0)
}

func (s *Database_optionspecContext) Mixed_page_allocation_option() IMixed_page_allocation_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMixed_page_allocation_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMixed_page_allocation_optionContext)
}

func (s *Database_optionspecContext) Parameterization_option() IParameterization_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterization_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterization_optionContext)
}

func (s *Database_optionspecContext) Recovery_option() IRecovery_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRecovery_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRecovery_optionContext)
}

func (s *Database_optionspecContext) Service_broker_option() IService_broker_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IService_broker_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IService_broker_optionContext)
}

func (s *Database_optionspecContext) Snapshot_option() ISnapshot_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISnapshot_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISnapshot_optionContext)
}

func (s *Database_optionspecContext) Sql_option() ISql_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_optionContext)
}

func (s *Database_optionspecContext) Target_recovery_time_option() ITarget_recovery_time_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITarget_recovery_time_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITarget_recovery_time_optionContext)
}

func (s *Database_optionspecContext) Termination() ITerminationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITerminationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITerminationContext)
}

func (s *Database_optionspecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Database_optionspecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Database_optionspecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDatabase_optionspec(s)
	}
}

func (s *Database_optionspecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDatabase_optionspec(s)
	}
}

func (p *tsqlParser) Database_optionspec() (localctx IDatabase_optionspecContext) {
	localctx = NewDatabase_optionspecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, tsqlParserRULE_database_optionspec)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1038)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 136, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1016)
			p.Auto_option()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1017)
			p.Change_tracking_option()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1018)
			p.Containment_option()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1019)
			p.Cursor_option()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1020)
			p.Date_correlation_optimization_option()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1021)
			p.Db_encryption_option()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1022)
			p.Db_state_option()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1023)
			p.Db_update_option()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1024)
			p.Db_user_access_option()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1025)
			p.Delayed_durability_option()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1026)
			p.External_access_option()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1027)
			p.Match(tsqlParserFILESTREAM)
		}
		{
			p.SetState(1028)
			p.Database_filestream_option()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1029)
			p.Match(tsqlParserHADR_options)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1030)
			p.Mixed_page_allocation_option()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1031)
			p.Parameterization_option()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1032)
			p.Recovery_option()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1033)
			p.Service_broker_option()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1034)
			p.Snapshot_option()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1035)
			p.Sql_option()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1036)
			p.Target_recovery_time_option()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1037)
			p.Termination()
		}

	}

	return localctx
}

// IAuto_optionContext is an interface to support dynamic dispatch.
type IAuto_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAuto_optionContext differentiates from other interfaces.
	IsAuto_optionContext()
}

type Auto_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAuto_optionContext() *Auto_optionContext {
	var p = new(Auto_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_auto_option
	return p
}

func (*Auto_optionContext) IsAuto_optionContext() {}

func NewAuto_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Auto_optionContext {
	var p = new(Auto_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_auto_option

	return p
}

func (s *Auto_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Auto_optionContext) AUTO_CLOSE() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO_CLOSE, 0)
}

func (s *Auto_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Auto_optionContext) AUTO_CREATE_STATISTICS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO_CREATE_STATISTICS, 0)
}

func (s *Auto_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *Auto_optionContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserON)
}

func (s *Auto_optionContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserON, i)
}

func (s *Auto_optionContext) INCREMENTAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserINCREMENTAL, 0)
}

func (s *Auto_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Auto_optionContext) AUTO_SHRINK() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO_SHRINK, 0)
}

func (s *Auto_optionContext) AUTO_UPDATE_STATISTICS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO_UPDATE_STATISTICS, 0)
}

func (s *Auto_optionContext) AUTO_UPDATE_STATISTICS_ASYNC() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO_UPDATE_STATISTICS_ASYNC, 0)
}

func (s *Auto_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Auto_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Auto_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterAuto_option(s)
	}
}

func (s *Auto_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitAuto_option(s)
	}
}

func (p *tsqlParser) Auto_option() (localctx IAuto_optionContext) {
	localctx = NewAuto_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, tsqlParserRULE_auto_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1057)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserAUTO_CLOSE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1040)
			p.Match(tsqlParserAUTO_CLOSE)
		}
		{
			p.SetState(1041)
			p.On_off()
		}

	case tsqlParserAUTO_CREATE_STATISTICS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1042)
			p.Match(tsqlParserAUTO_CREATE_STATISTICS)
		}
		{
			p.SetState(1043)
			p.Match(tsqlParserOFF)
		}

	case tsqlParserON:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1044)
			p.Match(tsqlParserON)
		}
		p.SetState(1049)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserINCREMENTAL:
			{
				p.SetState(1045)
				p.Match(tsqlParserINCREMENTAL)
			}
			{
				p.SetState(1046)
				p.Match(tsqlParserEQUAL)
			}
			{
				p.SetState(1047)
				p.Match(tsqlParserON)
			}

		case tsqlParserOFF:
			{
				p.SetState(1048)
				p.Match(tsqlParserOFF)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case tsqlParserAUTO_SHRINK:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1051)
			p.Match(tsqlParserAUTO_SHRINK)
		}
		{
			p.SetState(1052)
			p.On_off()
		}

	case tsqlParserAUTO_UPDATE_STATISTICS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1053)
			p.Match(tsqlParserAUTO_UPDATE_STATISTICS)
		}
		{
			p.SetState(1054)
			p.On_off()
		}

	case tsqlParserAUTO_UPDATE_STATISTICS_ASYNC:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1055)
			p.Match(tsqlParserAUTO_UPDATE_STATISTICS_ASYNC)
		}
		{
			p.SetState(1056)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserOFF || _la == tsqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IChange_tracking_optionContext is an interface to support dynamic dispatch.
type IChange_tracking_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChange_tracking_optionContext differentiates from other interfaces.
	IsChange_tracking_optionContext()
}

type Change_tracking_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChange_tracking_optionContext() *Change_tracking_optionContext {
	var p = new(Change_tracking_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_change_tracking_option
	return p
}

func (*Change_tracking_optionContext) IsChange_tracking_optionContext() {}

func NewChange_tracking_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Change_tracking_optionContext {
	var p = new(Change_tracking_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_change_tracking_option

	return p
}

func (s *Change_tracking_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Change_tracking_optionContext) CHANGE_TRACKING() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHANGE_TRACKING, 0)
}

func (s *Change_tracking_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Change_tracking_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *Change_tracking_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Change_tracking_optionContext) AllChange_tracking_option_list() []IChange_tracking_option_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IChange_tracking_option_listContext)(nil)).Elem())
	var tst = make([]IChange_tracking_option_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IChange_tracking_option_listContext)
		}
	}

	return tst
}

func (s *Change_tracking_optionContext) Change_tracking_option_list(i int) IChange_tracking_option_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChange_tracking_option_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IChange_tracking_option_listContext)
}

func (s *Change_tracking_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Change_tracking_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Change_tracking_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterChange_tracking_option(s)
	}
}

func (s *Change_tracking_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitChange_tracking_option(s)
	}
}

func (p *tsqlParser) Change_tracking_option() (localctx IChange_tracking_optionContext) {
	localctx = NewChange_tracking_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, tsqlParserRULE_change_tracking_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1059)
		p.Match(tsqlParserCHANGE_TRACKING)
	}
	{
		p.SetState(1060)
		p.Match(tsqlParserEQUAL)
	}
	p.SetState(1076)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserOFF:
		{
			p.SetState(1061)
			p.Match(tsqlParserOFF)
		}

	case tsqlParserON:
		{
			p.SetState(1062)
			p.Match(tsqlParserON)
		}
		p.SetState(1073)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserAUTO_CLEANUP || _la == tsqlParserCHANGE_RETENTION {
			{
				p.SetState(1063)
				p.Change_tracking_option_list()
			}
			p.SetState(1068)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == tsqlParserCOMMA {
				{
					p.SetState(1064)
					p.Match(tsqlParserCOMMA)
				}
				{
					p.SetState(1065)
					p.Change_tracking_option_list()
				}

				p.SetState(1070)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

			p.SetState(1075)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IChange_tracking_option_listContext is an interface to support dynamic dispatch.
type IChange_tracking_option_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChange_tracking_option_listContext differentiates from other interfaces.
	IsChange_tracking_option_listContext()
}

type Change_tracking_option_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChange_tracking_option_listContext() *Change_tracking_option_listContext {
	var p = new(Change_tracking_option_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_change_tracking_option_list
	return p
}

func (*Change_tracking_option_listContext) IsChange_tracking_option_listContext() {}

func NewChange_tracking_option_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Change_tracking_option_listContext {
	var p = new(Change_tracking_option_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_change_tracking_option_list

	return p
}

func (s *Change_tracking_option_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Change_tracking_option_listContext) AUTO_CLEANUP() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO_CLEANUP, 0)
}

func (s *Change_tracking_option_listContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Change_tracking_option_listContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Change_tracking_option_listContext) CHANGE_RETENTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHANGE_RETENTION, 0)
}

func (s *Change_tracking_option_listContext) DAYS() antlr.TerminalNode {
	return s.GetToken(tsqlParserDAYS, 0)
}

func (s *Change_tracking_option_listContext) HOURS() antlr.TerminalNode {
	return s.GetToken(tsqlParserHOURS, 0)
}

func (s *Change_tracking_option_listContext) MINUTES() antlr.TerminalNode {
	return s.GetToken(tsqlParserMINUTES, 0)
}

func (s *Change_tracking_option_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Change_tracking_option_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Change_tracking_option_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterChange_tracking_option_list(s)
	}
}

func (s *Change_tracking_option_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitChange_tracking_option_list(s)
	}
}

func (p *tsqlParser) Change_tracking_option_list() (localctx IChange_tracking_option_listContext) {
	localctx = NewChange_tracking_option_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, tsqlParserRULE_change_tracking_option_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1084)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserAUTO_CLEANUP:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1078)
			p.Match(tsqlParserAUTO_CLEANUP)
		}
		{
			p.SetState(1079)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1080)
			p.On_off()
		}

	case tsqlParserCHANGE_RETENTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1081)
			p.Match(tsqlParserCHANGE_RETENTION)
		}
		{
			p.SetState(1082)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1083)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserDAYS || _la == tsqlParserHOURS || _la == tsqlParserMINUTES) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IContainment_optionContext is an interface to support dynamic dispatch.
type IContainment_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContainment_optionContext differentiates from other interfaces.
	IsContainment_optionContext()
}

type Containment_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContainment_optionContext() *Containment_optionContext {
	var p = new(Containment_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_containment_option
	return p
}

func (*Containment_optionContext) IsContainment_optionContext() {}

func NewContainment_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Containment_optionContext {
	var p = new(Containment_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_containment_option

	return p
}

func (s *Containment_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Containment_optionContext) CONTAINMENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONTAINMENT, 0)
}

func (s *Containment_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Containment_optionContext) NONE() antlr.TerminalNode {
	return s.GetToken(tsqlParserNONE, 0)
}

func (s *Containment_optionContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserPARTIAL, 0)
}

func (s *Containment_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Containment_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Containment_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterContainment_option(s)
	}
}

func (s *Containment_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitContainment_option(s)
	}
}

func (p *tsqlParser) Containment_option() (localctx IContainment_optionContext) {
	localctx = NewContainment_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, tsqlParserRULE_containment_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1086)
		p.Match(tsqlParserCONTAINMENT)
	}
	{
		p.SetState(1087)
		p.Match(tsqlParserEQUAL)
	}
	{
		p.SetState(1088)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserNONE || _la == tsqlParserPARTIAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICursor_optionContext is an interface to support dynamic dispatch.
type ICursor_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursor_optionContext differentiates from other interfaces.
	IsCursor_optionContext()
}

type Cursor_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursor_optionContext() *Cursor_optionContext {
	var p = new(Cursor_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_cursor_option
	return p
}

func (*Cursor_optionContext) IsCursor_optionContext() {}

func NewCursor_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cursor_optionContext {
	var p = new(Cursor_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_cursor_option

	return p
}

func (s *Cursor_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Cursor_optionContext) CURSOR_CLOSE_ON_COMMIT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURSOR_CLOSE_ON_COMMIT, 0)
}

func (s *Cursor_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Cursor_optionContext) CURSOR_DEFAULT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURSOR_DEFAULT, 0)
}

func (s *Cursor_optionContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL, 0)
}

func (s *Cursor_optionContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserGLOBAL, 0)
}

func (s *Cursor_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cursor_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cursor_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCursor_option(s)
	}
}

func (s *Cursor_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCursor_option(s)
	}
}

func (p *tsqlParser) Cursor_option() (localctx ICursor_optionContext) {
	localctx = NewCursor_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, tsqlParserRULE_cursor_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1094)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserCURSOR_CLOSE_ON_COMMIT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1090)
			p.Match(tsqlParserCURSOR_CLOSE_ON_COMMIT)
		}
		{
			p.SetState(1091)
			p.On_off()
		}

	case tsqlParserCURSOR_DEFAULT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1092)
			p.Match(tsqlParserCURSOR_DEFAULT)
		}
		{
			p.SetState(1093)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserGLOBAL || _la == tsqlParserLOCAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDate_correlation_optimization_optionContext is an interface to support dynamic dispatch.
type IDate_correlation_optimization_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDate_correlation_optimization_optionContext differentiates from other interfaces.
	IsDate_correlation_optimization_optionContext()
}

type Date_correlation_optimization_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDate_correlation_optimization_optionContext() *Date_correlation_optimization_optionContext {
	var p = new(Date_correlation_optimization_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_date_correlation_optimization_option
	return p
}

func (*Date_correlation_optimization_optionContext) IsDate_correlation_optimization_optionContext() {}

func NewDate_correlation_optimization_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Date_correlation_optimization_optionContext {
	var p = new(Date_correlation_optimization_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_date_correlation_optimization_option

	return p
}

func (s *Date_correlation_optimization_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Date_correlation_optimization_optionContext) DATE_CORRELATION_OPTIMIZATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserDATE_CORRELATION_OPTIMIZATION, 0)
}

func (s *Date_correlation_optimization_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Date_correlation_optimization_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Date_correlation_optimization_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Date_correlation_optimization_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDate_correlation_optimization_option(s)
	}
}

func (s *Date_correlation_optimization_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDate_correlation_optimization_option(s)
	}
}

func (p *tsqlParser) Date_correlation_optimization_option() (localctx IDate_correlation_optimization_optionContext) {
	localctx = NewDate_correlation_optimization_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, tsqlParserRULE_date_correlation_optimization_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1096)
		p.Match(tsqlParserDATE_CORRELATION_OPTIMIZATION)
	}
	{
		p.SetState(1097)
		p.On_off()
	}

	return localctx
}

// IDb_encryption_optionContext is an interface to support dynamic dispatch.
type IDb_encryption_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDb_encryption_optionContext differentiates from other interfaces.
	IsDb_encryption_optionContext()
}

type Db_encryption_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDb_encryption_optionContext() *Db_encryption_optionContext {
	var p = new(Db_encryption_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_db_encryption_option
	return p
}

func (*Db_encryption_optionContext) IsDb_encryption_optionContext() {}

func NewDb_encryption_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Db_encryption_optionContext {
	var p = new(Db_encryption_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_db_encryption_option

	return p
}

func (s *Db_encryption_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Db_encryption_optionContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserENCRYPTION, 0)
}

func (s *Db_encryption_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Db_encryption_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Db_encryption_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Db_encryption_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDb_encryption_option(s)
	}
}

func (s *Db_encryption_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDb_encryption_option(s)
	}
}

func (p *tsqlParser) Db_encryption_option() (localctx IDb_encryption_optionContext) {
	localctx = NewDb_encryption_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, tsqlParserRULE_db_encryption_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1099)
		p.Match(tsqlParserENCRYPTION)
	}
	{
		p.SetState(1100)
		p.On_off()
	}

	return localctx
}

// IDb_state_optionContext is an interface to support dynamic dispatch.
type IDb_state_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDb_state_optionContext differentiates from other interfaces.
	IsDb_state_optionContext()
}

type Db_state_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDb_state_optionContext() *Db_state_optionContext {
	var p = new(Db_state_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_db_state_option
	return p
}

func (*Db_state_optionContext) IsDb_state_optionContext() {}

func NewDb_state_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Db_state_optionContext {
	var p = new(Db_state_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_db_state_option

	return p
}

func (s *Db_state_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Db_state_optionContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(tsqlParserONLINE, 0)
}

func (s *Db_state_optionContext) OFFLINE() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFFLINE, 0)
}

func (s *Db_state_optionContext) EMERGENCY() antlr.TerminalNode {
	return s.GetToken(tsqlParserEMERGENCY, 0)
}

func (s *Db_state_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Db_state_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Db_state_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDb_state_option(s)
	}
}

func (s *Db_state_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDb_state_option(s)
	}
}

func (p *tsqlParser) Db_state_option() (localctx IDb_state_optionContext) {
	localctx = NewDb_state_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, tsqlParserRULE_db_state_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1102)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserEMERGENCY || _la == tsqlParserOFFLINE || _la == tsqlParserONLINE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDb_update_optionContext is an interface to support dynamic dispatch.
type IDb_update_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDb_update_optionContext differentiates from other interfaces.
	IsDb_update_optionContext()
}

type Db_update_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDb_update_optionContext() *Db_update_optionContext {
	var p = new(Db_update_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_db_update_option
	return p
}

func (*Db_update_optionContext) IsDb_update_optionContext() {}

func NewDb_update_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Db_update_optionContext {
	var p = new(Db_update_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_db_update_option

	return p
}

func (s *Db_update_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Db_update_optionContext) READ_ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD_ONLY, 0)
}

func (s *Db_update_optionContext) READ_WRITE() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD_WRITE, 0)
}

func (s *Db_update_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Db_update_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Db_update_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDb_update_option(s)
	}
}

func (s *Db_update_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDb_update_option(s)
	}
}

func (p *tsqlParser) Db_update_option() (localctx IDb_update_optionContext) {
	localctx = NewDb_update_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, tsqlParserRULE_db_update_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1104)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserREAD_ONLY || _la == tsqlParserREAD_WRITE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDb_user_access_optionContext is an interface to support dynamic dispatch.
type IDb_user_access_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDb_user_access_optionContext differentiates from other interfaces.
	IsDb_user_access_optionContext()
}

type Db_user_access_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDb_user_access_optionContext() *Db_user_access_optionContext {
	var p = new(Db_user_access_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_db_user_access_option
	return p
}

func (*Db_user_access_optionContext) IsDb_user_access_optionContext() {}

func NewDb_user_access_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Db_user_access_optionContext {
	var p = new(Db_user_access_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_db_user_access_option

	return p
}

func (s *Db_user_access_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Db_user_access_optionContext) SINGLE_USER() antlr.TerminalNode {
	return s.GetToken(tsqlParserSINGLE_USER, 0)
}

func (s *Db_user_access_optionContext) RESTRICTED_USER() antlr.TerminalNode {
	return s.GetToken(tsqlParserRESTRICTED_USER, 0)
}

func (s *Db_user_access_optionContext) MULTI_USER() antlr.TerminalNode {
	return s.GetToken(tsqlParserMULTI_USER, 0)
}

func (s *Db_user_access_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Db_user_access_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Db_user_access_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDb_user_access_option(s)
	}
}

func (s *Db_user_access_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDb_user_access_option(s)
	}
}

func (p *tsqlParser) Db_user_access_option() (localctx IDb_user_access_optionContext) {
	localctx = NewDb_user_access_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, tsqlParserRULE_db_user_access_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1106)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserMULTI_USER || _la == tsqlParserRESTRICTED_USER || _la == tsqlParserSINGLE_USER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDelayed_durability_optionContext is an interface to support dynamic dispatch.
type IDelayed_durability_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelayed_durability_optionContext differentiates from other interfaces.
	IsDelayed_durability_optionContext()
}

type Delayed_durability_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelayed_durability_optionContext() *Delayed_durability_optionContext {
	var p = new(Delayed_durability_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_delayed_durability_option
	return p
}

func (*Delayed_durability_optionContext) IsDelayed_durability_optionContext() {}

func NewDelayed_durability_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delayed_durability_optionContext {
	var p = new(Delayed_durability_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_delayed_durability_option

	return p
}

func (s *Delayed_durability_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Delayed_durability_optionContext) DELAYED_DURABILITY() antlr.TerminalNode {
	return s.GetToken(tsqlParserDELAYED_DURABILITY, 0)
}

func (s *Delayed_durability_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Delayed_durability_optionContext) DISABLED() antlr.TerminalNode {
	return s.GetToken(tsqlParserDISABLED, 0)
}

func (s *Delayed_durability_optionContext) ALLOWED() antlr.TerminalNode {
	return s.GetToken(tsqlParserALLOWED, 0)
}

func (s *Delayed_durability_optionContext) FORCED() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORCED, 0)
}

func (s *Delayed_durability_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delayed_durability_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delayed_durability_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDelayed_durability_option(s)
	}
}

func (s *Delayed_durability_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDelayed_durability_option(s)
	}
}

func (p *tsqlParser) Delayed_durability_option() (localctx IDelayed_durability_optionContext) {
	localctx = NewDelayed_durability_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, tsqlParserRULE_delayed_durability_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1108)
		p.Match(tsqlParserDELAYED_DURABILITY)
	}
	{
		p.SetState(1109)
		p.Match(tsqlParserEQUAL)
	}
	{
		p.SetState(1110)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserALLOWED || _la == tsqlParserDISABLED || _la == tsqlParserFORCED) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IExternal_access_optionContext is an interface to support dynamic dispatch.
type IExternal_access_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExternal_access_optionContext differentiates from other interfaces.
	IsExternal_access_optionContext()
}

type External_access_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExternal_access_optionContext() *External_access_optionContext {
	var p = new(External_access_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_external_access_option
	return p
}

func (*External_access_optionContext) IsExternal_access_optionContext() {}

func NewExternal_access_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *External_access_optionContext {
	var p = new(External_access_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_external_access_option

	return p
}

func (s *External_access_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *External_access_optionContext) DB_CHAINING() antlr.TerminalNode {
	return s.GetToken(tsqlParserDB_CHAINING, 0)
}

func (s *External_access_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *External_access_optionContext) TRUSTWORTHY() antlr.TerminalNode {
	return s.GetToken(tsqlParserTRUSTWORTHY, 0)
}

func (s *External_access_optionContext) DEFAULT_LANGUAGE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT_LANGUAGE, 0)
}

func (s *External_access_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *External_access_optionContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *External_access_optionContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *External_access_optionContext) DEFAULT_FULLTEXT_LANGUAGE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT_FULLTEXT_LANGUAGE, 0)
}

func (s *External_access_optionContext) NESTED_TRIGGERS() antlr.TerminalNode {
	return s.GetToken(tsqlParserNESTED_TRIGGERS, 0)
}

func (s *External_access_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *External_access_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *External_access_optionContext) TRANSFORM_NOISE_WORDS() antlr.TerminalNode {
	return s.GetToken(tsqlParserTRANSFORM_NOISE_WORDS, 0)
}

func (s *External_access_optionContext) TWO_DIGIT_YEAR_CUTOFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserTWO_DIGIT_YEAR_CUTOFF, 0)
}

func (s *External_access_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *External_access_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *External_access_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *External_access_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterExternal_access_option(s)
	}
}

func (s *External_access_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitExternal_access_option(s)
	}
}

func (p *tsqlParser) External_access_option() (localctx IExternal_access_optionContext) {
	localctx = NewExternal_access_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, tsqlParserRULE_external_access_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1137)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserDB_CHAINING:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1112)
			p.Match(tsqlParserDB_CHAINING)
		}
		{
			p.SetState(1113)
			p.On_off()
		}

	case tsqlParserTRUSTWORTHY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1114)
			p.Match(tsqlParserTRUSTWORTHY)
		}
		{
			p.SetState(1115)
			p.On_off()
		}

	case tsqlParserDEFAULT_LANGUAGE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1116)
			p.Match(tsqlParserDEFAULT_LANGUAGE)
		}
		{
			p.SetState(1117)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(1120)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(1118)
				p.R_id()
			}

		case tsqlParserSTRING:
			{
				p.SetState(1119)
				p.Match(tsqlParserSTRING)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case tsqlParserDEFAULT_FULLTEXT_LANGUAGE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1122)
			p.Match(tsqlParserDEFAULT_FULLTEXT_LANGUAGE)
		}
		{
			p.SetState(1123)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(1126)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(1124)
				p.R_id()
			}

		case tsqlParserSTRING:
			{
				p.SetState(1125)
				p.Match(tsqlParserSTRING)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case tsqlParserNESTED_TRIGGERS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1128)
			p.Match(tsqlParserNESTED_TRIGGERS)
		}
		{
			p.SetState(1129)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1130)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserOFF || _la == tsqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case tsqlParserTRANSFORM_NOISE_WORDS:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1131)
			p.Match(tsqlParserTRANSFORM_NOISE_WORDS)
		}
		{
			p.SetState(1132)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1133)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserOFF || _la == tsqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case tsqlParserTWO_DIGIT_YEAR_CUTOFF:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1134)
			p.Match(tsqlParserTWO_DIGIT_YEAR_CUTOFF)
		}
		{
			p.SetState(1135)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1136)
			p.Match(tsqlParserDECIMAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMixed_page_allocation_optionContext is an interface to support dynamic dispatch.
type IMixed_page_allocation_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMixed_page_allocation_optionContext differentiates from other interfaces.
	IsMixed_page_allocation_optionContext()
}

type Mixed_page_allocation_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMixed_page_allocation_optionContext() *Mixed_page_allocation_optionContext {
	var p = new(Mixed_page_allocation_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_mixed_page_allocation_option
	return p
}

func (*Mixed_page_allocation_optionContext) IsMixed_page_allocation_optionContext() {}

func NewMixed_page_allocation_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mixed_page_allocation_optionContext {
	var p = new(Mixed_page_allocation_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_mixed_page_allocation_option

	return p
}

func (s *Mixed_page_allocation_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Mixed_page_allocation_optionContext) MIXED_PAGE_ALLOCATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserMIXED_PAGE_ALLOCATION, 0)
}

func (s *Mixed_page_allocation_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *Mixed_page_allocation_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Mixed_page_allocation_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mixed_page_allocation_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Mixed_page_allocation_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterMixed_page_allocation_option(s)
	}
}

func (s *Mixed_page_allocation_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitMixed_page_allocation_option(s)
	}
}

func (p *tsqlParser) Mixed_page_allocation_option() (localctx IMixed_page_allocation_optionContext) {
	localctx = NewMixed_page_allocation_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, tsqlParserRULE_mixed_page_allocation_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1139)
		p.Match(tsqlParserMIXED_PAGE_ALLOCATION)
	}
	{
		p.SetState(1140)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserOFF || _la == tsqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IParameterization_optionContext is an interface to support dynamic dispatch.
type IParameterization_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterization_optionContext differentiates from other interfaces.
	IsParameterization_optionContext()
}

type Parameterization_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterization_optionContext() *Parameterization_optionContext {
	var p = new(Parameterization_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_parameterization_option
	return p
}

func (*Parameterization_optionContext) IsParameterization_optionContext() {}

func NewParameterization_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameterization_optionContext {
	var p = new(Parameterization_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_parameterization_option

	return p
}

func (s *Parameterization_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameterization_optionContext) PARAMETERIZATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserPARAMETERIZATION, 0)
}

func (s *Parameterization_optionContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSIMPLE, 0)
}

func (s *Parameterization_optionContext) FORCED() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORCED, 0)
}

func (s *Parameterization_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameterization_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameterization_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterParameterization_option(s)
	}
}

func (s *Parameterization_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitParameterization_option(s)
	}
}

func (p *tsqlParser) Parameterization_option() (localctx IParameterization_optionContext) {
	localctx = NewParameterization_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, tsqlParserRULE_parameterization_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1142)
		p.Match(tsqlParserPARAMETERIZATION)
	}
	{
		p.SetState(1143)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserFORCED || _la == tsqlParserSIMPLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IRecovery_optionContext is an interface to support dynamic dispatch.
type IRecovery_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRecovery_optionContext differentiates from other interfaces.
	IsRecovery_optionContext()
}

type Recovery_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRecovery_optionContext() *Recovery_optionContext {
	var p = new(Recovery_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_recovery_option
	return p
}

func (*Recovery_optionContext) IsRecovery_optionContext() {}

func NewRecovery_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Recovery_optionContext {
	var p = new(Recovery_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_recovery_option

	return p
}

func (s *Recovery_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Recovery_optionContext) RECOVERY() antlr.TerminalNode {
	return s.GetToken(tsqlParserRECOVERY, 0)
}

func (s *Recovery_optionContext) FULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserFULL, 0)
}

func (s *Recovery_optionContext) BULK_LOGGED() antlr.TerminalNode {
	return s.GetToken(tsqlParserBULK_LOGGED, 0)
}

func (s *Recovery_optionContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSIMPLE, 0)
}

func (s *Recovery_optionContext) TORN_PAGE_DETECTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserTORN_PAGE_DETECTION, 0)
}

func (s *Recovery_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Recovery_optionContext) PAGE_VERIFY() antlr.TerminalNode {
	return s.GetToken(tsqlParserPAGE_VERIFY, 0)
}

func (s *Recovery_optionContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECKSUM, 0)
}

func (s *Recovery_optionContext) NONE() antlr.TerminalNode {
	return s.GetToken(tsqlParserNONE, 0)
}

func (s *Recovery_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Recovery_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Recovery_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterRecovery_option(s)
	}
}

func (s *Recovery_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitRecovery_option(s)
	}
}

func (p *tsqlParser) Recovery_option() (localctx IRecovery_optionContext) {
	localctx = NewRecovery_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, tsqlParserRULE_recovery_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1151)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserRECOVERY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1145)
			p.Match(tsqlParserRECOVERY)
		}
		{
			p.SetState(1146)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserFULL || _la == tsqlParserBULK_LOGGED || _la == tsqlParserSIMPLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case tsqlParserTORN_PAGE_DETECTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1147)
			p.Match(tsqlParserTORN_PAGE_DETECTION)
		}
		{
			p.SetState(1148)
			p.On_off()
		}

	case tsqlParserPAGE_VERIFY:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1149)
			p.Match(tsqlParserPAGE_VERIFY)
		}
		{
			p.SetState(1150)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserNONE || _la == tsqlParserCHECKSUM || _la == tsqlParserTORN_PAGE_DETECTION) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IService_broker_optionContext is an interface to support dynamic dispatch.
type IService_broker_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsService_broker_optionContext differentiates from other interfaces.
	IsService_broker_optionContext()
}

type Service_broker_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyService_broker_optionContext() *Service_broker_optionContext {
	var p = new(Service_broker_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_service_broker_option
	return p
}

func (*Service_broker_optionContext) IsService_broker_optionContext() {}

func NewService_broker_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Service_broker_optionContext {
	var p = new(Service_broker_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_service_broker_option

	return p
}

func (s *Service_broker_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Service_broker_optionContext) ENABLE_BROKER() antlr.TerminalNode {
	return s.GetToken(tsqlParserENABLE_BROKER, 0)
}

func (s *Service_broker_optionContext) DISABLE_BROKER() antlr.TerminalNode {
	return s.GetToken(tsqlParserDISABLE_BROKER, 0)
}

func (s *Service_broker_optionContext) NEW_BROKER() antlr.TerminalNode {
	return s.GetToken(tsqlParserNEW_BROKER, 0)
}

func (s *Service_broker_optionContext) ERROR_BROKER_CONVERSATIONS() antlr.TerminalNode {
	return s.GetToken(tsqlParserERROR_BROKER_CONVERSATIONS, 0)
}

func (s *Service_broker_optionContext) HONOR_BROKER_PRIORITY() antlr.TerminalNode {
	return s.GetToken(tsqlParserHONOR_BROKER_PRIORITY, 0)
}

func (s *Service_broker_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Service_broker_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Service_broker_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Service_broker_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterService_broker_option(s)
	}
}

func (s *Service_broker_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitService_broker_option(s)
	}
}

func (p *tsqlParser) Service_broker_option() (localctx IService_broker_optionContext) {
	localctx = NewService_broker_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, tsqlParserRULE_service_broker_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1159)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserENABLE_BROKER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1153)
			p.Match(tsqlParserENABLE_BROKER)
		}

	case tsqlParserDISABLE_BROKER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1154)
			p.Match(tsqlParserDISABLE_BROKER)
		}

	case tsqlParserNEW_BROKER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1155)
			p.Match(tsqlParserNEW_BROKER)
		}

	case tsqlParserERROR_BROKER_CONVERSATIONS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1156)
			p.Match(tsqlParserERROR_BROKER_CONVERSATIONS)
		}

	case tsqlParserHONOR_BROKER_PRIORITY:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1157)
			p.Match(tsqlParserHONOR_BROKER_PRIORITY)
		}
		{
			p.SetState(1158)
			p.On_off()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISnapshot_optionContext is an interface to support dynamic dispatch.
type ISnapshot_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT returns the MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT token.
	GetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT() antlr.Token

	// SetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT sets the MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT token.
	SetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT(antlr.Token)

	// IsSnapshot_optionContext differentiates from other interfaces.
	IsSnapshot_optionContext()
}

type Snapshot_optionContext struct {
	*antlr.BaseParserRuleContext
	parser                               antlr.Parser
	MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT antlr.Token
}

func NewEmptySnapshot_optionContext() *Snapshot_optionContext {
	var p = new(Snapshot_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_snapshot_option
	return p
}

func (*Snapshot_optionContext) IsSnapshot_optionContext() {}

func NewSnapshot_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Snapshot_optionContext {
	var p = new(Snapshot_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_snapshot_option

	return p
}

func (s *Snapshot_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Snapshot_optionContext) GetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT() antlr.Token {
	return s.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT
}

func (s *Snapshot_optionContext) SetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT(v antlr.Token) {
	s.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = v
}

func (s *Snapshot_optionContext) ALLOW_SNAPSHOT_ISOLATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserALLOW_SNAPSHOT_ISOLATION, 0)
}

func (s *Snapshot_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Snapshot_optionContext) READ_COMMITTED_SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD_COMMITTED_SNAPSHOT, 0)
}

func (s *Snapshot_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Snapshot_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *Snapshot_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Snapshot_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Snapshot_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSnapshot_option(s)
	}
}

func (s *Snapshot_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSnapshot_option(s)
	}
}

func (p *tsqlParser) Snapshot_option() (localctx ISnapshot_optionContext) {
	localctx = NewSnapshot_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, tsqlParserRULE_snapshot_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1166)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserALLOW_SNAPSHOT_ISOLATION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1161)
			p.Match(tsqlParserALLOW_SNAPSHOT_ISOLATION)
		}
		{
			p.SetState(1162)
			p.On_off()
		}

	case tsqlParserREAD_COMMITTED_SNAPSHOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1163)
			p.Match(tsqlParserREAD_COMMITTED_SNAPSHOT)
		}
		{
			p.SetState(1164)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserOFF || _la == tsqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case tsqlParserOFF, tsqlParserON:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1165)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Snapshot_optionContext).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserOFF || _la == tsqlParserON) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Snapshot_optionContext).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISql_optionContext is an interface to support dynamic dispatch.
type ISql_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_optionContext differentiates from other interfaces.
	IsSql_optionContext()
}

type Sql_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_optionContext() *Sql_optionContext {
	var p = new(Sql_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_sql_option
	return p
}

func (*Sql_optionContext) IsSql_optionContext() {}

func NewSql_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_optionContext {
	var p = new(Sql_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_sql_option

	return p
}

func (s *Sql_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_optionContext) ANSI_NULL_DEFAULT() antlr.TerminalNode {
	return s.GetToken(tsqlParserANSI_NULL_DEFAULT, 0)
}

func (s *Sql_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Sql_optionContext) ANSI_NULLS() antlr.TerminalNode {
	return s.GetToken(tsqlParserANSI_NULLS, 0)
}

func (s *Sql_optionContext) ANSI_PADDING() antlr.TerminalNode {
	return s.GetToken(tsqlParserANSI_PADDING, 0)
}

func (s *Sql_optionContext) ANSI_WARNINGS() antlr.TerminalNode {
	return s.GetToken(tsqlParserANSI_WARNINGS, 0)
}

func (s *Sql_optionContext) ARITHABORT() antlr.TerminalNode {
	return s.GetToken(tsqlParserARITHABORT, 0)
}

func (s *Sql_optionContext) COMPATIBILITY_LEVEL() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOMPATIBILITY_LEVEL, 0)
}

func (s *Sql_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Sql_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Sql_optionContext) CONCAT_NULL_YIELDS_NULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONCAT_NULL_YIELDS_NULL, 0)
}

func (s *Sql_optionContext) NUMERIC_ROUNDABORT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNUMERIC_ROUNDABORT, 0)
}

func (s *Sql_optionContext) QUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(tsqlParserQUOTED_IDENTIFIER, 0)
}

func (s *Sql_optionContext) RECURSIVE_TRIGGERS() antlr.TerminalNode {
	return s.GetToken(tsqlParserRECURSIVE_TRIGGERS, 0)
}

func (s *Sql_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSql_option(s)
	}
}

func (s *Sql_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSql_option(s)
	}
}

func (p *tsqlParser) Sql_option() (localctx ISql_optionContext) {
	localctx = NewSql_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, tsqlParserRULE_sql_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1189)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserANSI_NULL_DEFAULT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1168)
			p.Match(tsqlParserANSI_NULL_DEFAULT)
		}
		{
			p.SetState(1169)
			p.On_off()
		}

	case tsqlParserANSI_NULLS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1170)
			p.Match(tsqlParserANSI_NULLS)
		}
		{
			p.SetState(1171)
			p.On_off()
		}

	case tsqlParserANSI_PADDING:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1172)
			p.Match(tsqlParserANSI_PADDING)
		}
		{
			p.SetState(1173)
			p.On_off()
		}

	case tsqlParserANSI_WARNINGS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1174)
			p.Match(tsqlParserANSI_WARNINGS)
		}
		{
			p.SetState(1175)
			p.On_off()
		}

	case tsqlParserARITHABORT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1176)
			p.Match(tsqlParserARITHABORT)
		}
		{
			p.SetState(1177)
			p.On_off()
		}

	case tsqlParserCOMPATIBILITY_LEVEL:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1178)
			p.Match(tsqlParserCOMPATIBILITY_LEVEL)
		}
		{
			p.SetState(1179)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1180)
			p.Match(tsqlParserDECIMAL)
		}

	case tsqlParserCONCAT_NULL_YIELDS_NULL:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1181)
			p.Match(tsqlParserCONCAT_NULL_YIELDS_NULL)
		}
		{
			p.SetState(1182)
			p.On_off()
		}

	case tsqlParserNUMERIC_ROUNDABORT:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1183)
			p.Match(tsqlParserNUMERIC_ROUNDABORT)
		}
		{
			p.SetState(1184)
			p.On_off()
		}

	case tsqlParserQUOTED_IDENTIFIER:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1185)
			p.Match(tsqlParserQUOTED_IDENTIFIER)
		}
		{
			p.SetState(1186)
			p.On_off()
		}

	case tsqlParserRECURSIVE_TRIGGERS:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1187)
			p.Match(tsqlParserRECURSIVE_TRIGGERS)
		}
		{
			p.SetState(1188)
			p.On_off()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITarget_recovery_time_optionContext is an interface to support dynamic dispatch.
type ITarget_recovery_time_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTarget_recovery_time_optionContext differentiates from other interfaces.
	IsTarget_recovery_time_optionContext()
}

type Target_recovery_time_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTarget_recovery_time_optionContext() *Target_recovery_time_optionContext {
	var p = new(Target_recovery_time_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_target_recovery_time_option
	return p
}

func (*Target_recovery_time_optionContext) IsTarget_recovery_time_optionContext() {}

func NewTarget_recovery_time_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Target_recovery_time_optionContext {
	var p = new(Target_recovery_time_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_target_recovery_time_option

	return p
}

func (s *Target_recovery_time_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Target_recovery_time_optionContext) TARGET_RECOVERY_TIME() antlr.TerminalNode {
	return s.GetToken(tsqlParserTARGET_RECOVERY_TIME, 0)
}

func (s *Target_recovery_time_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Target_recovery_time_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Target_recovery_time_optionContext) SECONDS() antlr.TerminalNode {
	return s.GetToken(tsqlParserSECONDS, 0)
}

func (s *Target_recovery_time_optionContext) MINUTES() antlr.TerminalNode {
	return s.GetToken(tsqlParserMINUTES, 0)
}

func (s *Target_recovery_time_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Target_recovery_time_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Target_recovery_time_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTarget_recovery_time_option(s)
	}
}

func (s *Target_recovery_time_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTarget_recovery_time_option(s)
	}
}

func (p *tsqlParser) Target_recovery_time_option() (localctx ITarget_recovery_time_optionContext) {
	localctx = NewTarget_recovery_time_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, tsqlParserRULE_target_recovery_time_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1191)
		p.Match(tsqlParserTARGET_RECOVERY_TIME)
	}
	{
		p.SetState(1192)
		p.Match(tsqlParserEQUAL)
	}
	{
		p.SetState(1193)
		p.Match(tsqlParserDECIMAL)
	}
	{
		p.SetState(1194)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserMINUTES || _la == tsqlParserSECONDS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ITerminationContext is an interface to support dynamic dispatch.
type ITerminationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSeconds returns the seconds token.
	GetSeconds() antlr.Token

	// SetSeconds sets the seconds token.
	SetSeconds(antlr.Token)

	// IsTerminationContext differentiates from other interfaces.
	IsTerminationContext()
}

type TerminationContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	seconds antlr.Token
}

func NewEmptyTerminationContext() *TerminationContext {
	var p = new(TerminationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_termination
	return p
}

func (*TerminationContext) IsTerminationContext() {}

func NewTerminationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TerminationContext {
	var p = new(TerminationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_termination

	return p
}

func (s *TerminationContext) GetParser() antlr.Parser { return s.parser }

func (s *TerminationContext) GetSeconds() antlr.Token { return s.seconds }

func (s *TerminationContext) SetSeconds(v antlr.Token) { s.seconds = v }

func (s *TerminationContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(tsqlParserROLLBACK, 0)
}

func (s *TerminationContext) AFTER() antlr.TerminalNode {
	return s.GetToken(tsqlParserAFTER, 0)
}

func (s *TerminationContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *TerminationContext) IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserIMMEDIATE, 0)
}

func (s *TerminationContext) NO_WAIT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNO_WAIT, 0)
}

func (s *TerminationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TerminationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TerminationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTermination(s)
	}
}

func (s *TerminationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTermination(s)
	}
}

func (p *tsqlParser) Termination() (localctx ITerminationContext) {
	localctx = NewTerminationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, tsqlParserRULE_termination)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1202)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 151, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1196)
			p.Match(tsqlParserROLLBACK)
		}
		{
			p.SetState(1197)
			p.Match(tsqlParserAFTER)
		}
		{
			p.SetState(1198)

			var _m = p.Match(tsqlParserDECIMAL)

			localctx.(*TerminationContext).seconds = _m
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1199)
			p.Match(tsqlParserROLLBACK)
		}
		{
			p.SetState(1200)
			p.Match(tsqlParserIMMEDIATE)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1201)
			p.Match(tsqlParserNO_WAIT)
		}

	}

	return localctx
}

// IDrop_indexContext is an interface to support dynamic dispatch.
type IDrop_indexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IR_idContext

	// SetName sets the name rule contexts.
	SetName(IR_idContext)

	// IsDrop_indexContext differentiates from other interfaces.
	IsDrop_indexContext()
}

type Drop_indexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IR_idContext
}

func NewEmptyDrop_indexContext() *Drop_indexContext {
	var p = new(Drop_indexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_drop_index
	return p
}

func (*Drop_indexContext) IsDrop_indexContext() {}

func NewDrop_indexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_indexContext {
	var p = new(Drop_indexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_drop_index

	return p
}

func (s *Drop_indexContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_indexContext) GetName() IR_idContext { return s.name }

func (s *Drop_indexContext) SetName(v IR_idContext) { s.name = v }

func (s *Drop_indexContext) DROP() antlr.TerminalNode {
	return s.GetToken(tsqlParserDROP, 0)
}

func (s *Drop_indexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(tsqlParserINDEX, 0)
}

func (s *Drop_indexContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Drop_indexContext) IF() antlr.TerminalNode {
	return s.GetToken(tsqlParserIF, 0)
}

func (s *Drop_indexContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXISTS, 0)
}

func (s *Drop_indexContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Drop_indexContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Drop_indexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_indexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_indexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDrop_index(s)
	}
}

func (s *Drop_indexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDrop_index(s)
	}
}

func (p *tsqlParser) Drop_index() (localctx IDrop_indexContext) {
	localctx = NewDrop_indexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, tsqlParserRULE_drop_index)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1204)
		p.Match(tsqlParserDROP)
	}
	{
		p.SetState(1205)
		p.Match(tsqlParserINDEX)
	}
	p.SetState(1208)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserIF {
		{
			p.SetState(1206)
			p.Match(tsqlParserIF)
		}
		{
			p.SetState(1207)
			p.Match(tsqlParserEXISTS)
		}

	}
	{
		p.SetState(1210)

		var _x = p.R_id()

		localctx.(*Drop_indexContext).name = _x
	}
	p.SetState(1213)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserON {
		{
			p.SetState(1211)
			p.Match(tsqlParserON)
		}
		{
			p.SetState(1212)
			p.Table_name()
		}

	}
	p.SetState(1216)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 154, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1215)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IDrop_procedureContext is an interface to support dynamic dispatch.
type IDrop_procedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_procedureContext differentiates from other interfaces.
	IsDrop_procedureContext()
}

type Drop_procedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_procedureContext() *Drop_procedureContext {
	var p = new(Drop_procedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_drop_procedure
	return p
}

func (*Drop_procedureContext) IsDrop_procedureContext() {}

func NewDrop_procedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_procedureContext {
	var p = new(Drop_procedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_drop_procedure

	return p
}

func (s *Drop_procedureContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_procedureContext) DROP() antlr.TerminalNode {
	return s.GetToken(tsqlParserDROP, 0)
}

func (s *Drop_procedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(tsqlParserPROCEDURE, 0)
}

func (s *Drop_procedureContext) Func_proc_name() IFunc_proc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_proc_nameContext)
}

func (s *Drop_procedureContext) IF() antlr.TerminalNode {
	return s.GetToken(tsqlParserIF, 0)
}

func (s *Drop_procedureContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXISTS, 0)
}

func (s *Drop_procedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_procedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_procedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDrop_procedure(s)
	}
}

func (s *Drop_procedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDrop_procedure(s)
	}
}

func (p *tsqlParser) Drop_procedure() (localctx IDrop_procedureContext) {
	localctx = NewDrop_procedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, tsqlParserRULE_drop_procedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1218)
		p.Match(tsqlParserDROP)
	}
	{
		p.SetState(1219)
		p.Match(tsqlParserPROCEDURE)
	}
	p.SetState(1222)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserIF {
		{
			p.SetState(1220)
			p.Match(tsqlParserIF)
		}
		{
			p.SetState(1221)
			p.Match(tsqlParserEXISTS)
		}

	}
	{
		p.SetState(1224)
		p.Func_proc_name()
	}
	p.SetState(1226)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1225)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IDrop_statisticsContext is an interface to support dynamic dispatch.
type IDrop_statisticsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IR_idContext

	// SetName sets the name rule contexts.
	SetName(IR_idContext)

	// IsDrop_statisticsContext differentiates from other interfaces.
	IsDrop_statisticsContext()
}

type Drop_statisticsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IR_idContext
}

func NewEmptyDrop_statisticsContext() *Drop_statisticsContext {
	var p = new(Drop_statisticsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_drop_statistics
	return p
}

func (*Drop_statisticsContext) IsDrop_statisticsContext() {}

func NewDrop_statisticsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_statisticsContext {
	var p = new(Drop_statisticsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_drop_statistics

	return p
}

func (s *Drop_statisticsContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_statisticsContext) GetName() IR_idContext { return s.name }

func (s *Drop_statisticsContext) SetName(v IR_idContext) { s.name = v }

func (s *Drop_statisticsContext) DROP() antlr.TerminalNode {
	return s.GetToken(tsqlParserDROP, 0)
}

func (s *Drop_statisticsContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTATISTICS, 0)
}

func (s *Drop_statisticsContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Drop_statisticsContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Drop_statisticsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_statisticsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_statisticsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDrop_statistics(s)
	}
}

func (s *Drop_statisticsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDrop_statistics(s)
	}
}

func (p *tsqlParser) Drop_statistics() (localctx IDrop_statisticsContext) {
	localctx = NewDrop_statisticsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, tsqlParserRULE_drop_statistics)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1228)
		p.Match(tsqlParserDROP)
	}
	{
		p.SetState(1229)
		p.Match(tsqlParserSTATISTICS)
	}
	p.SetState(1233)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1230)
			p.Table_name()
		}
		{
			p.SetState(1231)
			p.Match(tsqlParserDOT)
		}

	}
	{
		p.SetState(1235)

		var _x = p.R_id()

		localctx.(*Drop_statisticsContext).name = _x
	}
	{
		p.SetState(1236)
		p.Match(tsqlParserSEMI)
	}

	return localctx
}

// IDrop_tableContext is an interface to support dynamic dispatch.
type IDrop_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_tableContext differentiates from other interfaces.
	IsDrop_tableContext()
}

type Drop_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_tableContext() *Drop_tableContext {
	var p = new(Drop_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_drop_table
	return p
}

func (*Drop_tableContext) IsDrop_tableContext() {}

func NewDrop_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_tableContext {
	var p = new(Drop_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_drop_table

	return p
}

func (s *Drop_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_tableContext) DROP() antlr.TerminalNode {
	return s.GetToken(tsqlParserDROP, 0)
}

func (s *Drop_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTABLE, 0)
}

func (s *Drop_tableContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Drop_tableContext) IF() antlr.TerminalNode {
	return s.GetToken(tsqlParserIF, 0)
}

func (s *Drop_tableContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXISTS, 0)
}

func (s *Drop_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDrop_table(s)
	}
}

func (s *Drop_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDrop_table(s)
	}
}

func (p *tsqlParser) Drop_table() (localctx IDrop_tableContext) {
	localctx = NewDrop_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, tsqlParserRULE_drop_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1238)
		p.Match(tsqlParserDROP)
	}
	{
		p.SetState(1239)
		p.Match(tsqlParserTABLE)
	}
	p.SetState(1242)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserIF {
		{
			p.SetState(1240)
			p.Match(tsqlParserIF)
		}
		{
			p.SetState(1241)
			p.Match(tsqlParserEXISTS)
		}

	}
	{
		p.SetState(1244)
		p.Table_name()
	}
	p.SetState(1246)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1245)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IDrop_viewContext is an interface to support dynamic dispatch.
type IDrop_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_viewContext differentiates from other interfaces.
	IsDrop_viewContext()
}

type Drop_viewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_viewContext() *Drop_viewContext {
	var p = new(Drop_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_drop_view
	return p
}

func (*Drop_viewContext) IsDrop_viewContext() {}

func NewDrop_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_viewContext {
	var p = new(Drop_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_drop_view

	return p
}

func (s *Drop_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_viewContext) DROP() antlr.TerminalNode {
	return s.GetToken(tsqlParserDROP, 0)
}

func (s *Drop_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(tsqlParserVIEW, 0)
}

func (s *Drop_viewContext) AllSimple_name() []ISimple_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem())
	var tst = make([]ISimple_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimple_nameContext)
		}
	}

	return tst
}

func (s *Drop_viewContext) Simple_name(i int) ISimple_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimple_nameContext)
}

func (s *Drop_viewContext) IF() antlr.TerminalNode {
	return s.GetToken(tsqlParserIF, 0)
}

func (s *Drop_viewContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXISTS, 0)
}

func (s *Drop_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDrop_view(s)
	}
}

func (s *Drop_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDrop_view(s)
	}
}

func (p *tsqlParser) Drop_view() (localctx IDrop_viewContext) {
	localctx = NewDrop_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, tsqlParserRULE_drop_view)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1248)
		p.Match(tsqlParserDROP)
	}
	{
		p.SetState(1249)
		p.Match(tsqlParserVIEW)
	}
	p.SetState(1252)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserIF {
		{
			p.SetState(1250)
			p.Match(tsqlParserIF)
		}
		{
			p.SetState(1251)
			p.Match(tsqlParserEXISTS)
		}

	}
	{
		p.SetState(1254)
		p.Simple_name()
	}
	p.SetState(1259)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(1255)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(1256)
			p.Simple_name()
		}

		p.SetState(1261)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1263)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1262)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// ICreate_typeContext is an interface to support dynamic dispatch.
type ICreate_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISimple_nameContext

	// GetData_type_name returns the data_type_name rule contexts.
	GetData_type_name() IData_typeContext

	// GetDefault_val returns the default_val rule contexts.
	GetDefault_val() IDefault_valueContext

	// SetName sets the name rule contexts.
	SetName(ISimple_nameContext)

	// SetData_type_name sets the data_type_name rule contexts.
	SetData_type_name(IData_typeContext)

	// SetDefault_val sets the default_val rule contexts.
	SetDefault_val(IDefault_valueContext)

	// IsCreate_typeContext differentiates from other interfaces.
	IsCreate_typeContext()
}

type Create_typeContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	name           ISimple_nameContext
	data_type_name IData_typeContext
	default_val    IDefault_valueContext
}

func NewEmptyCreate_typeContext() *Create_typeContext {
	var p = new(Create_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_create_type
	return p
}

func (*Create_typeContext) IsCreate_typeContext() {}

func NewCreate_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_typeContext {
	var p = new(Create_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_create_type

	return p
}

func (s *Create_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_typeContext) GetName() ISimple_nameContext { return s.name }

func (s *Create_typeContext) GetData_type_name() IData_typeContext { return s.data_type_name }

func (s *Create_typeContext) GetDefault_val() IDefault_valueContext { return s.default_val }

func (s *Create_typeContext) SetName(v ISimple_nameContext) { s.name = v }

func (s *Create_typeContext) SetData_type_name(v IData_typeContext) { s.data_type_name = v }

func (s *Create_typeContext) SetDefault_val(v IDefault_valueContext) { s.default_val = v }

func (s *Create_typeContext) CREATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCREATE, 0)
}

func (s *Create_typeContext) TYPE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTYPE, 0)
}

func (s *Create_typeContext) Simple_name() ISimple_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_nameContext)
}

func (s *Create_typeContext) FROM() antlr.TerminalNode {
	return s.GetToken(tsqlParserFROM, 0)
}

func (s *Create_typeContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Create_typeContext) TABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTABLE, 0)
}

func (s *Create_typeContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(tsqlParserLR_BRACKET, 0)
}

func (s *Create_typeContext) Column_def_table_constraints() IColumn_def_table_constraintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintsContext)
}

func (s *Create_typeContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(tsqlParserRR_BRACKET, 0)
}

func (s *Create_typeContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_typeContext) Default_value() IDefault_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefault_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefault_valueContext)
}

func (s *Create_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCreate_type(s)
	}
}

func (s *Create_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCreate_type(s)
	}
}

func (p *tsqlParser) Create_type() (localctx ICreate_typeContext) {
	localctx = NewCreate_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, tsqlParserRULE_create_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1265)
		p.Match(tsqlParserCREATE)
	}
	{
		p.SetState(1266)
		p.Match(tsqlParserTYPE)
	}
	{
		p.SetState(1267)

		var _x = p.Simple_name()

		localctx.(*Create_typeContext).name = _x
	}
	p.SetState(1272)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFROM {
		{
			p.SetState(1268)
			p.Match(tsqlParserFROM)
		}
		{
			p.SetState(1269)

			var _x = p.Data_type()

			localctx.(*Create_typeContext).data_type_name = _x
		}
		{
			p.SetState(1270)

			var _x = p.Default_value()

			localctx.(*Create_typeContext).default_val = _x
		}

	}
	p.SetState(1280)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserAS {
		{
			p.SetState(1274)
			p.Match(tsqlParserAS)
		}
		{
			p.SetState(1275)
			p.Match(tsqlParserTABLE)
		}
		{
			p.SetState(1276)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(1277)
			p.Column_def_table_constraints()
		}
		{
			p.SetState(1278)
			p.Match(tsqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IDrop_typeContext is an interface to support dynamic dispatch.
type IDrop_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISimple_nameContext

	// SetName sets the name rule contexts.
	SetName(ISimple_nameContext)

	// IsDrop_typeContext differentiates from other interfaces.
	IsDrop_typeContext()
}

type Drop_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   ISimple_nameContext
}

func NewEmptyDrop_typeContext() *Drop_typeContext {
	var p = new(Drop_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_drop_type
	return p
}

func (*Drop_typeContext) IsDrop_typeContext() {}

func NewDrop_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_typeContext {
	var p = new(Drop_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_drop_type

	return p
}

func (s *Drop_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_typeContext) GetName() ISimple_nameContext { return s.name }

func (s *Drop_typeContext) SetName(v ISimple_nameContext) { s.name = v }

func (s *Drop_typeContext) DROP() antlr.TerminalNode {
	return s.GetToken(tsqlParserDROP, 0)
}

func (s *Drop_typeContext) TYPE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTYPE, 0)
}

func (s *Drop_typeContext) Simple_name() ISimple_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_nameContext)
}

func (s *Drop_typeContext) IF() antlr.TerminalNode {
	return s.GetToken(tsqlParserIF, 0)
}

func (s *Drop_typeContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXISTS, 0)
}

func (s *Drop_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDrop_type(s)
	}
}

func (s *Drop_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDrop_type(s)
	}
}

func (p *tsqlParser) Drop_type() (localctx IDrop_typeContext) {
	localctx = NewDrop_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, tsqlParserRULE_drop_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1282)
		p.Match(tsqlParserDROP)
	}
	{
		p.SetState(1283)
		p.Match(tsqlParserTYPE)
	}
	p.SetState(1286)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserIF {
		{
			p.SetState(1284)
			p.Match(tsqlParserIF)
		}
		{
			p.SetState(1285)
			p.Match(tsqlParserEXISTS)
		}

	}
	{
		p.SetState(1288)

		var _x = p.Simple_name()

		localctx.(*Drop_typeContext).name = _x
	}

	return localctx
}

// IRowset_function_limitedContext is an interface to support dynamic dispatch.
type IRowset_function_limitedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRowset_function_limitedContext differentiates from other interfaces.
	IsRowset_function_limitedContext()
}

type Rowset_function_limitedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRowset_function_limitedContext() *Rowset_function_limitedContext {
	var p = new(Rowset_function_limitedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_rowset_function_limited
	return p
}

func (*Rowset_function_limitedContext) IsRowset_function_limitedContext() {}

func NewRowset_function_limitedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rowset_function_limitedContext {
	var p = new(Rowset_function_limitedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_rowset_function_limited

	return p
}

func (s *Rowset_function_limitedContext) GetParser() antlr.Parser { return s.parser }

func (s *Rowset_function_limitedContext) Openquery() IOpenqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpenqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpenqueryContext)
}

func (s *Rowset_function_limitedContext) Opendatasource() IOpendatasourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpendatasourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpendatasourceContext)
}

func (s *Rowset_function_limitedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rowset_function_limitedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rowset_function_limitedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterRowset_function_limited(s)
	}
}

func (s *Rowset_function_limitedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitRowset_function_limited(s)
	}
}

func (p *tsqlParser) Rowset_function_limited() (localctx IRowset_function_limitedContext) {
	localctx = NewRowset_function_limitedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, tsqlParserRULE_rowset_function_limited)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1292)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserOPENQUERY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1290)
			p.Openquery()
		}

	case tsqlParserOPENDATASOURCE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1291)
			p.Opendatasource()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOpenqueryContext is an interface to support dynamic dispatch.
type IOpenqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetQuery returns the query token.
	GetQuery() antlr.Token

	// SetQuery sets the query token.
	SetQuery(antlr.Token)

	// GetLinked_server returns the linked_server rule contexts.
	GetLinked_server() IR_idContext

	// SetLinked_server sets the linked_server rule contexts.
	SetLinked_server(IR_idContext)

	// IsOpenqueryContext differentiates from other interfaces.
	IsOpenqueryContext()
}

type OpenqueryContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	linked_server IR_idContext
	query         antlr.Token
}

func NewEmptyOpenqueryContext() *OpenqueryContext {
	var p = new(OpenqueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_openquery
	return p
}

func (*OpenqueryContext) IsOpenqueryContext() {}

func NewOpenqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OpenqueryContext {
	var p = new(OpenqueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_openquery

	return p
}

func (s *OpenqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *OpenqueryContext) GetQuery() antlr.Token { return s.query }

func (s *OpenqueryContext) SetQuery(v antlr.Token) { s.query = v }

func (s *OpenqueryContext) GetLinked_server() IR_idContext { return s.linked_server }

func (s *OpenqueryContext) SetLinked_server(v IR_idContext) { s.linked_server = v }

func (s *OpenqueryContext) OPENQUERY() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPENQUERY, 0)
}

func (s *OpenqueryContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *OpenqueryContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *OpenqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpenqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OpenqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOpenquery(s)
	}
}

func (s *OpenqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOpenquery(s)
	}
}

func (p *tsqlParser) Openquery() (localctx IOpenqueryContext) {
	localctx = NewOpenqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, tsqlParserRULE_openquery)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1294)
		p.Match(tsqlParserOPENQUERY)
	}
	{
		p.SetState(1295)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(1296)

		var _x = p.R_id()

		localctx.(*OpenqueryContext).linked_server = _x
	}
	{
		p.SetState(1297)
		p.Match(tsqlParserCOMMA)
	}
	{
		p.SetState(1298)

		var _m = p.Match(tsqlParserSTRING)

		localctx.(*OpenqueryContext).query = _m
	}
	{
		p.SetState(1299)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IOpendatasourceContext is an interface to support dynamic dispatch.
type IOpendatasourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetProvider returns the provider token.
	GetProvider() antlr.Token

	// GetInit returns the init token.
	GetInit() antlr.Token

	// SetProvider sets the provider token.
	SetProvider(antlr.Token)

	// SetInit sets the init token.
	SetInit(antlr.Token)

	// GetDatabase returns the database rule contexts.
	GetDatabase() IR_idContext

	// GetScheme returns the scheme rule contexts.
	GetScheme() IR_idContext

	// GetTable returns the table rule contexts.
	GetTable() IR_idContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IR_idContext)

	// SetScheme sets the scheme rule contexts.
	SetScheme(IR_idContext)

	// SetTable sets the table rule contexts.
	SetTable(IR_idContext)

	// IsOpendatasourceContext differentiates from other interfaces.
	IsOpendatasourceContext()
}

type OpendatasourceContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	provider antlr.Token
	init     antlr.Token
	database IR_idContext
	scheme   IR_idContext
	table    IR_idContext
}

func NewEmptyOpendatasourceContext() *OpendatasourceContext {
	var p = new(OpendatasourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_opendatasource
	return p
}

func (*OpendatasourceContext) IsOpendatasourceContext() {}

func NewOpendatasourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OpendatasourceContext {
	var p = new(OpendatasourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_opendatasource

	return p
}

func (s *OpendatasourceContext) GetParser() antlr.Parser { return s.parser }

func (s *OpendatasourceContext) GetProvider() antlr.Token { return s.provider }

func (s *OpendatasourceContext) GetInit() antlr.Token { return s.init }

func (s *OpendatasourceContext) SetProvider(v antlr.Token) { s.provider = v }

func (s *OpendatasourceContext) SetInit(v antlr.Token) { s.init = v }

func (s *OpendatasourceContext) GetDatabase() IR_idContext { return s.database }

func (s *OpendatasourceContext) GetScheme() IR_idContext { return s.scheme }

func (s *OpendatasourceContext) GetTable() IR_idContext { return s.table }

func (s *OpendatasourceContext) SetDatabase(v IR_idContext) { s.database = v }

func (s *OpendatasourceContext) SetScheme(v IR_idContext) { s.scheme = v }

func (s *OpendatasourceContext) SetTable(v IR_idContext) { s.table = v }

func (s *OpendatasourceContext) OPENDATASOURCE() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPENDATASOURCE, 0)
}

func (s *OpendatasourceContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserSTRING)
}

func (s *OpendatasourceContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, i)
}

func (s *OpendatasourceContext) AllR_id() []IR_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IR_idContext)(nil)).Elem())
	var tst = make([]IR_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IR_idContext)
		}
	}

	return tst
}

func (s *OpendatasourceContext) R_id(i int) IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *OpendatasourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpendatasourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OpendatasourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOpendatasource(s)
	}
}

func (s *OpendatasourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOpendatasource(s)
	}
}

func (p *tsqlParser) Opendatasource() (localctx IOpendatasourceContext) {
	localctx = NewOpendatasourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, tsqlParserRULE_opendatasource)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1301)
		p.Match(tsqlParserOPENDATASOURCE)
	}
	{
		p.SetState(1302)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(1303)

		var _m = p.Match(tsqlParserSTRING)

		localctx.(*OpendatasourceContext).provider = _m
	}
	{
		p.SetState(1304)
		p.Match(tsqlParserCOMMA)
	}
	{
		p.SetState(1305)

		var _m = p.Match(tsqlParserSTRING)

		localctx.(*OpendatasourceContext).init = _m
	}
	{
		p.SetState(1306)
		p.Match(tsqlParserRR_BRACKET)
	}
	{
		p.SetState(1307)
		p.Match(tsqlParserDOT)
	}
	p.SetState(1309)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFORCESEEK || _la == tsqlParserNEXT || (((_la-196)&-(0x1f+1)) == 0 && ((1<<uint((_la-196)))&((1<<(tsqlParserABSOLUTE-196))|(1<<(tsqlParserAPPLY-196))|(1<<(tsqlParserAUTO-196))|(1<<(tsqlParserAVG-196))|(1<<(tsqlParserBASE64-196))|(1<<(tsqlParserCALLER-196))|(1<<(tsqlParserCAST-196))|(1<<(tsqlParserCATCH-196))|(1<<(tsqlParserCHECKSUM_AGG-196))|(1<<(tsqlParserCOMMITTED-196))|(1<<(tsqlParserCONCAT-196)))) != 0) || (((_la-228)&-(0x1f+1)) == 0 && ((1<<uint((_la-228)))&((1<<(tsqlParserCONTROL-228))|(1<<(tsqlParserCOOKIE-228))|(1<<(tsqlParserCOUNT-228))|(1<<(tsqlParserCOUNT_BIG-228))|(1<<(tsqlParserDELAY-228))|(1<<(tsqlParserDELETED-228))|(1<<(tsqlParserDENSE_RANK-228))|(1<<(tsqlParserDISABLE-228))|(1<<(tsqlParserDYNAMIC-228))|(1<<(tsqlParserENCRYPTION-228))|(1<<(tsqlParserEXPAND-228))|(1<<(tsqlParserFAST-228))|(1<<(tsqlParserFAST_FORWARD-228)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(tsqlParserFIRST-262))|(1<<(tsqlParserFOLLOWING-262))|(1<<(tsqlParserFORCE-262))|(1<<(tsqlParserFORCED-262))|(1<<(tsqlParserFORWARD_ONLY-262))|(1<<(tsqlParserFULLSCAN-262))|(1<<(tsqlParserGLOBAL-262))|(1<<(tsqlParserGO-262))|(1<<(tsqlParserGROUPING-262))|(1<<(tsqlParserGROUPING_ID-262))|(1<<(tsqlParserHASH-262))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-262))|(1<<(tsqlParserIMPERSONATE-262))|(1<<(tsqlParserINSENSITIVE-262))|(1<<(tsqlParserINSERTED-262))|(1<<(tsqlParserISOLATION-262))|(1<<(tsqlParserKEEP-262))|(1<<(tsqlParserKEEPFIXED-262))|(1<<(tsqlParserKEYSET-262))|(1<<(tsqlParserLAST-262))|(1<<(tsqlParserLEVEL-262))|(1<<(tsqlParserLOCAL-262))|(1<<(tsqlParserLOCK_ESCALATION-262))|(1<<(tsqlParserLOGIN-262))|(1<<(tsqlParserLOOP-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(tsqlParserMARK-294))|(1<<(tsqlParserMAX-294))|(1<<(tsqlParserMAXDOP-294))|(1<<(tsqlParserMAXRECURSION-294))|(1<<(tsqlParserMIN-294))|(1<<(tsqlParserMODIFY-294))|(1<<(tsqlParserNAME-294))|(1<<(tsqlParserNOCOUNT-294))|(1<<(tsqlParserNOEXPAND-294))|(1<<(tsqlParserNORECOMPUTE-294))|(1<<(tsqlParserNTILE-294))|(1<<(tsqlParserNUMBER-294))|(1<<(tsqlParserOFFSET-294))|(1<<(tsqlParserONLINE-294))|(1<<(tsqlParserONLY-294))|(1<<(tsqlParserOPTIMISTIC-294))|(1<<(tsqlParserOPTIMIZE-294))|(1<<(tsqlParserOUT-294))|(1<<(tsqlParserOUTPUT-294)))) != 0) || (((_la-326)&-(0x1f+1)) == 0 && ((1<<uint((_la-326)))&((1<<(tsqlParserOWNER-326))|(1<<(tsqlParserPARAMETERIZATION-326))|(1<<(tsqlParserPARTITION-326))|(1<<(tsqlParserPATH-326))|(1<<(tsqlParserPRECEDING-326))|(1<<(tsqlParserPRIOR-326))|(1<<(tsqlParserPRIVILEGES-326))|(1<<(tsqlParserRANGE-326))|(1<<(tsqlParserRANK-326))|(1<<(tsqlParserREADONLY-326))|(1<<(tsqlParserREAD_ONLY-326))|(1<<(tsqlParserRECOMPILE-326))|(1<<(tsqlParserRELATIVE-326))|(1<<(tsqlParserREMOTE-326))|(1<<(tsqlParserREPEATABLE-326))|(1<<(tsqlParserROBUST-326))|(1<<(tsqlParserROOT-326))|(1<<(tsqlParserROW-326))|(1<<(tsqlParserROWGUID-326))|(1<<(tsqlParserROWS-326))|(1<<(tsqlParserROW_NUMBER-326))|(1<<(tsqlParserSAMPLE-326))|(1<<(tsqlParserSCHEMABINDING-326))|(1<<(tsqlParserSCROLL-326))|(1<<(tsqlParserSCROLL_LOCKS-326)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(tsqlParserSELF-359))|(1<<(tsqlParserSERIALIZABLE-359))|(1<<(tsqlParserSIMPLE-359))|(1<<(tsqlParserSIZE-359))|(1<<(tsqlParserSNAPSHOT-359))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-359))|(1<<(tsqlParserSTATIC-359))|(1<<(tsqlParserSTATS_STREAM-359))|(1<<(tsqlParserSTDEV-359))|(1<<(tsqlParserSTDEVP-359))|(1<<(tsqlParserSUM-359))|(1<<(tsqlParserTEXTIMAGE_ON-359))|(1<<(tsqlParserTHROW-359))|(1<<(tsqlParserTIES-359))|(1<<(tsqlParserTIME-359))|(1<<(tsqlParserTRY-359))|(1<<(tsqlParserTYPE-359))|(1<<(tsqlParserTYPE_WARNING-359))|(1<<(tsqlParserUNBOUNDED-359))|(1<<(tsqlParserUNCOMMITTED-359))|(1<<(tsqlParserUNKNOWN-359))|(1<<(tsqlParserUSING-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(tsqlParserVAR-391))|(1<<(tsqlParserVARP-391))|(1<<(tsqlParserVIEWS-391))|(1<<(tsqlParserVIEW_METADATA-391))|(1<<(tsqlParserWORK-391))|(1<<(tsqlParserXML-391))|(1<<(tsqlParserXMLNAMESPACES-391))|(1<<(tsqlParserDOUBLE_QUOTE_ID-391))|(1<<(tsqlParserSQUARE_BRACKET_ID-391))|(1<<(tsqlParserID-391)))) != 0) {
		{
			p.SetState(1308)

			var _x = p.R_id()

			localctx.(*OpendatasourceContext).database = _x
		}

	}
	{
		p.SetState(1311)
		p.Match(tsqlParserDOT)
	}
	p.SetState(1313)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFORCESEEK || _la == tsqlParserNEXT || (((_la-196)&-(0x1f+1)) == 0 && ((1<<uint((_la-196)))&((1<<(tsqlParserABSOLUTE-196))|(1<<(tsqlParserAPPLY-196))|(1<<(tsqlParserAUTO-196))|(1<<(tsqlParserAVG-196))|(1<<(tsqlParserBASE64-196))|(1<<(tsqlParserCALLER-196))|(1<<(tsqlParserCAST-196))|(1<<(tsqlParserCATCH-196))|(1<<(tsqlParserCHECKSUM_AGG-196))|(1<<(tsqlParserCOMMITTED-196))|(1<<(tsqlParserCONCAT-196)))) != 0) || (((_la-228)&-(0x1f+1)) == 0 && ((1<<uint((_la-228)))&((1<<(tsqlParserCONTROL-228))|(1<<(tsqlParserCOOKIE-228))|(1<<(tsqlParserCOUNT-228))|(1<<(tsqlParserCOUNT_BIG-228))|(1<<(tsqlParserDELAY-228))|(1<<(tsqlParserDELETED-228))|(1<<(tsqlParserDENSE_RANK-228))|(1<<(tsqlParserDISABLE-228))|(1<<(tsqlParserDYNAMIC-228))|(1<<(tsqlParserENCRYPTION-228))|(1<<(tsqlParserEXPAND-228))|(1<<(tsqlParserFAST-228))|(1<<(tsqlParserFAST_FORWARD-228)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(tsqlParserFIRST-262))|(1<<(tsqlParserFOLLOWING-262))|(1<<(tsqlParserFORCE-262))|(1<<(tsqlParserFORCED-262))|(1<<(tsqlParserFORWARD_ONLY-262))|(1<<(tsqlParserFULLSCAN-262))|(1<<(tsqlParserGLOBAL-262))|(1<<(tsqlParserGO-262))|(1<<(tsqlParserGROUPING-262))|(1<<(tsqlParserGROUPING_ID-262))|(1<<(tsqlParserHASH-262))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-262))|(1<<(tsqlParserIMPERSONATE-262))|(1<<(tsqlParserINSENSITIVE-262))|(1<<(tsqlParserINSERTED-262))|(1<<(tsqlParserISOLATION-262))|(1<<(tsqlParserKEEP-262))|(1<<(tsqlParserKEEPFIXED-262))|(1<<(tsqlParserKEYSET-262))|(1<<(tsqlParserLAST-262))|(1<<(tsqlParserLEVEL-262))|(1<<(tsqlParserLOCAL-262))|(1<<(tsqlParserLOCK_ESCALATION-262))|(1<<(tsqlParserLOGIN-262))|(1<<(tsqlParserLOOP-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(tsqlParserMARK-294))|(1<<(tsqlParserMAX-294))|(1<<(tsqlParserMAXDOP-294))|(1<<(tsqlParserMAXRECURSION-294))|(1<<(tsqlParserMIN-294))|(1<<(tsqlParserMODIFY-294))|(1<<(tsqlParserNAME-294))|(1<<(tsqlParserNOCOUNT-294))|(1<<(tsqlParserNOEXPAND-294))|(1<<(tsqlParserNORECOMPUTE-294))|(1<<(tsqlParserNTILE-294))|(1<<(tsqlParserNUMBER-294))|(1<<(tsqlParserOFFSET-294))|(1<<(tsqlParserONLINE-294))|(1<<(tsqlParserONLY-294))|(1<<(tsqlParserOPTIMISTIC-294))|(1<<(tsqlParserOPTIMIZE-294))|(1<<(tsqlParserOUT-294))|(1<<(tsqlParserOUTPUT-294)))) != 0) || (((_la-326)&-(0x1f+1)) == 0 && ((1<<uint((_la-326)))&((1<<(tsqlParserOWNER-326))|(1<<(tsqlParserPARAMETERIZATION-326))|(1<<(tsqlParserPARTITION-326))|(1<<(tsqlParserPATH-326))|(1<<(tsqlParserPRECEDING-326))|(1<<(tsqlParserPRIOR-326))|(1<<(tsqlParserPRIVILEGES-326))|(1<<(tsqlParserRANGE-326))|(1<<(tsqlParserRANK-326))|(1<<(tsqlParserREADONLY-326))|(1<<(tsqlParserREAD_ONLY-326))|(1<<(tsqlParserRECOMPILE-326))|(1<<(tsqlParserRELATIVE-326))|(1<<(tsqlParserREMOTE-326))|(1<<(tsqlParserREPEATABLE-326))|(1<<(tsqlParserROBUST-326))|(1<<(tsqlParserROOT-326))|(1<<(tsqlParserROW-326))|(1<<(tsqlParserROWGUID-326))|(1<<(tsqlParserROWS-326))|(1<<(tsqlParserROW_NUMBER-326))|(1<<(tsqlParserSAMPLE-326))|(1<<(tsqlParserSCHEMABINDING-326))|(1<<(tsqlParserSCROLL-326))|(1<<(tsqlParserSCROLL_LOCKS-326)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(tsqlParserSELF-359))|(1<<(tsqlParserSERIALIZABLE-359))|(1<<(tsqlParserSIMPLE-359))|(1<<(tsqlParserSIZE-359))|(1<<(tsqlParserSNAPSHOT-359))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-359))|(1<<(tsqlParserSTATIC-359))|(1<<(tsqlParserSTATS_STREAM-359))|(1<<(tsqlParserSTDEV-359))|(1<<(tsqlParserSTDEVP-359))|(1<<(tsqlParserSUM-359))|(1<<(tsqlParserTEXTIMAGE_ON-359))|(1<<(tsqlParserTHROW-359))|(1<<(tsqlParserTIES-359))|(1<<(tsqlParserTIME-359))|(1<<(tsqlParserTRY-359))|(1<<(tsqlParserTYPE-359))|(1<<(tsqlParserTYPE_WARNING-359))|(1<<(tsqlParserUNBOUNDED-359))|(1<<(tsqlParserUNCOMMITTED-359))|(1<<(tsqlParserUNKNOWN-359))|(1<<(tsqlParserUSING-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(tsqlParserVAR-391))|(1<<(tsqlParserVARP-391))|(1<<(tsqlParserVIEWS-391))|(1<<(tsqlParserVIEW_METADATA-391))|(1<<(tsqlParserWORK-391))|(1<<(tsqlParserXML-391))|(1<<(tsqlParserXMLNAMESPACES-391))|(1<<(tsqlParserDOUBLE_QUOTE_ID-391))|(1<<(tsqlParserSQUARE_BRACKET_ID-391))|(1<<(tsqlParserID-391)))) != 0) {
		{
			p.SetState(1312)

			var _x = p.R_id()

			localctx.(*OpendatasourceContext).scheme = _x
		}

	}
	{
		p.SetState(1315)
		p.Match(tsqlParserDOT)
	}

	{
		p.SetState(1316)

		var _x = p.R_id()

		localctx.(*OpendatasourceContext).table = _x
	}

	return localctx
}

// IDeclare_statementContext is an interface to support dynamic dispatch.
type IDeclare_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_statementContext differentiates from other interfaces.
	IsDeclare_statementContext()
}

type Declare_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_statementContext() *Declare_statementContext {
	var p = new(Declare_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_declare_statement
	return p
}

func (*Declare_statementContext) IsDeclare_statementContext() {}

func NewDeclare_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_statementContext {
	var p = new(Declare_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_declare_statement

	return p
}

func (s *Declare_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_statementContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECLARE, 0)
}

func (s *Declare_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Declare_statementContext) Table_type_definition() ITable_type_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_type_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_type_definitionContext)
}

func (s *Declare_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Declare_statementContext) AllDeclare_local() []IDeclare_localContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclare_localContext)(nil)).Elem())
	var tst = make([]IDeclare_localContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclare_localContext)
		}
	}

	return tst
}

func (s *Declare_statementContext) Declare_local(i int) IDeclare_localContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_localContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclare_localContext)
}

func (s *Declare_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDeclare_statement(s)
	}
}

func (s *Declare_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDeclare_statement(s)
	}
}

func (p *tsqlParser) Declare_statement() (localctx IDeclare_statementContext) {
	localctx = NewDeclare_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, tsqlParserRULE_declare_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1339)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1318)
			p.Match(tsqlParserDECLARE)
		}
		{
			p.SetState(1319)
			p.Match(tsqlParserLOCAL_ID)
		}
		p.SetState(1321)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserAS {
			{
				p.SetState(1320)
				p.Match(tsqlParserAS)
			}

		}
		{
			p.SetState(1323)
			p.Table_type_definition()
		}
		p.SetState(1325)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 170, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1324)
				p.Match(tsqlParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1327)
			p.Match(tsqlParserDECLARE)
		}
		{
			p.SetState(1328)
			p.Declare_local()
		}
		p.SetState(1333)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(1329)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(1330)
				p.Declare_local()
			}

			p.SetState(1335)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1337)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 172, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1336)
				p.Match(tsqlParserSEMI)
			}

		}

	}

	return localctx
}

// ICursor_statementContext is an interface to support dynamic dispatch.
type ICursor_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursor_statementContext differentiates from other interfaces.
	IsCursor_statementContext()
}

type Cursor_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursor_statementContext() *Cursor_statementContext {
	var p = new(Cursor_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_cursor_statement
	return p
}

func (*Cursor_statementContext) IsCursor_statementContext() {}

func NewCursor_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cursor_statementContext {
	var p = new(Cursor_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_cursor_statement

	return p
}

func (s *Cursor_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Cursor_statementContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCLOSE, 0)
}

func (s *Cursor_statementContext) Cursor_name() ICursor_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_nameContext)
}

func (s *Cursor_statementContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserGLOBAL, 0)
}

func (s *Cursor_statementContext) DEALLOCATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEALLOCATE, 0)
}

func (s *Cursor_statementContext) Declare_cursor() IDeclare_cursorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_cursorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_cursorContext)
}

func (s *Cursor_statementContext) Fetch_cursor() IFetch_cursorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFetch_cursorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFetch_cursorContext)
}

func (s *Cursor_statementContext) OPEN() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPEN, 0)
}

func (s *Cursor_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cursor_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cursor_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCursor_statement(s)
	}
}

func (s *Cursor_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCursor_statement(s)
	}
}

func (p *tsqlParser) Cursor_statement() (localctx ICursor_statementContext) {
	localctx = NewCursor_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, tsqlParserRULE_cursor_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1367)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserCLOSE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1341)
			p.Match(tsqlParserCLOSE)
		}
		p.SetState(1343)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 174, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1342)
				p.Match(tsqlParserGLOBAL)
			}

		}
		{
			p.SetState(1345)
			p.Cursor_name()
		}
		p.SetState(1347)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1346)
				p.Match(tsqlParserSEMI)
			}

		}

	case tsqlParserDEALLOCATE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1349)
			p.Match(tsqlParserDEALLOCATE)
		}
		p.SetState(1351)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1350)
				p.Match(tsqlParserGLOBAL)
			}

		}
		{
			p.SetState(1353)
			p.Cursor_name()
		}
		p.SetState(1355)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1354)
				p.Match(tsqlParserSEMI)
			}

		}

	case tsqlParserDECLARE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1357)
			p.Declare_cursor()
		}

	case tsqlParserFETCH:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1358)
			p.Fetch_cursor()
		}

	case tsqlParserOPEN:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1359)
			p.Match(tsqlParserOPEN)
		}
		p.SetState(1361)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1360)
				p.Match(tsqlParserGLOBAL)
			}

		}
		{
			p.SetState(1363)
			p.Cursor_name()
		}
		p.SetState(1365)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 179, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1364)
				p.Match(tsqlParserSEMI)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExecute_statementContext is an interface to support dynamic dispatch.
type IExecute_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetReturn_status returns the return_status token.
	GetReturn_status() antlr.Token

	// SetReturn_status sets the return_status token.
	SetReturn_status(antlr.Token)

	// IsExecute_statementContext differentiates from other interfaces.
	IsExecute_statementContext()
}

type Execute_statementContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	return_status antlr.Token
}

func NewEmptyExecute_statementContext() *Execute_statementContext {
	var p = new(Execute_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_execute_statement
	return p
}

func (*Execute_statementContext) IsExecute_statementContext() {}

func NewExecute_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_statementContext {
	var p = new(Execute_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_execute_statement

	return p
}

func (s *Execute_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_statementContext) GetReturn_status() antlr.Token { return s.return_status }

func (s *Execute_statementContext) SetReturn_status(v antlr.Token) { s.return_status = v }

func (s *Execute_statementContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXECUTE, 0)
}

func (s *Execute_statementContext) Func_proc_name() IFunc_proc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_proc_nameContext)
}

func (s *Execute_statementContext) AllExecute_statement_arg() []IExecute_statement_argContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExecute_statement_argContext)(nil)).Elem())
	var tst = make([]IExecute_statement_argContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExecute_statement_argContext)
		}
	}

	return tst
}

func (s *Execute_statementContext) Execute_statement_arg(i int) IExecute_statement_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_statement_argContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExecute_statement_argContext)
}

func (s *Execute_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Execute_statementContext) AllExecute_var_string() []IExecute_var_stringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExecute_var_stringContext)(nil)).Elem())
	var tst = make([]IExecute_var_stringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExecute_var_stringContext)
		}
	}

	return tst
}

func (s *Execute_statementContext) Execute_var_string(i int) IExecute_var_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_var_stringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExecute_var_stringContext)
}

func (s *Execute_statementContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Execute_statementContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOGIN, 0)
}

func (s *Execute_statementContext) USER() antlr.TerminalNode {
	return s.GetToken(tsqlParserUSER, 0)
}

func (s *Execute_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Execute_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterExecute_statement(s)
	}
}

func (s *Execute_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitExecute_statement(s)
	}
}

func (p *tsqlParser) Execute_statement() (localctx IExecute_statementContext) {
	localctx = NewExecute_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, tsqlParserRULE_execute_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1410)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1369)
			p.Match(tsqlParserEXECUTE)
		}
		p.SetState(1372)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserLOCAL_ID {
			{
				p.SetState(1370)

				var _m = p.Match(tsqlParserLOCAL_ID)

				localctx.(*Execute_statementContext).return_status = _m
			}
			{
				p.SetState(1371)
				p.Match(tsqlParserEQUAL)
			}

		}
		{
			p.SetState(1374)
			p.Func_proc_name()
		}
		p.SetState(1383)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 183, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1375)
				p.Execute_statement_arg()
			}
			p.SetState(1380)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == tsqlParserCOMMA {
				{
					p.SetState(1376)
					p.Match(tsqlParserCOMMA)
				}
				{
					p.SetState(1377)
					p.Execute_statement_arg()
				}

				p.SetState(1382)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(1386)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1385)
				p.Match(tsqlParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1388)
			p.Match(tsqlParserEXECUTE)
		}
		{
			p.SetState(1389)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(1390)
			p.Execute_var_string()
		}
		p.SetState(1395)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserPLUS {
			{
				p.SetState(1391)
				p.Match(tsqlParserPLUS)
			}
			{
				p.SetState(1392)
				p.Execute_var_string()
			}

			p.SetState(1397)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1398)
			p.Match(tsqlParserRR_BRACKET)
		}
		p.SetState(1405)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 187, p.GetParserRuleContext()) == 1 {
			p.SetState(1400)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserAS {
				{
					p.SetState(1399)
					p.Match(tsqlParserAS)
				}

			}
			{
				p.SetState(1402)
				_la = p.GetTokenStream().LA(1)

				if !(_la == tsqlParserUSER || _la == tsqlParserLOGIN) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1403)
				p.Match(tsqlParserEQUAL)
			}
			{
				p.SetState(1404)
				p.Match(tsqlParserSTRING)
			}

		}
		p.SetState(1408)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 188, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1407)
				p.Match(tsqlParserSEMI)
			}

		}

	}

	return localctx
}

// IExecute_statement_argContext is an interface to support dynamic dispatch.
type IExecute_statement_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetParameter returns the parameter token.
	GetParameter() antlr.Token

	// SetParameter sets the parameter token.
	SetParameter(antlr.Token)

	// IsExecute_statement_argContext differentiates from other interfaces.
	IsExecute_statement_argContext()
}

type Execute_statement_argContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	parameter antlr.Token
}

func NewEmptyExecute_statement_argContext() *Execute_statement_argContext {
	var p = new(Execute_statement_argContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_execute_statement_arg
	return p
}

func (*Execute_statement_argContext) IsExecute_statement_argContext() {}

func NewExecute_statement_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_statement_argContext {
	var p = new(Execute_statement_argContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_execute_statement_arg

	return p
}

func (s *Execute_statement_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_statement_argContext) GetParameter() antlr.Token { return s.parameter }

func (s *Execute_statement_argContext) SetParameter(v antlr.Token) { s.parameter = v }

func (s *Execute_statement_argContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT, 0)
}

func (s *Execute_statement_argContext) NULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserNULL, 0)
}

func (s *Execute_statement_argContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Execute_statement_argContext) Constant_LOCAL_ID() IConstant_LOCAL_IDContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_LOCAL_IDContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_LOCAL_IDContext)
}

func (s *Execute_statement_argContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Execute_statement_argContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUTPUT, 0)
}

func (s *Execute_statement_argContext) OUT() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUT, 0)
}

func (s *Execute_statement_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_statement_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_statement_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterExecute_statement_arg(s)
	}
}

func (s *Execute_statement_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitExecute_statement_arg(s)
	}
}

func (p *tsqlParser) Execute_statement_arg() (localctx IExecute_statement_argContext) {
	localctx = NewExecute_statement_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, tsqlParserRULE_execute_statement_arg)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1414)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 190, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1412)

			var _m = p.Match(tsqlParserLOCAL_ID)

			localctx.(*Execute_statement_argContext).parameter = _m
		}
		{
			p.SetState(1413)
			p.Match(tsqlParserEQUAL)
		}

	}
	p.SetState(1425)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserLOCAL_ID, tsqlParserDECIMAL, tsqlParserID, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserPLUS, tsqlParserMINUS:
		p.SetState(1418)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserLOCAL_ID, tsqlParserDECIMAL, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserPLUS, tsqlParserMINUS:
			{
				p.SetState(1416)
				p.Constant_LOCAL_ID()
			}

		case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(1417)
				p.R_id()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1421)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 192, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1420)
				_la = p.GetTokenStream().LA(1)

				if !(_la == tsqlParserOUT || _la == tsqlParserOUTPUT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	case tsqlParserDEFAULT:
		{
			p.SetState(1423)
			p.Match(tsqlParserDEFAULT)
		}

	case tsqlParserNULL:
		{
			p.SetState(1424)
			p.Match(tsqlParserNULL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExecute_var_stringContext is an interface to support dynamic dispatch.
type IExecute_var_stringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecute_var_stringContext differentiates from other interfaces.
	IsExecute_var_stringContext()
}

type Execute_var_stringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecute_var_stringContext() *Execute_var_stringContext {
	var p = new(Execute_var_stringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_execute_var_string
	return p
}

func (*Execute_var_stringContext) IsExecute_var_stringContext() {}

func NewExecute_var_stringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_var_stringContext {
	var p = new(Execute_var_stringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_execute_var_string

	return p
}

func (s *Execute_var_stringContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_var_stringContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Execute_var_stringContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Execute_var_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_var_stringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_var_stringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterExecute_var_string(s)
	}
}

func (s *Execute_var_stringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitExecute_var_string(s)
	}
}

func (p *tsqlParser) Execute_var_string() (localctx IExecute_var_stringContext) {
	localctx = NewExecute_var_stringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, tsqlParserRULE_execute_var_string)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1427)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserLOCAL_ID || _la == tsqlParserSTRING) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISecurity_statementContext is an interface to support dynamic dispatch.
type ISecurity_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOn_id returns the on_id rule contexts.
	GetOn_id() ITable_nameContext

	// GetTo_principal returns the to_principal rule contexts.
	GetTo_principal() IR_idContext

	// GetAs_principal returns the as_principal rule contexts.
	GetAs_principal() IR_idContext

	// SetOn_id sets the on_id rule contexts.
	SetOn_id(ITable_nameContext)

	// SetTo_principal sets the to_principal rule contexts.
	SetTo_principal(IR_idContext)

	// SetAs_principal sets the as_principal rule contexts.
	SetAs_principal(IR_idContext)

	// IsSecurity_statementContext differentiates from other interfaces.
	IsSecurity_statementContext()
}

type Security_statementContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	on_id        ITable_nameContext
	to_principal IR_idContext
	as_principal IR_idContext
}

func NewEmptySecurity_statementContext() *Security_statementContext {
	var p = new(Security_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_security_statement
	return p
}

func (*Security_statementContext) IsSecurity_statementContext() {}

func NewSecurity_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Security_statementContext {
	var p = new(Security_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_security_statement

	return p
}

func (s *Security_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Security_statementContext) GetOn_id() ITable_nameContext { return s.on_id }

func (s *Security_statementContext) GetTo_principal() IR_idContext { return s.to_principal }

func (s *Security_statementContext) GetAs_principal() IR_idContext { return s.as_principal }

func (s *Security_statementContext) SetOn_id(v ITable_nameContext) { s.on_id = v }

func (s *Security_statementContext) SetTo_principal(v IR_idContext) { s.to_principal = v }

func (s *Security_statementContext) SetAs_principal(v IR_idContext) { s.as_principal = v }

func (s *Security_statementContext) Execute_clause() IExecute_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_clauseContext)
}

func (s *Security_statementContext) AllGRANT() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserGRANT)
}

func (s *Security_statementContext) GRANT(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserGRANT, i)
}

func (s *Security_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(tsqlParserTO, 0)
}

func (s *Security_statementContext) ALL() antlr.TerminalNode {
	return s.GetToken(tsqlParserALL, 0)
}

func (s *Security_statementContext) Grant_permission() IGrant_permissionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrant_permissionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrant_permissionContext)
}

func (s *Security_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Security_statementContext) AllR_id() []IR_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IR_idContext)(nil)).Elem())
	var tst = make([]IR_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IR_idContext)
		}
	}

	return tst
}

func (s *Security_statementContext) R_id(i int) IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Security_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Security_statementContext) OPTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPTION, 0)
}

func (s *Security_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Security_statementContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Security_statementContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRIVILEGES, 0)
}

func (s *Security_statementContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Security_statementContext) REVERT() antlr.TerminalNode {
	return s.GetToken(tsqlParserREVERT, 0)
}

func (s *Security_statementContext) COOKIE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOOKIE, 0)
}

func (s *Security_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Security_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Security_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Security_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSecurity_statement(s)
	}
}

func (s *Security_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSecurity_statement(s)
	}
}

func (p *tsqlParser) Security_statement() (localctx ISecurity_statementContext) {
	localctx = NewSecurity_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, tsqlParserRULE_security_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1477)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1429)
			p.Execute_clause()
		}
		p.SetState(1431)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1430)
				p.Match(tsqlParserSEMI)
			}

		}

	case tsqlParserGRANT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1433)
			p.Match(tsqlParserGRANT)
		}
		p.SetState(1445)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserALL:
			{
				p.SetState(1434)
				p.Match(tsqlParserALL)
			}
			p.SetState(1436)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserPRIVILEGES {
				{
					p.SetState(1435)
					p.Match(tsqlParserPRIVILEGES)
				}

			}

		case tsqlParserALTER, tsqlParserCREATE, tsqlParserEXECUTE, tsqlParserINSERT, tsqlParserREFERENCES, tsqlParserSELECT, tsqlParserVIEW, tsqlParserCONTROL, tsqlParserIMPERSONATE, tsqlParserSHOWPLAN, tsqlParserTAKE:
			{
				p.SetState(1438)
				p.Grant_permission()
			}
			p.SetState(1443)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserLR_BRACKET {
				{
					p.SetState(1439)
					p.Match(tsqlParserLR_BRACKET)
				}
				{
					p.SetState(1440)
					p.Column_name_list()
				}
				{
					p.SetState(1441)
					p.Match(tsqlParserRR_BRACKET)
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1449)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserON {
			{
				p.SetState(1447)
				p.Match(tsqlParserON)
			}
			{
				p.SetState(1448)

				var _x = p.Table_name()

				localctx.(*Security_statementContext).on_id = _x
			}

		}
		{
			p.SetState(1451)
			p.Match(tsqlParserTO)
		}

		{
			p.SetState(1452)

			var _x = p.R_id()

			localctx.(*Security_statementContext).to_principal = _x
		}

		p.SetState(1456)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 199, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1453)
				p.Match(tsqlParserWITH)
			}
			{
				p.SetState(1454)
				p.Match(tsqlParserGRANT)
			}
			{
				p.SetState(1455)
				p.Match(tsqlParserOPTION)
			}

		}
		p.SetState(1460)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserAS {
			{
				p.SetState(1458)
				p.Match(tsqlParserAS)
			}
			{
				p.SetState(1459)

				var _x = p.R_id()

				localctx.(*Security_statementContext).as_principal = _x
			}

		}
		p.SetState(1463)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 201, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1462)
				p.Match(tsqlParserSEMI)
			}

		}

	case tsqlParserREVERT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1465)
			p.Match(tsqlParserREVERT)
		}
		p.SetState(1472)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1466)
				p.Match(tsqlParserLR_BRACKET)
			}
			{
				p.SetState(1467)
				p.Match(tsqlParserWITH)
			}
			{
				p.SetState(1468)
				p.Match(tsqlParserCOOKIE)
			}
			{
				p.SetState(1469)
				p.Match(tsqlParserEQUAL)
			}
			{
				p.SetState(1470)
				p.Match(tsqlParserLOCAL_ID)
			}
			{
				p.SetState(1471)
				p.Match(tsqlParserRR_BRACKET)
			}

		}
		p.SetState(1475)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 203, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1474)
				p.Match(tsqlParserSEMI)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IGrant_permissionContext is an interface to support dynamic dispatch.
type IGrant_permissionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrant_permissionContext differentiates from other interfaces.
	IsGrant_permissionContext()
}

type Grant_permissionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrant_permissionContext() *Grant_permissionContext {
	var p = new(Grant_permissionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_grant_permission
	return p
}

func (*Grant_permissionContext) IsGrant_permissionContext() {}

func NewGrant_permissionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grant_permissionContext {
	var p = new(Grant_permissionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_grant_permission

	return p
}

func (s *Grant_permissionContext) GetParser() antlr.Parser { return s.parser }

func (s *Grant_permissionContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXECUTE, 0)
}

func (s *Grant_permissionContext) VIEW() antlr.TerminalNode {
	return s.GetToken(tsqlParserVIEW, 0)
}

func (s *Grant_permissionContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Grant_permissionContext) TAKE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTAKE, 0)
}

func (s *Grant_permissionContext) CONTROL() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONTROL, 0)
}

func (s *Grant_permissionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCREATE, 0)
}

func (s *Grant_permissionContext) TABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTABLE, 0)
}

func (s *Grant_permissionContext) SHOWPLAN() antlr.TerminalNode {
	return s.GetToken(tsqlParserSHOWPLAN, 0)
}

func (s *Grant_permissionContext) IMPERSONATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserIMPERSONATE, 0)
}

func (s *Grant_permissionContext) SELECT() antlr.TerminalNode {
	return s.GetToken(tsqlParserSELECT, 0)
}

func (s *Grant_permissionContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(tsqlParserREFERENCES, 0)
}

func (s *Grant_permissionContext) INSERT() antlr.TerminalNode {
	return s.GetToken(tsqlParserINSERT, 0)
}

func (s *Grant_permissionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(tsqlParserALTER, 0)
}

func (s *Grant_permissionContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDATABASE, 0)
}

func (s *Grant_permissionContext) ANY() antlr.TerminalNode {
	return s.GetToken(tsqlParserANY, 0)
}

func (s *Grant_permissionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grant_permissionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grant_permissionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterGrant_permission(s)
	}
}

func (s *Grant_permissionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitGrant_permission(s)
	}
}

func (p *tsqlParser) Grant_permission() (localctx IGrant_permissionContext) {
	localctx = NewGrant_permissionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, tsqlParserRULE_grant_permission)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1505)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1479)
			p.Match(tsqlParserEXECUTE)
		}

	case tsqlParserVIEW:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1480)
			p.Match(tsqlParserVIEW)
		}
		{
			p.SetState(1481)
			p.R_id()
		}

	case tsqlParserTAKE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1482)
			p.Match(tsqlParserTAKE)
		}
		{
			p.SetState(1483)
			p.R_id()
		}

	case tsqlParserCONTROL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1484)
			p.Match(tsqlParserCONTROL)
		}
		p.SetState(1486)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserFORCESEEK || _la == tsqlParserNEXT || (((_la-196)&-(0x1f+1)) == 0 && ((1<<uint((_la-196)))&((1<<(tsqlParserABSOLUTE-196))|(1<<(tsqlParserAPPLY-196))|(1<<(tsqlParserAUTO-196))|(1<<(tsqlParserAVG-196))|(1<<(tsqlParserBASE64-196))|(1<<(tsqlParserCALLER-196))|(1<<(tsqlParserCAST-196))|(1<<(tsqlParserCATCH-196))|(1<<(tsqlParserCHECKSUM_AGG-196))|(1<<(tsqlParserCOMMITTED-196))|(1<<(tsqlParserCONCAT-196)))) != 0) || (((_la-228)&-(0x1f+1)) == 0 && ((1<<uint((_la-228)))&((1<<(tsqlParserCONTROL-228))|(1<<(tsqlParserCOOKIE-228))|(1<<(tsqlParserCOUNT-228))|(1<<(tsqlParserCOUNT_BIG-228))|(1<<(tsqlParserDELAY-228))|(1<<(tsqlParserDELETED-228))|(1<<(tsqlParserDENSE_RANK-228))|(1<<(tsqlParserDISABLE-228))|(1<<(tsqlParserDYNAMIC-228))|(1<<(tsqlParserENCRYPTION-228))|(1<<(tsqlParserEXPAND-228))|(1<<(tsqlParserFAST-228))|(1<<(tsqlParserFAST_FORWARD-228)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(tsqlParserFIRST-262))|(1<<(tsqlParserFOLLOWING-262))|(1<<(tsqlParserFORCE-262))|(1<<(tsqlParserFORCED-262))|(1<<(tsqlParserFORWARD_ONLY-262))|(1<<(tsqlParserFULLSCAN-262))|(1<<(tsqlParserGLOBAL-262))|(1<<(tsqlParserGO-262))|(1<<(tsqlParserGROUPING-262))|(1<<(tsqlParserGROUPING_ID-262))|(1<<(tsqlParserHASH-262))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-262))|(1<<(tsqlParserIMPERSONATE-262))|(1<<(tsqlParserINSENSITIVE-262))|(1<<(tsqlParserINSERTED-262))|(1<<(tsqlParserISOLATION-262))|(1<<(tsqlParserKEEP-262))|(1<<(tsqlParserKEEPFIXED-262))|(1<<(tsqlParserKEYSET-262))|(1<<(tsqlParserLAST-262))|(1<<(tsqlParserLEVEL-262))|(1<<(tsqlParserLOCAL-262))|(1<<(tsqlParserLOCK_ESCALATION-262))|(1<<(tsqlParserLOGIN-262))|(1<<(tsqlParserLOOP-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(tsqlParserMARK-294))|(1<<(tsqlParserMAX-294))|(1<<(tsqlParserMAXDOP-294))|(1<<(tsqlParserMAXRECURSION-294))|(1<<(tsqlParserMIN-294))|(1<<(tsqlParserMODIFY-294))|(1<<(tsqlParserNAME-294))|(1<<(tsqlParserNOCOUNT-294))|(1<<(tsqlParserNOEXPAND-294))|(1<<(tsqlParserNORECOMPUTE-294))|(1<<(tsqlParserNTILE-294))|(1<<(tsqlParserNUMBER-294))|(1<<(tsqlParserOFFSET-294))|(1<<(tsqlParserONLINE-294))|(1<<(tsqlParserONLY-294))|(1<<(tsqlParserOPTIMISTIC-294))|(1<<(tsqlParserOPTIMIZE-294))|(1<<(tsqlParserOUT-294))|(1<<(tsqlParserOUTPUT-294)))) != 0) || (((_la-326)&-(0x1f+1)) == 0 && ((1<<uint((_la-326)))&((1<<(tsqlParserOWNER-326))|(1<<(tsqlParserPARAMETERIZATION-326))|(1<<(tsqlParserPARTITION-326))|(1<<(tsqlParserPATH-326))|(1<<(tsqlParserPRECEDING-326))|(1<<(tsqlParserPRIOR-326))|(1<<(tsqlParserPRIVILEGES-326))|(1<<(tsqlParserRANGE-326))|(1<<(tsqlParserRANK-326))|(1<<(tsqlParserREADONLY-326))|(1<<(tsqlParserREAD_ONLY-326))|(1<<(tsqlParserRECOMPILE-326))|(1<<(tsqlParserRELATIVE-326))|(1<<(tsqlParserREMOTE-326))|(1<<(tsqlParserREPEATABLE-326))|(1<<(tsqlParserROBUST-326))|(1<<(tsqlParserROOT-326))|(1<<(tsqlParserROW-326))|(1<<(tsqlParserROWGUID-326))|(1<<(tsqlParserROWS-326))|(1<<(tsqlParserROW_NUMBER-326))|(1<<(tsqlParserSAMPLE-326))|(1<<(tsqlParserSCHEMABINDING-326))|(1<<(tsqlParserSCROLL-326))|(1<<(tsqlParserSCROLL_LOCKS-326)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(tsqlParserSELF-359))|(1<<(tsqlParserSERIALIZABLE-359))|(1<<(tsqlParserSIMPLE-359))|(1<<(tsqlParserSIZE-359))|(1<<(tsqlParserSNAPSHOT-359))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-359))|(1<<(tsqlParserSTATIC-359))|(1<<(tsqlParserSTATS_STREAM-359))|(1<<(tsqlParserSTDEV-359))|(1<<(tsqlParserSTDEVP-359))|(1<<(tsqlParserSUM-359))|(1<<(tsqlParserTEXTIMAGE_ON-359))|(1<<(tsqlParserTHROW-359))|(1<<(tsqlParserTIES-359))|(1<<(tsqlParserTIME-359))|(1<<(tsqlParserTRY-359))|(1<<(tsqlParserTYPE-359))|(1<<(tsqlParserTYPE_WARNING-359))|(1<<(tsqlParserUNBOUNDED-359))|(1<<(tsqlParserUNCOMMITTED-359))|(1<<(tsqlParserUNKNOWN-359))|(1<<(tsqlParserUSING-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(tsqlParserVAR-391))|(1<<(tsqlParserVARP-391))|(1<<(tsqlParserVIEWS-391))|(1<<(tsqlParserVIEW_METADATA-391))|(1<<(tsqlParserWORK-391))|(1<<(tsqlParserXML-391))|(1<<(tsqlParserXMLNAMESPACES-391))|(1<<(tsqlParserDOUBLE_QUOTE_ID-391))|(1<<(tsqlParserSQUARE_BRACKET_ID-391))|(1<<(tsqlParserID-391)))) != 0) {
			{
				p.SetState(1485)
				p.R_id()
			}

		}

	case tsqlParserCREATE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1488)
			p.Match(tsqlParserCREATE)
		}
		{
			p.SetState(1489)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserTABLE || _la == tsqlParserVIEW) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case tsqlParserSHOWPLAN:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1490)
			p.Match(tsqlParserSHOWPLAN)
		}

	case tsqlParserIMPERSONATE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1491)
			p.Match(tsqlParserIMPERSONATE)
		}

	case tsqlParserSELECT:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1492)
			p.Match(tsqlParserSELECT)
		}

	case tsqlParserREFERENCES:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1493)
			p.Match(tsqlParserREFERENCES)
		}

	case tsqlParserINSERT:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1494)
			p.Match(tsqlParserINSERT)
		}

	case tsqlParserALTER:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1495)
			p.Match(tsqlParserALTER)
		}
		p.SetState(1503)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserANY || _la == tsqlParserDATABASE || _la == tsqlParserFORCESEEK || _la == tsqlParserNEXT || (((_la-196)&-(0x1f+1)) == 0 && ((1<<uint((_la-196)))&((1<<(tsqlParserABSOLUTE-196))|(1<<(tsqlParserAPPLY-196))|(1<<(tsqlParserAUTO-196))|(1<<(tsqlParserAVG-196))|(1<<(tsqlParserBASE64-196))|(1<<(tsqlParserCALLER-196))|(1<<(tsqlParserCAST-196))|(1<<(tsqlParserCATCH-196))|(1<<(tsqlParserCHECKSUM_AGG-196))|(1<<(tsqlParserCOMMITTED-196))|(1<<(tsqlParserCONCAT-196)))) != 0) || (((_la-228)&-(0x1f+1)) == 0 && ((1<<uint((_la-228)))&((1<<(tsqlParserCONTROL-228))|(1<<(tsqlParserCOOKIE-228))|(1<<(tsqlParserCOUNT-228))|(1<<(tsqlParserCOUNT_BIG-228))|(1<<(tsqlParserDELAY-228))|(1<<(tsqlParserDELETED-228))|(1<<(tsqlParserDENSE_RANK-228))|(1<<(tsqlParserDISABLE-228))|(1<<(tsqlParserDYNAMIC-228))|(1<<(tsqlParserENCRYPTION-228))|(1<<(tsqlParserEXPAND-228))|(1<<(tsqlParserFAST-228))|(1<<(tsqlParserFAST_FORWARD-228)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(tsqlParserFIRST-262))|(1<<(tsqlParserFOLLOWING-262))|(1<<(tsqlParserFORCE-262))|(1<<(tsqlParserFORCED-262))|(1<<(tsqlParserFORWARD_ONLY-262))|(1<<(tsqlParserFULLSCAN-262))|(1<<(tsqlParserGLOBAL-262))|(1<<(tsqlParserGO-262))|(1<<(tsqlParserGROUPING-262))|(1<<(tsqlParserGROUPING_ID-262))|(1<<(tsqlParserHASH-262))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-262))|(1<<(tsqlParserIMPERSONATE-262))|(1<<(tsqlParserINSENSITIVE-262))|(1<<(tsqlParserINSERTED-262))|(1<<(tsqlParserISOLATION-262))|(1<<(tsqlParserKEEP-262))|(1<<(tsqlParserKEEPFIXED-262))|(1<<(tsqlParserKEYSET-262))|(1<<(tsqlParserLAST-262))|(1<<(tsqlParserLEVEL-262))|(1<<(tsqlParserLOCAL-262))|(1<<(tsqlParserLOCK_ESCALATION-262))|(1<<(tsqlParserLOGIN-262))|(1<<(tsqlParserLOOP-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(tsqlParserMARK-294))|(1<<(tsqlParserMAX-294))|(1<<(tsqlParserMAXDOP-294))|(1<<(tsqlParserMAXRECURSION-294))|(1<<(tsqlParserMIN-294))|(1<<(tsqlParserMODIFY-294))|(1<<(tsqlParserNAME-294))|(1<<(tsqlParserNOCOUNT-294))|(1<<(tsqlParserNOEXPAND-294))|(1<<(tsqlParserNORECOMPUTE-294))|(1<<(tsqlParserNTILE-294))|(1<<(tsqlParserNUMBER-294))|(1<<(tsqlParserOFFSET-294))|(1<<(tsqlParserONLINE-294))|(1<<(tsqlParserONLY-294))|(1<<(tsqlParserOPTIMISTIC-294))|(1<<(tsqlParserOPTIMIZE-294))|(1<<(tsqlParserOUT-294))|(1<<(tsqlParserOUTPUT-294)))) != 0) || (((_la-326)&-(0x1f+1)) == 0 && ((1<<uint((_la-326)))&((1<<(tsqlParserOWNER-326))|(1<<(tsqlParserPARAMETERIZATION-326))|(1<<(tsqlParserPARTITION-326))|(1<<(tsqlParserPATH-326))|(1<<(tsqlParserPRECEDING-326))|(1<<(tsqlParserPRIOR-326))|(1<<(tsqlParserPRIVILEGES-326))|(1<<(tsqlParserRANGE-326))|(1<<(tsqlParserRANK-326))|(1<<(tsqlParserREADONLY-326))|(1<<(tsqlParserREAD_ONLY-326))|(1<<(tsqlParserRECOMPILE-326))|(1<<(tsqlParserRELATIVE-326))|(1<<(tsqlParserREMOTE-326))|(1<<(tsqlParserREPEATABLE-326))|(1<<(tsqlParserROBUST-326))|(1<<(tsqlParserROOT-326))|(1<<(tsqlParserROW-326))|(1<<(tsqlParserROWGUID-326))|(1<<(tsqlParserROWS-326))|(1<<(tsqlParserROW_NUMBER-326))|(1<<(tsqlParserSAMPLE-326))|(1<<(tsqlParserSCHEMABINDING-326))|(1<<(tsqlParserSCROLL-326))|(1<<(tsqlParserSCROLL_LOCKS-326)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(tsqlParserSELF-359))|(1<<(tsqlParserSERIALIZABLE-359))|(1<<(tsqlParserSIMPLE-359))|(1<<(tsqlParserSIZE-359))|(1<<(tsqlParserSNAPSHOT-359))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-359))|(1<<(tsqlParserSTATIC-359))|(1<<(tsqlParserSTATS_STREAM-359))|(1<<(tsqlParserSTDEV-359))|(1<<(tsqlParserSTDEVP-359))|(1<<(tsqlParserSUM-359))|(1<<(tsqlParserTEXTIMAGE_ON-359))|(1<<(tsqlParserTHROW-359))|(1<<(tsqlParserTIES-359))|(1<<(tsqlParserTIME-359))|(1<<(tsqlParserTRY-359))|(1<<(tsqlParserTYPE-359))|(1<<(tsqlParserTYPE_WARNING-359))|(1<<(tsqlParserUNBOUNDED-359))|(1<<(tsqlParserUNCOMMITTED-359))|(1<<(tsqlParserUNKNOWN-359))|(1<<(tsqlParserUSING-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(tsqlParserVAR-391))|(1<<(tsqlParserVARP-391))|(1<<(tsqlParserVIEWS-391))|(1<<(tsqlParserVIEW_METADATA-391))|(1<<(tsqlParserWORK-391))|(1<<(tsqlParserXML-391))|(1<<(tsqlParserXMLNAMESPACES-391))|(1<<(tsqlParserDOUBLE_QUOTE_ID-391))|(1<<(tsqlParserSQUARE_BRACKET_ID-391))|(1<<(tsqlParserID-391)))) != 0) {
			p.SetState(1497)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserANY {
				{
					p.SetState(1496)
					p.Match(tsqlParserANY)
				}

			}
			p.SetState(1501)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
				{
					p.SetState(1499)
					p.R_id()
				}

			case tsqlParserDATABASE:
				{
					p.SetState(1500)
					p.Match(tsqlParserDATABASE)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISet_statementContext is an interface to support dynamic dispatch.
type ISet_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMember_name returns the member_name rule contexts.
	GetMember_name() IR_idContext

	// SetMember_name sets the member_name rule contexts.
	SetMember_name(IR_idContext)

	// IsSet_statementContext differentiates from other interfaces.
	IsSet_statementContext()
}

type Set_statementContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	member_name IR_idContext
}

func NewEmptySet_statementContext() *Set_statementContext {
	var p = new(Set_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_set_statement
	return p
}

func (*Set_statementContext) IsSet_statementContext() {}

func NewSet_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_statementContext {
	var p = new(Set_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_set_statement

	return p
}

func (s *Set_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_statementContext) GetMember_name() IR_idContext { return s.member_name }

func (s *Set_statementContext) SetMember_name(v IR_idContext) { s.member_name = v }

func (s *Set_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(tsqlParserSET, 0)
}

func (s *Set_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Set_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Set_statementContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Set_statementContext) Assignment_operator() IAssignment_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_operatorContext)
}

func (s *Set_statementContext) CURSOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURSOR, 0)
}

func (s *Set_statementContext) Declare_set_cursor_common() IDeclare_set_cursor_commonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_set_cursor_commonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_set_cursor_commonContext)
}

func (s *Set_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *Set_statementContext) READ() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD, 0)
}

func (s *Set_statementContext) ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserONLY, 0)
}

func (s *Set_statementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserUPDATE, 0)
}

func (s *Set_statementContext) OF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOF, 0)
}

func (s *Set_statementContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Set_statementContext) Set_special() ISet_specialContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_specialContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_specialContext)
}

func (s *Set_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSet_statement(s)
	}
}

func (s *Set_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSet_statement(s)
	}
}

func (p *tsqlParser) Set_statement() (localctx ISet_statementContext) {
	localctx = NewSet_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, tsqlParserRULE_set_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1546)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 217, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1507)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1508)
			p.Match(tsqlParserLOCAL_ID)
		}
		p.SetState(1511)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserDOT {
			{
				p.SetState(1509)
				p.Match(tsqlParserDOT)
			}
			{
				p.SetState(1510)

				var _x = p.R_id()

				localctx.(*Set_statementContext).member_name = _x
			}

		}
		{
			p.SetState(1513)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1514)
			p.expression(0)
		}
		p.SetState(1516)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1515)
				p.Match(tsqlParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1518)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1519)
			p.Match(tsqlParserLOCAL_ID)
		}
		{
			p.SetState(1520)
			p.Assignment_operator()
		}
		{
			p.SetState(1521)
			p.expression(0)
		}
		p.SetState(1523)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 212, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1522)
				p.Match(tsqlParserSEMI)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1525)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1526)
			p.Match(tsqlParserLOCAL_ID)
		}
		{
			p.SetState(1527)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1528)
			p.Match(tsqlParserCURSOR)
		}
		{
			p.SetState(1529)
			p.Declare_set_cursor_common()
		}
		p.SetState(1540)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserFOR {
			{
				p.SetState(1530)
				p.Match(tsqlParserFOR)
			}
			p.SetState(1538)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case tsqlParserREAD:
				{
					p.SetState(1531)
					p.Match(tsqlParserREAD)
				}
				{
					p.SetState(1532)
					p.Match(tsqlParserONLY)
				}

			case tsqlParserUPDATE:
				{
					p.SetState(1533)
					p.Match(tsqlParserUPDATE)
				}
				p.SetState(1536)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == tsqlParserOF {
					{
						p.SetState(1534)
						p.Match(tsqlParserOF)
					}
					{
						p.SetState(1535)
						p.Column_name_list()
					}

				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(1543)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 216, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1542)
				p.Match(tsqlParserSEMI)
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1545)
			p.Set_special()
		}

	}

	return localctx
}

// ITransaction_statementContext is an interface to support dynamic dispatch.
type ITransaction_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransaction_statementContext differentiates from other interfaces.
	IsTransaction_statementContext()
}

type Transaction_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_statementContext() *Transaction_statementContext {
	var p = new(Transaction_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_transaction_statement
	return p
}

func (*Transaction_statementContext) IsTransaction_statementContext() {}

func NewTransaction_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_statementContext {
	var p = new(Transaction_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_transaction_statement

	return p
}

func (s *Transaction_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_statementContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserBEGIN, 0)
}

func (s *Transaction_statementContext) DISTRIBUTED() antlr.TerminalNode {
	return s.GetToken(tsqlParserDISTRIBUTED, 0)
}

func (s *Transaction_statementContext) TRAN() antlr.TerminalNode {
	return s.GetToken(tsqlParserTRAN, 0)
}

func (s *Transaction_statementContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserTRANSACTION, 0)
}

func (s *Transaction_statementContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Transaction_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Transaction_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Transaction_statementContext) MARK() antlr.TerminalNode {
	return s.GetToken(tsqlParserMARK, 0)
}

func (s *Transaction_statementContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Transaction_statementContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOMMIT, 0)
}

func (s *Transaction_statementContext) DELAYED_DURABILITY() antlr.TerminalNode {
	return s.GetToken(tsqlParserDELAYED_DURABILITY, 0)
}

func (s *Transaction_statementContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Transaction_statementContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *Transaction_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Transaction_statementContext) WORK() antlr.TerminalNode {
	return s.GetToken(tsqlParserWORK, 0)
}

func (s *Transaction_statementContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(tsqlParserROLLBACK, 0)
}

func (s *Transaction_statementContext) SAVE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSAVE, 0)
}

func (s *Transaction_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Transaction_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTransaction_statement(s)
	}
}

func (s *Transaction_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTransaction_statement(s)
	}
}

func (p *tsqlParser) Transaction_statement() (localctx ITransaction_statementContext) {
	localctx = NewTransaction_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, tsqlParserRULE_transaction_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1625)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 236, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1548)
			p.Match(tsqlParserBEGIN)
		}
		{
			p.SetState(1549)
			p.Match(tsqlParserDISTRIBUTED)
		}
		{
			p.SetState(1550)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserTRAN || _la == tsqlParserTRANSACTION) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1553)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1551)
				p.R_id()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1552)
				p.Match(tsqlParserLOCAL_ID)
			}

		}
		p.SetState(1556)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 219, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1555)
				p.Match(tsqlParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1558)
			p.Match(tsqlParserBEGIN)
		}
		{
			p.SetState(1559)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserTRAN || _la == tsqlParserTRANSACTION) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1569)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 222, p.GetParserRuleContext()) == 1 {
			p.SetState(1562)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
				{
					p.SetState(1560)
					p.R_id()
				}

			case tsqlParserLOCAL_ID:
				{
					p.SetState(1561)
					p.Match(tsqlParserLOCAL_ID)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			p.SetState(1567)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 221, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1564)
					p.Match(tsqlParserWITH)
				}
				{
					p.SetState(1565)
					p.Match(tsqlParserMARK)
				}
				{
					p.SetState(1566)
					p.Match(tsqlParserSTRING)
				}

			}

		}
		p.SetState(1572)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 223, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1571)
				p.Match(tsqlParserSEMI)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1574)
			p.Match(tsqlParserCOMMIT)
		}
		{
			p.SetState(1575)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserTRAN || _la == tsqlParserTRANSACTION) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1588)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 226, p.GetParserRuleContext()) == 1 {
			p.SetState(1578)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
				{
					p.SetState(1576)
					p.R_id()
				}

			case tsqlParserLOCAL_ID:
				{
					p.SetState(1577)
					p.Match(tsqlParserLOCAL_ID)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			p.SetState(1586)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 225, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1580)
					p.Match(tsqlParserWITH)
				}
				{
					p.SetState(1581)
					p.Match(tsqlParserLR_BRACKET)
				}
				{
					p.SetState(1582)
					p.Match(tsqlParserDELAYED_DURABILITY)
				}
				{
					p.SetState(1583)
					p.Match(tsqlParserEQUAL)
				}
				{
					p.SetState(1584)
					_la = p.GetTokenStream().LA(1)

					if !(_la == tsqlParserOFF || _la == tsqlParserON) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1585)
					p.Match(tsqlParserRR_BRACKET)
				}

			}

		}
		p.SetState(1591)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 227, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1590)
				p.Match(tsqlParserSEMI)
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1593)
			p.Match(tsqlParserCOMMIT)
		}
		p.SetState(1595)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 228, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1594)
				p.Match(tsqlParserWORK)
			}

		}
		p.SetState(1598)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 229, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1597)
				p.Match(tsqlParserSEMI)
			}

		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1600)
			p.Match(tsqlParserROLLBACK)
		}
		{
			p.SetState(1601)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserTRAN || _la == tsqlParserTRANSACTION) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1604)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1602)
				p.R_id()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1603)
				p.Match(tsqlParserLOCAL_ID)
			}

		}
		p.SetState(1607)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1606)
				p.Match(tsqlParserSEMI)
			}

		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1609)
			p.Match(tsqlParserROLLBACK)
		}
		p.SetState(1611)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 232, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1610)
				p.Match(tsqlParserWORK)
			}

		}
		p.SetState(1614)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 233, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1613)
				p.Match(tsqlParserSEMI)
			}

		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1616)
			p.Match(tsqlParserSAVE)
		}
		{
			p.SetState(1617)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserTRAN || _la == tsqlParserTRANSACTION) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1620)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1618)
				p.R_id()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1619)
				p.Match(tsqlParserLOCAL_ID)
			}

		}
		p.SetState(1623)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 235, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1622)
				p.Match(tsqlParserSEMI)
			}

		}

	}

	return localctx
}

// IGo_statementContext is an interface to support dynamic dispatch.
type IGo_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCount returns the count token.
	GetCount() antlr.Token

	// SetCount sets the count token.
	SetCount(antlr.Token)

	// IsGo_statementContext differentiates from other interfaces.
	IsGo_statementContext()
}

type Go_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	count  antlr.Token
}

func NewEmptyGo_statementContext() *Go_statementContext {
	var p = new(Go_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_go_statement
	return p
}

func (*Go_statementContext) IsGo_statementContext() {}

func NewGo_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Go_statementContext {
	var p = new(Go_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_go_statement

	return p
}

func (s *Go_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Go_statementContext) GetCount() antlr.Token { return s.count }

func (s *Go_statementContext) SetCount(v antlr.Token) { s.count = v }

func (s *Go_statementContext) GO() antlr.TerminalNode {
	return s.GetToken(tsqlParserGO, 0)
}

func (s *Go_statementContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Go_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Go_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Go_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterGo_statement(s)
	}
}

func (s *Go_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitGo_statement(s)
	}
}

func (p *tsqlParser) Go_statement() (localctx IGo_statementContext) {
	localctx = NewGo_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, tsqlParserRULE_go_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1627)
		p.Match(tsqlParserGO)
	}
	p.SetState(1629)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserDECIMAL {
		{
			p.SetState(1628)

			var _m = p.Match(tsqlParserDECIMAL)

			localctx.(*Go_statementContext).count = _m
		}

	}

	return localctx
}

// IUse_statementContext is an interface to support dynamic dispatch.
type IUse_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase returns the database rule contexts.
	GetDatabase() IR_idContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IR_idContext)

	// IsUse_statementContext differentiates from other interfaces.
	IsUse_statementContext()
}

type Use_statementContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	database IR_idContext
}

func NewEmptyUse_statementContext() *Use_statementContext {
	var p = new(Use_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_use_statement
	return p
}

func (*Use_statementContext) IsUse_statementContext() {}

func NewUse_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Use_statementContext {
	var p = new(Use_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_use_statement

	return p
}

func (s *Use_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Use_statementContext) GetDatabase() IR_idContext { return s.database }

func (s *Use_statementContext) SetDatabase(v IR_idContext) { s.database = v }

func (s *Use_statementContext) USE() antlr.TerminalNode {
	return s.GetToken(tsqlParserUSE, 0)
}

func (s *Use_statementContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Use_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Use_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Use_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterUse_statement(s)
	}
}

func (s *Use_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitUse_statement(s)
	}
}

func (p *tsqlParser) Use_statement() (localctx IUse_statementContext) {
	localctx = NewUse_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, tsqlParserRULE_use_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1631)
		p.Match(tsqlParserUSE)
	}
	{
		p.SetState(1632)

		var _x = p.R_id()

		localctx.(*Use_statementContext).database = _x
	}
	p.SetState(1634)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1633)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IExecute_clauseContext is an interface to support dynamic dispatch.
type IExecute_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetClause returns the clause token.
	GetClause() antlr.Token

	// SetClause sets the clause token.
	SetClause(antlr.Token)

	// IsExecute_clauseContext differentiates from other interfaces.
	IsExecute_clauseContext()
}

type Execute_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	clause antlr.Token
}

func NewEmptyExecute_clauseContext() *Execute_clauseContext {
	var p = new(Execute_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_execute_clause
	return p
}

func (*Execute_clauseContext) IsExecute_clauseContext() {}

func NewExecute_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_clauseContext {
	var p = new(Execute_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_execute_clause

	return p
}

func (s *Execute_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_clauseContext) GetClause() antlr.Token { return s.clause }

func (s *Execute_clauseContext) SetClause(v antlr.Token) { s.clause = v }

func (s *Execute_clauseContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXECUTE, 0)
}

func (s *Execute_clauseContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Execute_clauseContext) CALLER() antlr.TerminalNode {
	return s.GetToken(tsqlParserCALLER, 0)
}

func (s *Execute_clauseContext) SELF() antlr.TerminalNode {
	return s.GetToken(tsqlParserSELF, 0)
}

func (s *Execute_clauseContext) OWNER() antlr.TerminalNode {
	return s.GetToken(tsqlParserOWNER, 0)
}

func (s *Execute_clauseContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Execute_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterExecute_clause(s)
	}
}

func (s *Execute_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitExecute_clause(s)
	}
}

func (p *tsqlParser) Execute_clause() (localctx IExecute_clauseContext) {
	localctx = NewExecute_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, tsqlParserRULE_execute_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1636)
		p.Match(tsqlParserEXECUTE)
	}
	{
		p.SetState(1637)
		p.Match(tsqlParserAS)
	}
	{
		p.SetState(1638)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Execute_clauseContext).clause = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserCALLER || _la == tsqlParserOWNER || _la == tsqlParserSELF || _la == tsqlParserSTRING) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Execute_clauseContext).clause = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDeclare_localContext is an interface to support dynamic dispatch.
type IDeclare_localContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_localContext differentiates from other interfaces.
	IsDeclare_localContext()
}

type Declare_localContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_localContext() *Declare_localContext {
	var p = new(Declare_localContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_declare_local
	return p
}

func (*Declare_localContext) IsDeclare_localContext() {}

func NewDeclare_localContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_localContext {
	var p = new(Declare_localContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_declare_local

	return p
}

func (s *Declare_localContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_localContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Declare_localContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Declare_localContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Declare_localContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Declare_localContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_localContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_localContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDeclare_local(s)
	}
}

func (s *Declare_localContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDeclare_local(s)
	}
}

func (p *tsqlParser) Declare_local() (localctx IDeclare_localContext) {
	localctx = NewDeclare_localContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, tsqlParserRULE_declare_local)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1640)
		p.Match(tsqlParserLOCAL_ID)
	}
	p.SetState(1642)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserAS {
		{
			p.SetState(1641)
			p.Match(tsqlParserAS)
		}

	}
	{
		p.SetState(1644)
		p.Data_type()
	}
	p.SetState(1647)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserEQUAL {
		{
			p.SetState(1645)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1646)
			p.expression(0)
		}

	}

	return localctx
}

// ITable_type_definitionContext is an interface to support dynamic dispatch.
type ITable_type_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_type_definitionContext differentiates from other interfaces.
	IsTable_type_definitionContext()
}

type Table_type_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_type_definitionContext() *Table_type_definitionContext {
	var p = new(Table_type_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_type_definition
	return p
}

func (*Table_type_definitionContext) IsTable_type_definitionContext() {}

func NewTable_type_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_type_definitionContext {
	var p = new(Table_type_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_type_definition

	return p
}

func (s *Table_type_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_type_definitionContext) TABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTABLE, 0)
}

func (s *Table_type_definitionContext) Column_def_table_constraints() IColumn_def_table_constraintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintsContext)
}

func (s *Table_type_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_type_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_type_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_type_definition(s)
	}
}

func (s *Table_type_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_type_definition(s)
	}
}

func (p *tsqlParser) Table_type_definition() (localctx ITable_type_definitionContext) {
	localctx = NewTable_type_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, tsqlParserRULE_table_type_definition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1649)
		p.Match(tsqlParserTABLE)
	}
	{
		p.SetState(1650)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(1651)
		p.Column_def_table_constraints()
	}
	{
		p.SetState(1652)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IColumn_def_table_constraintsContext is an interface to support dynamic dispatch.
type IColumn_def_table_constraintsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_def_table_constraintsContext differentiates from other interfaces.
	IsColumn_def_table_constraintsContext()
}

type Column_def_table_constraintsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_def_table_constraintsContext() *Column_def_table_constraintsContext {
	var p = new(Column_def_table_constraintsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_column_def_table_constraints
	return p
}

func (*Column_def_table_constraintsContext) IsColumn_def_table_constraintsContext() {}

func NewColumn_def_table_constraintsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_def_table_constraintsContext {
	var p = new(Column_def_table_constraintsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_column_def_table_constraints

	return p
}

func (s *Column_def_table_constraintsContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_def_table_constraintsContext) AllColumn_def_table_constraint() []IColumn_def_table_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_def_table_constraintContext)(nil)).Elem())
	var tst = make([]IColumn_def_table_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_def_table_constraintContext)
		}
	}

	return tst
}

func (s *Column_def_table_constraintsContext) Column_def_table_constraint(i int) IColumn_def_table_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintContext)
}

func (s *Column_def_table_constraintsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_def_table_constraintsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_def_table_constraintsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterColumn_def_table_constraints(s)
	}
}

func (s *Column_def_table_constraintsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitColumn_def_table_constraints(s)
	}
}

func (p *tsqlParser) Column_def_table_constraints() (localctx IColumn_def_table_constraintsContext) {
	localctx = NewColumn_def_table_constraintsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, tsqlParserRULE_column_def_table_constraints)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1654)
		p.Column_def_table_constraint()
	}
	p.SetState(1661)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1656)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserCOMMA {
				{
					p.SetState(1655)
					p.Match(tsqlParserCOMMA)
				}

			}
			{
				p.SetState(1658)
				p.Column_def_table_constraint()
			}

		}
		p.SetState(1663)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext())
	}

	return localctx
}

// IColumn_def_table_constraintContext is an interface to support dynamic dispatch.
type IColumn_def_table_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_def_table_constraintContext differentiates from other interfaces.
	IsColumn_def_table_constraintContext()
}

type Column_def_table_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_def_table_constraintContext() *Column_def_table_constraintContext {
	var p = new(Column_def_table_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_column_def_table_constraint
	return p
}

func (*Column_def_table_constraintContext) IsColumn_def_table_constraintContext() {}

func NewColumn_def_table_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_def_table_constraintContext {
	var p = new(Column_def_table_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_column_def_table_constraint

	return p
}

func (s *Column_def_table_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_def_table_constraintContext) Column_definition() IColumn_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_definitionContext)
}

func (s *Column_def_table_constraintContext) Table_constraint() ITable_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_constraintContext)
}

func (s *Column_def_table_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_def_table_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_def_table_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterColumn_def_table_constraint(s)
	}
}

func (s *Column_def_table_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitColumn_def_table_constraint(s)
	}
}

func (p *tsqlParser) Column_def_table_constraint() (localctx IColumn_def_table_constraintContext) {
	localctx = NewColumn_def_table_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, tsqlParserRULE_column_def_table_constraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1666)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1664)
			p.Column_definition()
		}

	case tsqlParserCHECK, tsqlParserCONSTRAINT, tsqlParserPRIMARY, tsqlParserUNIQUE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1665)
			p.Table_constraint()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IColumn_definitionContext is an interface to support dynamic dispatch.
type IColumn_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSeed returns the seed token.
	GetSeed() antlr.Token

	// GetIncrement returns the increment token.
	GetIncrement() antlr.Token

	// SetSeed sets the seed token.
	SetSeed(antlr.Token)

	// SetIncrement sets the increment token.
	SetIncrement(antlr.Token)

	// GetName returns the name rule contexts.
	GetName() IR_idContext

	// GetData_type_name returns the data_type_name rule contexts.
	GetData_type_name() IData_typeContext

	// GetConstraint returns the constraint rule contexts.
	GetConstraint() IR_idContext

	// SetName sets the name rule contexts.
	SetName(IR_idContext)

	// SetData_type_name sets the data_type_name rule contexts.
	SetData_type_name(IData_typeContext)

	// SetConstraint sets the constraint rule contexts.
	SetConstraint(IR_idContext)

	// IsColumn_definitionContext differentiates from other interfaces.
	IsColumn_definitionContext()
}

type Column_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	name           IR_idContext
	data_type_name IData_typeContext
	constraint     IR_idContext
	seed           antlr.Token
	increment      antlr.Token
}

func NewEmptyColumn_definitionContext() *Column_definitionContext {
	var p = new(Column_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_column_definition
	return p
}

func (*Column_definitionContext) IsColumn_definitionContext() {}

func NewColumn_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_definitionContext {
	var p = new(Column_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_column_definition

	return p
}

func (s *Column_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_definitionContext) GetSeed() antlr.Token { return s.seed }

func (s *Column_definitionContext) GetIncrement() antlr.Token { return s.increment }

func (s *Column_definitionContext) SetSeed(v antlr.Token) { s.seed = v }

func (s *Column_definitionContext) SetIncrement(v antlr.Token) { s.increment = v }

func (s *Column_definitionContext) GetName() IR_idContext { return s.name }

func (s *Column_definitionContext) GetData_type_name() IData_typeContext { return s.data_type_name }

func (s *Column_definitionContext) GetConstraint() IR_idContext { return s.constraint }

func (s *Column_definitionContext) SetName(v IR_idContext) { s.name = v }

func (s *Column_definitionContext) SetData_type_name(v IData_typeContext) { s.data_type_name = v }

func (s *Column_definitionContext) SetConstraint(v IR_idContext) { s.constraint = v }

func (s *Column_definitionContext) AllR_id() []IR_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IR_idContext)(nil)).Elem())
	var tst = make([]IR_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IR_idContext)
		}
	}

	return tst
}

func (s *Column_definitionContext) R_id(i int) IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Column_definitionContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Column_definitionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Column_definitionContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Column_definitionContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOLLATE, 0)
}

func (s *Column_definitionContext) Null_notnull() INull_notnullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INull_notnullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INull_notnullContext)
}

func (s *Column_definitionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT, 0)
}

func (s *Column_definitionContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Column_definitionContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(tsqlParserIDENTITY, 0)
}

func (s *Column_definitionContext) ROWGUIDCOL() antlr.TerminalNode {
	return s.GetToken(tsqlParserROWGUIDCOL, 0)
}

func (s *Column_definitionContext) AllColumn_constraint() []IColumn_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_constraintContext)(nil)).Elem())
	var tst = make([]IColumn_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_constraintContext)
		}
	}

	return tst
}

func (s *Column_definitionContext) Column_constraint(i int) IColumn_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_constraintContext)
}

func (s *Column_definitionContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONSTRAINT, 0)
}

func (s *Column_definitionContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Column_definitionContext) VALUES() antlr.TerminalNode {
	return s.GetToken(tsqlParserVALUES, 0)
}

func (s *Column_definitionContext) NOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOT, 0)
}

func (s *Column_definitionContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *Column_definitionContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserREPLICATION, 0)
}

func (s *Column_definitionContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserDECIMAL)
}

func (s *Column_definitionContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, i)
}

func (s *Column_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterColumn_definition(s)
	}
}

func (s *Column_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitColumn_definition(s)
	}
}

func (p *tsqlParser) Column_definition() (localctx IColumn_definitionContext) {
	localctx = NewColumn_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, tsqlParserRULE_column_definition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1668)

		var _x = p.R_id()

		localctx.(*Column_definitionContext).name = _x
	}
	p.SetState(1672)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		{
			p.SetState(1669)

			var _x = p.Data_type()

			localctx.(*Column_definitionContext).data_type_name = _x
		}

	case tsqlParserAS:
		{
			p.SetState(1670)
			p.Match(tsqlParserAS)
		}
		{
			p.SetState(1671)
			p.expression(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1676)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCOLLATE {
		{
			p.SetState(1674)
			p.Match(tsqlParserCOLLATE)
		}
		{
			p.SetState(1675)
			p.R_id()
		}

	}
	p.SetState(1679)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 246, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1678)
			p.Null_notnull()
		}

	}
	p.SetState(1704)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext()) == 1 {
		p.SetState(1683)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCONSTRAINT {
			{
				p.SetState(1681)
				p.Match(tsqlParserCONSTRAINT)
			}
			{
				p.SetState(1682)

				var _x = p.R_id()

				localctx.(*Column_definitionContext).constraint = _x
			}

		}
		{
			p.SetState(1685)
			p.Match(tsqlParserDEFAULT)
		}
		{
			p.SetState(1686)
			p.Constant_expression()
		}
		p.SetState(1689)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 248, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1687)
				p.Match(tsqlParserWITH)
			}
			{
				p.SetState(1688)
				p.Match(tsqlParserVALUES)
			}

		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1691)
			p.Match(tsqlParserIDENTITY)
		}
		p.SetState(1697)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 249, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1692)
				p.Match(tsqlParserLR_BRACKET)
			}
			{
				p.SetState(1693)

				var _m = p.Match(tsqlParserDECIMAL)

				localctx.(*Column_definitionContext).seed = _m
			}
			{
				p.SetState(1694)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(1695)

				var _m = p.Match(tsqlParserDECIMAL)

				localctx.(*Column_definitionContext).increment = _m
			}
			{
				p.SetState(1696)
				p.Match(tsqlParserRR_BRACKET)
			}

		}
		p.SetState(1702)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 250, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1699)
				p.Match(tsqlParserNOT)
			}
			{
				p.SetState(1700)
				p.Match(tsqlParserFOR)
			}
			{
				p.SetState(1701)
				p.Match(tsqlParserREPLICATION)
			}

		}

	}
	p.SetState(1707)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserROWGUIDCOL {
		{
			p.SetState(1706)
			p.Match(tsqlParserROWGUIDCOL)
		}

	}
	p.SetState(1712)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 253, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1709)
				p.Column_constraint()
			}

		}
		p.SetState(1714)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 253, p.GetParserRuleContext())
	}

	return localctx
}

// IColumn_constraintContext is an interface to support dynamic dispatch.
type IColumn_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_constraintContext differentiates from other interfaces.
	IsColumn_constraintContext()
}

type Column_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_constraintContext() *Column_constraintContext {
	var p = new(Column_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_column_constraint
	return p
}

func (*Column_constraintContext) IsColumn_constraintContext() {}

func NewColumn_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_constraintContext {
	var p = new(Column_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_column_constraint

	return p
}

func (s *Column_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_constraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECK, 0)
}

func (s *Column_constraintContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Column_constraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONSTRAINT, 0)
}

func (s *Column_constraintContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Column_constraintContext) Null_notnull() INull_notnullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INull_notnullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INull_notnullContext)
}

func (s *Column_constraintContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRIMARY, 0)
}

func (s *Column_constraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEY, 0)
}

func (s *Column_constraintContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNIQUE, 0)
}

func (s *Column_constraintContext) Clustered() IClusteredContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClusteredContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClusteredContext)
}

func (s *Column_constraintContext) Index_options() IIndex_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionsContext)
}

func (s *Column_constraintContext) NOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOT, 0)
}

func (s *Column_constraintContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *Column_constraintContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserREPLICATION, 0)
}

func (s *Column_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterColumn_constraint(s)
	}
}

func (s *Column_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitColumn_constraint(s)
	}
}

func (p *tsqlParser) Column_constraint() (localctx IColumn_constraintContext) {
	localctx = NewColumn_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, tsqlParserRULE_column_constraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1717)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCONSTRAINT {
		{
			p.SetState(1715)
			p.Match(tsqlParserCONSTRAINT)
		}
		{
			p.SetState(1716)
			p.R_id()
		}

	}
	p.SetState(1720)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserNOT || _la == tsqlParserNULL {
		{
			p.SetState(1719)
			p.Null_notnull()
		}

	}
	p.SetState(1743)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserPRIMARY, tsqlParserUNIQUE:
		p.SetState(1725)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserPRIMARY:
			{
				p.SetState(1722)
				p.Match(tsqlParserPRIMARY)
			}
			{
				p.SetState(1723)
				p.Match(tsqlParserKEY)
			}

		case tsqlParserUNIQUE:
			{
				p.SetState(1724)
				p.Match(tsqlParserUNIQUE)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1728)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCLUSTERED || _la == tsqlParserNONCLUSTERED {
			{
				p.SetState(1727)
				p.Clustered()
			}

		}
		p.SetState(1731)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 258, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1730)
				p.Index_options()
			}

		}

	case tsqlParserCHECK:
		{
			p.SetState(1733)
			p.Match(tsqlParserCHECK)
		}
		p.SetState(1737)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserNOT {
			{
				p.SetState(1734)
				p.Match(tsqlParserNOT)
			}
			{
				p.SetState(1735)
				p.Match(tsqlParserFOR)
			}
			{
				p.SetState(1736)
				p.Match(tsqlParserREPLICATION)
			}

		}
		{
			p.SetState(1739)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(1740)
			p.search_condition(0)
		}
		{
			p.SetState(1741)
			p.Match(tsqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITable_constraintContext is an interface to support dynamic dispatch.
type ITable_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_constraintContext differentiates from other interfaces.
	IsTable_constraintContext()
}

type Table_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_constraintContext() *Table_constraintContext {
	var p = new(Table_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_constraint
	return p
}

func (*Table_constraintContext) IsTable_constraintContext() {}

func NewTable_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraintContext {
	var p = new(Table_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_constraint

	return p
}

func (s *Table_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraintContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Table_constraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECK, 0)
}

func (s *Table_constraintContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Table_constraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONSTRAINT, 0)
}

func (s *Table_constraintContext) AllR_id() []IR_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IR_idContext)(nil)).Elem())
	var tst = make([]IR_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IR_idContext)
		}
	}

	return tst
}

func (s *Table_constraintContext) R_id(i int) IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Table_constraintContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRIMARY, 0)
}

func (s *Table_constraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEY, 0)
}

func (s *Table_constraintContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNIQUE, 0)
}

func (s *Table_constraintContext) Clustered() IClusteredContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClusteredContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClusteredContext)
}

func (s *Table_constraintContext) Index_options() IIndex_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionsContext)
}

func (s *Table_constraintContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Table_constraintContext) NOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOT, 0)
}

func (s *Table_constraintContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *Table_constraintContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserREPLICATION, 0)
}

func (s *Table_constraintContext) ASC() antlr.TerminalNode {
	return s.GetToken(tsqlParserASC, 0)
}

func (s *Table_constraintContext) DESC() antlr.TerminalNode {
	return s.GetToken(tsqlParserDESC, 0)
}

func (s *Table_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_constraint(s)
	}
}

func (s *Table_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_constraint(s)
	}
}

func (p *tsqlParser) Table_constraint() (localctx ITable_constraintContext) {
	localctx = NewTable_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, tsqlParserRULE_table_constraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1747)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCONSTRAINT {
		{
			p.SetState(1745)
			p.Match(tsqlParserCONSTRAINT)
		}
		{
			p.SetState(1746)
			p.R_id()
		}

	}
	p.SetState(1780)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserPRIMARY, tsqlParserUNIQUE:
		p.SetState(1752)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserPRIMARY:
			{
				p.SetState(1749)
				p.Match(tsqlParserPRIMARY)
			}
			{
				p.SetState(1750)
				p.Match(tsqlParserKEY)
			}

		case tsqlParserUNIQUE:
			{
				p.SetState(1751)
				p.Match(tsqlParserUNIQUE)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1755)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCLUSTERED || _la == tsqlParserNONCLUSTERED {
			{
				p.SetState(1754)
				p.Clustered()
			}

		}
		{
			p.SetState(1757)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(1758)
			p.Column_name_list()
		}
		p.SetState(1760)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserASC || _la == tsqlParserDESC {
			{
				p.SetState(1759)
				_la = p.GetTokenStream().LA(1)

				if !(_la == tsqlParserASC || _la == tsqlParserDESC) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(1762)
			p.Match(tsqlParserRR_BRACKET)
		}
		p.SetState(1764)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 265, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1763)
				p.Index_options()
			}

		}
		p.SetState(1768)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserON {
			{
				p.SetState(1766)
				p.Match(tsqlParserON)
			}
			{
				p.SetState(1767)
				p.R_id()
			}

		}

	case tsqlParserCHECK:
		{
			p.SetState(1770)
			p.Match(tsqlParserCHECK)
		}
		p.SetState(1774)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserNOT {
			{
				p.SetState(1771)
				p.Match(tsqlParserNOT)
			}
			{
				p.SetState(1772)
				p.Match(tsqlParserFOR)
			}
			{
				p.SetState(1773)
				p.Match(tsqlParserREPLICATION)
			}

		}
		{
			p.SetState(1776)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(1777)
			p.search_condition(0)
		}
		{
			p.SetState(1778)
			p.Match(tsqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIndex_optionsContext is an interface to support dynamic dispatch.
type IIndex_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_optionsContext differentiates from other interfaces.
	IsIndex_optionsContext()
}

type Index_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_optionsContext() *Index_optionsContext {
	var p = new(Index_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_index_options
	return p
}

func (*Index_optionsContext) IsIndex_optionsContext() {}

func NewIndex_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_optionsContext {
	var p = new(Index_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_index_options

	return p
}

func (s *Index_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_optionsContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Index_optionsContext) AllIndex_option() []IIndex_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem())
	var tst = make([]IIndex_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_optionContext)
		}
	}

	return tst
}

func (s *Index_optionsContext) Index_option(i int) IIndex_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionContext)
}

func (s *Index_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterIndex_options(s)
	}
}

func (s *Index_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitIndex_options(s)
	}
}

func (p *tsqlParser) Index_options() (localctx IIndex_optionsContext) {
	localctx = NewIndex_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, tsqlParserRULE_index_options)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1782)
		p.Match(tsqlParserWITH)
	}
	{
		p.SetState(1783)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(1784)
		p.Index_option()
	}
	p.SetState(1789)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(1785)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(1786)
			p.Index_option()
		}

		p.SetState(1791)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1792)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IIndex_optionContext is an interface to support dynamic dispatch.
type IIndex_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_optionContext differentiates from other interfaces.
	IsIndex_optionContext()
}

type Index_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_optionContext() *Index_optionContext {
	var p = new(Index_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_index_option
	return p
}

func (*Index_optionContext) IsIndex_optionContext() {}

func NewIndex_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_optionContext {
	var p = new(Index_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_index_option

	return p
}

func (s *Index_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_optionContext) AllSimple_id() []ISimple_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimple_idContext)(nil)).Elem())
	var tst = make([]ISimple_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimple_idContext)
		}
	}

	return tst
}

func (s *Index_optionContext) Simple_id(i int) ISimple_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimple_idContext)
}

func (s *Index_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Index_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Index_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterIndex_option(s)
	}
}

func (s *Index_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitIndex_option(s)
	}
}

func (p *tsqlParser) Index_option() (localctx IIndex_optionContext) {
	localctx = NewIndex_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, tsqlParserRULE_index_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1794)
		p.Simple_id()
	}
	{
		p.SetState(1795)
		p.Match(tsqlParserEQUAL)
	}
	p.SetState(1799)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserID:
		{
			p.SetState(1796)
			p.Simple_id()
		}

	case tsqlParserOFF, tsqlParserON:
		{
			p.SetState(1797)
			p.On_off()
		}

	case tsqlParserDECIMAL:
		{
			p.SetState(1798)
			p.Match(tsqlParserDECIMAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDeclare_cursorContext is an interface to support dynamic dispatch.
type IDeclare_cursorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_cursorContext differentiates from other interfaces.
	IsDeclare_cursorContext()
}

type Declare_cursorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_cursorContext() *Declare_cursorContext {
	var p = new(Declare_cursorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_declare_cursor
	return p
}

func (*Declare_cursorContext) IsDeclare_cursorContext() {}

func NewDeclare_cursorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_cursorContext {
	var p = new(Declare_cursorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_declare_cursor

	return p
}

func (s *Declare_cursorContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_cursorContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECLARE, 0)
}

func (s *Declare_cursorContext) Cursor_name() ICursor_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_nameContext)
}

func (s *Declare_cursorContext) CURSOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURSOR, 0)
}

func (s *Declare_cursorContext) AllFOR() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserFOR)
}

func (s *Declare_cursorContext) FOR(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, i)
}

func (s *Declare_cursorContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Declare_cursorContext) Declare_set_cursor_common() IDeclare_set_cursor_commonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_set_cursor_commonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_set_cursor_commonContext)
}

func (s *Declare_cursorContext) INSENSITIVE() antlr.TerminalNode {
	return s.GetToken(tsqlParserINSENSITIVE, 0)
}

func (s *Declare_cursorContext) SCROLL() antlr.TerminalNode {
	return s.GetToken(tsqlParserSCROLL, 0)
}

func (s *Declare_cursorContext) READ() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD, 0)
}

func (s *Declare_cursorContext) ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserONLY, 0)
}

func (s *Declare_cursorContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserUPDATE, 0)
}

func (s *Declare_cursorContext) OF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOF, 0)
}

func (s *Declare_cursorContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Declare_cursorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_cursorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_cursorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDeclare_cursor(s)
	}
}

func (s *Declare_cursorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDeclare_cursor(s)
	}
}

func (p *tsqlParser) Declare_cursor() (localctx IDeclare_cursorContext) {
	localctx = NewDeclare_cursorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, tsqlParserRULE_declare_cursor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1801)
		p.Match(tsqlParserDECLARE)
	}
	{
		p.SetState(1802)
		p.Cursor_name()
	}
	p.SetState(1834)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 278, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1803)
			p.Match(tsqlParserCURSOR)
		}
		p.SetState(1813)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 273, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1804)
				p.Declare_set_cursor_common()
			}
			p.SetState(1811)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserFOR {
				{
					p.SetState(1805)
					p.Match(tsqlParserFOR)
				}
				{
					p.SetState(1806)
					p.Match(tsqlParserUPDATE)
				}
				p.SetState(1809)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == tsqlParserOF {
					{
						p.SetState(1807)
						p.Match(tsqlParserOF)
					}
					{
						p.SetState(1808)
						p.Column_name_list()
					}

				}

			}

		}

	case 2:
		p.SetState(1816)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserINSENSITIVE {
			{
				p.SetState(1815)
				p.Match(tsqlParserINSENSITIVE)
			}

		}
		p.SetState(1819)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserSCROLL {
			{
				p.SetState(1818)
				p.Match(tsqlParserSCROLL)
			}

		}
		{
			p.SetState(1821)
			p.Match(tsqlParserCURSOR)
		}
		{
			p.SetState(1822)
			p.Match(tsqlParserFOR)
		}
		{
			p.SetState(1823)
			p.Select_statement()
		}
		p.SetState(1832)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserFOR {
			{
				p.SetState(1824)
				p.Match(tsqlParserFOR)
			}
			p.SetState(1830)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case tsqlParserREAD:
				{
					p.SetState(1825)
					p.Match(tsqlParserREAD)
				}
				{
					p.SetState(1826)
					p.Match(tsqlParserONLY)
				}

			case tsqlParserUPDATE:
				{
					p.SetState(1827)
					p.Match(tsqlParserUPDATE)
				}

			case tsqlParserOF:
				{
					p.SetState(1828)
					p.Match(tsqlParserOF)
				}
				{
					p.SetState(1829)
					p.Column_name_list()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}

	}
	p.SetState(1837)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 279, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1836)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IDeclare_set_cursor_commonContext is an interface to support dynamic dispatch.
type IDeclare_set_cursor_commonContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_set_cursor_commonContext differentiates from other interfaces.
	IsDeclare_set_cursor_commonContext()
}

type Declare_set_cursor_commonContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_set_cursor_commonContext() *Declare_set_cursor_commonContext {
	var p = new(Declare_set_cursor_commonContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_declare_set_cursor_common
	return p
}

func (*Declare_set_cursor_commonContext) IsDeclare_set_cursor_commonContext() {}

func NewDeclare_set_cursor_commonContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_set_cursor_commonContext {
	var p = new(Declare_set_cursor_commonContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_declare_set_cursor_common

	return p
}

func (s *Declare_set_cursor_commonContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_set_cursor_commonContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *Declare_set_cursor_commonContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Declare_set_cursor_commonContext) TYPE_WARNING() antlr.TerminalNode {
	return s.GetToken(tsqlParserTYPE_WARNING, 0)
}

func (s *Declare_set_cursor_commonContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL, 0)
}

func (s *Declare_set_cursor_commonContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserGLOBAL, 0)
}

func (s *Declare_set_cursor_commonContext) FORWARD_ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORWARD_ONLY, 0)
}

func (s *Declare_set_cursor_commonContext) SCROLL() antlr.TerminalNode {
	return s.GetToken(tsqlParserSCROLL, 0)
}

func (s *Declare_set_cursor_commonContext) STATIC() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTATIC, 0)
}

func (s *Declare_set_cursor_commonContext) KEYSET() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEYSET, 0)
}

func (s *Declare_set_cursor_commonContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(tsqlParserDYNAMIC, 0)
}

func (s *Declare_set_cursor_commonContext) FAST_FORWARD() antlr.TerminalNode {
	return s.GetToken(tsqlParserFAST_FORWARD, 0)
}

func (s *Declare_set_cursor_commonContext) READ_ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD_ONLY, 0)
}

func (s *Declare_set_cursor_commonContext) SCROLL_LOCKS() antlr.TerminalNode {
	return s.GetToken(tsqlParserSCROLL_LOCKS, 0)
}

func (s *Declare_set_cursor_commonContext) OPTIMISTIC() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPTIMISTIC, 0)
}

func (s *Declare_set_cursor_commonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_set_cursor_commonContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_set_cursor_commonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDeclare_set_cursor_common(s)
	}
}

func (s *Declare_set_cursor_commonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDeclare_set_cursor_common(s)
	}
}

func (p *tsqlParser) Declare_set_cursor_common() (localctx IDeclare_set_cursor_commonContext) {
	localctx = NewDeclare_set_cursor_commonContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, tsqlParserRULE_declare_set_cursor_common)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1840)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserGLOBAL || _la == tsqlParserLOCAL {
		{
			p.SetState(1839)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserGLOBAL || _la == tsqlParserLOCAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(1843)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFORWARD_ONLY || _la == tsqlParserSCROLL {
		{
			p.SetState(1842)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserFORWARD_ONLY || _la == tsqlParserSCROLL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(1846)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserDYNAMIC || _la == tsqlParserFAST_FORWARD || _la == tsqlParserKEYSET || _la == tsqlParserSTATIC {
		{
			p.SetState(1845)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserDYNAMIC || _la == tsqlParserFAST_FORWARD || _la == tsqlParserKEYSET || _la == tsqlParserSTATIC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(1849)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserOPTIMISTIC || _la == tsqlParserREAD_ONLY || _la == tsqlParserSCROLL_LOCKS {
		{
			p.SetState(1848)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserOPTIMISTIC || _la == tsqlParserREAD_ONLY || _la == tsqlParserSCROLL_LOCKS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(1852)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserTYPE_WARNING {
		{
			p.SetState(1851)
			p.Match(tsqlParserTYPE_WARNING)
		}

	}
	{
		p.SetState(1854)
		p.Match(tsqlParserFOR)
	}
	{
		p.SetState(1855)
		p.Select_statement()
	}

	return localctx
}

// IFetch_cursorContext is an interface to support dynamic dispatch.
type IFetch_cursorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFetch_cursorContext differentiates from other interfaces.
	IsFetch_cursorContext()
}

type Fetch_cursorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFetch_cursorContext() *Fetch_cursorContext {
	var p = new(Fetch_cursorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_fetch_cursor
	return p
}

func (*Fetch_cursorContext) IsFetch_cursorContext() {}

func NewFetch_cursorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fetch_cursorContext {
	var p = new(Fetch_cursorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_fetch_cursor

	return p
}

func (s *Fetch_cursorContext) GetParser() antlr.Parser { return s.parser }

func (s *Fetch_cursorContext) FETCH() antlr.TerminalNode {
	return s.GetToken(tsqlParserFETCH, 0)
}

func (s *Fetch_cursorContext) Cursor_name() ICursor_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_nameContext)
}

func (s *Fetch_cursorContext) FROM() antlr.TerminalNode {
	return s.GetToken(tsqlParserFROM, 0)
}

func (s *Fetch_cursorContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserGLOBAL, 0)
}

func (s *Fetch_cursorContext) INTO() antlr.TerminalNode {
	return s.GetToken(tsqlParserINTO, 0)
}

func (s *Fetch_cursorContext) AllLOCAL_ID() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserLOCAL_ID)
}

func (s *Fetch_cursorContext) LOCAL_ID(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, i)
}

func (s *Fetch_cursorContext) NEXT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNEXT, 0)
}

func (s *Fetch_cursorContext) PRIOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRIOR, 0)
}

func (s *Fetch_cursorContext) FIRST() antlr.TerminalNode {
	return s.GetToken(tsqlParserFIRST, 0)
}

func (s *Fetch_cursorContext) LAST() antlr.TerminalNode {
	return s.GetToken(tsqlParserLAST, 0)
}

func (s *Fetch_cursorContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Fetch_cursorContext) ABSOLUTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserABSOLUTE, 0)
}

func (s *Fetch_cursorContext) RELATIVE() antlr.TerminalNode {
	return s.GetToken(tsqlParserRELATIVE, 0)
}

func (s *Fetch_cursorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fetch_cursorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Fetch_cursorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFetch_cursor(s)
	}
}

func (s *Fetch_cursorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFetch_cursor(s)
	}
}

func (p *tsqlParser) Fetch_cursor() (localctx IFetch_cursorContext) {
	localctx = NewFetch_cursorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, tsqlParserRULE_fetch_cursor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1857)
		p.Match(tsqlParserFETCH)
	}
	p.SetState(1867)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 286, p.GetParserRuleContext()) == 1 {
		p.SetState(1864)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserNEXT:
			{
				p.SetState(1858)
				p.Match(tsqlParserNEXT)
			}

		case tsqlParserPRIOR:
			{
				p.SetState(1859)
				p.Match(tsqlParserPRIOR)
			}

		case tsqlParserFIRST:
			{
				p.SetState(1860)
				p.Match(tsqlParserFIRST)
			}

		case tsqlParserLAST:
			{
				p.SetState(1861)
				p.Match(tsqlParserLAST)
			}

		case tsqlParserABSOLUTE, tsqlParserRELATIVE:
			{
				p.SetState(1862)
				_la = p.GetTokenStream().LA(1)

				if !(_la == tsqlParserABSOLUTE || _la == tsqlParserRELATIVE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1863)
				p.expression(0)
			}

		case tsqlParserFROM:

		default:
		}
		{
			p.SetState(1866)
			p.Match(tsqlParserFROM)
		}

	}
	p.SetState(1870)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 287, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1869)
			p.Match(tsqlParserGLOBAL)
		}

	}
	{
		p.SetState(1872)
		p.Cursor_name()
	}
	p.SetState(1882)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserINTO {
		{
			p.SetState(1873)
			p.Match(tsqlParserINTO)
		}
		{
			p.SetState(1874)
			p.Match(tsqlParserLOCAL_ID)
		}
		p.SetState(1879)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(1875)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(1876)
				p.Match(tsqlParserLOCAL_ID)
			}

			p.SetState(1881)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(1885)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 290, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1884)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// ISet_specialContext is an interface to support dynamic dispatch.
type ISet_specialContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_specialContext differentiates from other interfaces.
	IsSet_specialContext()
}

type Set_specialContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_specialContext() *Set_specialContext {
	var p = new(Set_specialContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_set_special
	return p
}

func (*Set_specialContext) IsSet_specialContext() {}

func NewSet_specialContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_specialContext {
	var p = new(Set_specialContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_set_special

	return p
}

func (s *Set_specialContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_specialContext) SET() antlr.TerminalNode {
	return s.GetToken(tsqlParserSET, 0)
}

func (s *Set_specialContext) AllR_id() []IR_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IR_idContext)(nil)).Elem())
	var tst = make([]IR_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IR_idContext)
		}
	}

	return tst
}

func (s *Set_specialContext) R_id(i int) IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Set_specialContext) Constant_LOCAL_ID() IConstant_LOCAL_IDContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_LOCAL_IDContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_LOCAL_IDContext)
}

func (s *Set_specialContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Set_specialContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserTRANSACTION, 0)
}

func (s *Set_specialContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserISOLATION, 0)
}

func (s *Set_specialContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(tsqlParserLEVEL, 0)
}

func (s *Set_specialContext) READ() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD, 0)
}

func (s *Set_specialContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNCOMMITTED, 0)
}

func (s *Set_specialContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOMMITTED, 0)
}

func (s *Set_specialContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserREPEATABLE, 0)
}

func (s *Set_specialContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserSNAPSHOT, 0)
}

func (s *Set_specialContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSERIALIZABLE, 0)
}

func (s *Set_specialContext) IDENTITY_INSERT() antlr.TerminalNode {
	return s.GetToken(tsqlParserIDENTITY_INSERT, 0)
}

func (s *Set_specialContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Set_specialContext) ANSI_NULLS() antlr.TerminalNode {
	return s.GetToken(tsqlParserANSI_NULLS, 0)
}

func (s *Set_specialContext) QUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(tsqlParserQUOTED_IDENTIFIER, 0)
}

func (s *Set_specialContext) ANSI_PADDING() antlr.TerminalNode {
	return s.GetToken(tsqlParserANSI_PADDING, 0)
}

func (s *Set_specialContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_specialContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_specialContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSet_special(s)
	}
}

func (s *Set_specialContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSet_special(s)
	}
}

func (p *tsqlParser) Set_special() (localctx ISet_specialContext) {
	localctx = NewSet_specialContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, tsqlParserRULE_set_special)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1930)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 296, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1887)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1888)
			p.R_id()
		}
		p.SetState(1892)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(1889)
				p.R_id()
			}

		case tsqlParserLOCAL_ID, tsqlParserDECIMAL, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserPLUS, tsqlParserMINUS:
			{
				p.SetState(1890)
				p.Constant_LOCAL_ID()
			}

		case tsqlParserOFF, tsqlParserON:
			{
				p.SetState(1891)
				p.On_off()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1895)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 292, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1894)
				p.Match(tsqlParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1897)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1898)
			p.Match(tsqlParserTRANSACTION)
		}
		{
			p.SetState(1899)
			p.Match(tsqlParserISOLATION)
		}
		{
			p.SetState(1900)
			p.Match(tsqlParserLEVEL)
		}
		p.SetState(1909)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 293, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1901)
				p.Match(tsqlParserREAD)
			}
			{
				p.SetState(1902)
				p.Match(tsqlParserUNCOMMITTED)
			}

		case 2:
			{
				p.SetState(1903)
				p.Match(tsqlParserREAD)
			}
			{
				p.SetState(1904)
				p.Match(tsqlParserCOMMITTED)
			}

		case 3:
			{
				p.SetState(1905)
				p.Match(tsqlParserREPEATABLE)
			}
			{
				p.SetState(1906)
				p.Match(tsqlParserREAD)
			}

		case 4:
			{
				p.SetState(1907)
				p.Match(tsqlParserSNAPSHOT)
			}

		case 5:
			{
				p.SetState(1908)
				p.Match(tsqlParserSERIALIZABLE)
			}

		}
		p.SetState(1912)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 294, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1911)
				p.Match(tsqlParserSEMI)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1914)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1915)
			p.Match(tsqlParserIDENTITY_INSERT)
		}
		{
			p.SetState(1916)
			p.Table_name()
		}
		{
			p.SetState(1917)
			p.On_off()
		}
		p.SetState(1919)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 295, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1918)
				p.Match(tsqlParserSEMI)
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1921)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1922)
			p.Match(tsqlParserANSI_NULLS)
		}
		{
			p.SetState(1923)
			p.On_off()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1924)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1925)
			p.Match(tsqlParserQUOTED_IDENTIFIER)
		}
		{
			p.SetState(1926)
			p.On_off()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1927)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1928)
			p.Match(tsqlParserANSI_PADDING)
		}
		{
			p.SetState(1929)
			p.On_off()
		}

	}

	return localctx
}

// IConstant_LOCAL_IDContext is an interface to support dynamic dispatch.
type IConstant_LOCAL_IDContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstant_LOCAL_IDContext differentiates from other interfaces.
	IsConstant_LOCAL_IDContext()
}

type Constant_LOCAL_IDContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstant_LOCAL_IDContext() *Constant_LOCAL_IDContext {
	var p = new(Constant_LOCAL_IDContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_constant_LOCAL_ID
	return p
}

func (*Constant_LOCAL_IDContext) IsConstant_LOCAL_IDContext() {}

func NewConstant_LOCAL_IDContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constant_LOCAL_IDContext {
	var p = new(Constant_LOCAL_IDContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_constant_LOCAL_ID

	return p
}

func (s *Constant_LOCAL_IDContext) GetParser() antlr.Parser { return s.parser }

func (s *Constant_LOCAL_IDContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Constant_LOCAL_IDContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Constant_LOCAL_IDContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constant_LOCAL_IDContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constant_LOCAL_IDContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterConstant_LOCAL_ID(s)
	}
}

func (s *Constant_LOCAL_IDContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitConstant_LOCAL_ID(s)
	}
}

func (p *tsqlParser) Constant_LOCAL_ID() (localctx IConstant_LOCAL_IDContext) {
	localctx = NewConstant_LOCAL_IDContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, tsqlParserRULE_constant_LOCAL_ID)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1934)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserDECIMAL, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserPLUS, tsqlParserMINUS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1932)
			p.Constant()
		}

	case tsqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1933)
			p.Match(tsqlParserLOCAL_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) CopyFrom(ctx *ExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Binary_operator_expressionContext struct {
	*ExpressionContext
	left  IExpressionContext
	op    antlr.Token
	right IExpressionContext
}

func NewBinary_operator_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Binary_operator_expressionContext {
	var p = new(Binary_operator_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Binary_operator_expressionContext) GetOp() antlr.Token { return s.op }

func (s *Binary_operator_expressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *Binary_operator_expressionContext) GetLeft() IExpressionContext { return s.left }

func (s *Binary_operator_expressionContext) GetRight() IExpressionContext { return s.right }

func (s *Binary_operator_expressionContext) SetLeft(v IExpressionContext) { s.left = v }

func (s *Binary_operator_expressionContext) SetRight(v IExpressionContext) { s.right = v }

func (s *Binary_operator_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Binary_operator_expressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Binary_operator_expressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Binary_operator_expressionContext) Comparison_operator() IComparison_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparison_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparison_operatorContext)
}

func (s *Binary_operator_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBinary_operator_expression(s)
	}
}

func (s *Binary_operator_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBinary_operator_expression(s)
	}
}

type Primitive_expressionContext struct {
	*ExpressionContext
}

func NewPrimitive_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Primitive_expressionContext {
	var p = new(Primitive_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Primitive_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primitive_expressionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT, 0)
}

func (s *Primitive_expressionContext) NULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserNULL, 0)
}

func (s *Primitive_expressionContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Primitive_expressionContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Primitive_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterPrimitive_expression(s)
	}
}

func (s *Primitive_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitPrimitive_expression(s)
	}
}

type Bracket_expressionContext struct {
	*ExpressionContext
}

func NewBracket_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Bracket_expressionContext {
	var p = new(Bracket_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Bracket_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bracket_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Bracket_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBracket_expression(s)
	}
}

func (s *Bracket_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBracket_expression(s)
	}
}

type Unary_operator_expressionContext struct {
	*ExpressionContext
	op antlr.Token
}

func NewUnary_operator_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Unary_operator_expressionContext {
	var p = new(Unary_operator_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Unary_operator_expressionContext) GetOp() antlr.Token { return s.op }

func (s *Unary_operator_expressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *Unary_operator_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_operator_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Unary_operator_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterUnary_operator_expression(s)
	}
}

func (s *Unary_operator_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitUnary_operator_expression(s)
	}
}

type Function_call_expressionContext struct {
	*ExpressionContext
}

func NewFunction_call_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Function_call_expressionContext {
	var p = new(Function_call_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Function_call_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_expressionContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Function_call_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Function_call_expressionContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOLLATE, 0)
}

func (s *Function_call_expressionContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Function_call_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFunction_call_expression(s)
	}
}

func (s *Function_call_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFunction_call_expression(s)
	}
}

type Case_expressionContext struct {
	*ExpressionContext
	caseExpr IExpressionContext
	elseExpr IExpressionContext
}

func NewCase_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Case_expressionContext {
	var p = new(Case_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Case_expressionContext) GetCaseExpr() IExpressionContext { return s.caseExpr }

func (s *Case_expressionContext) GetElseExpr() IExpressionContext { return s.elseExpr }

func (s *Case_expressionContext) SetCaseExpr(v IExpressionContext) { s.caseExpr = v }

func (s *Case_expressionContext) SetElseExpr(v IExpressionContext) { s.elseExpr = v }

func (s *Case_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_expressionContext) CASE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCASE, 0)
}

func (s *Case_expressionContext) END() antlr.TerminalNode {
	return s.GetToken(tsqlParserEND, 0)
}

func (s *Case_expressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Case_expressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Case_expressionContext) AllSwitch_section() []ISwitch_sectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISwitch_sectionContext)(nil)).Elem())
	var tst = make([]ISwitch_sectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISwitch_sectionContext)
		}
	}

	return tst
}

func (s *Case_expressionContext) Switch_section(i int) ISwitch_sectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitch_sectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISwitch_sectionContext)
}

func (s *Case_expressionContext) ELSE() antlr.TerminalNode {
	return s.GetToken(tsqlParserELSE, 0)
}

func (s *Case_expressionContext) AllSwitch_search_condition_section() []ISwitch_search_condition_sectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISwitch_search_condition_sectionContext)(nil)).Elem())
	var tst = make([]ISwitch_search_condition_sectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISwitch_search_condition_sectionContext)
		}
	}

	return tst
}

func (s *Case_expressionContext) Switch_search_condition_section(i int) ISwitch_search_condition_sectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitch_search_condition_sectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISwitch_search_condition_sectionContext)
}

func (s *Case_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCase_expression(s)
	}
}

func (s *Case_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCase_expression(s)
	}
}

type Column_ref_expressionContext struct {
	*ExpressionContext
}

func NewColumn_ref_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Column_ref_expressionContext {
	var p = new(Column_ref_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Column_ref_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_ref_expressionContext) Full_column_name() IFull_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_column_nameContext)
}

func (s *Column_ref_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterColumn_ref_expression(s)
	}
}

func (s *Column_ref_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitColumn_ref_expression(s)
	}
}

type Subquery_expressionContext struct {
	*ExpressionContext
}

func NewSubquery_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Subquery_expressionContext {
	var p = new(Subquery_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Subquery_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Subquery_expressionContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *Subquery_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSubquery_expression(s)
	}
}

func (s *Subquery_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSubquery_expression(s)
	}
}

type Over_clause_expressionContext struct {
	*ExpressionContext
}

func NewOver_clause_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Over_clause_expressionContext {
	var p = new(Over_clause_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Over_clause_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Over_clause_expressionContext) Over_clause() IOver_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOver_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *Over_clause_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOver_clause_expression(s)
	}
}

func (s *Over_clause_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOver_clause_expression(s)
	}
}

func (p *tsqlParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *tsqlParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 172
	p.EnterRecursionRule(localctx, 172, tsqlParserRULE_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1981)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 302, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPrimitive_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(1937)
			p.Match(tsqlParserDEFAULT)
		}

	case 2:
		localctx = NewPrimitive_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1938)
			p.Match(tsqlParserNULL)
		}

	case 3:
		localctx = NewPrimitive_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1939)
			p.Match(tsqlParserLOCAL_ID)
		}

	case 4:
		localctx = NewPrimitive_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1940)
			p.Constant()
		}

	case 5:
		localctx = NewFunction_call_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1941)
			p.Function_call()
		}

	case 6:
		localctx = NewCase_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1942)
			p.Match(tsqlParserCASE)
		}
		{
			p.SetState(1943)

			var _x = p.expression(0)

			localctx.(*Case_expressionContext).caseExpr = _x
		}
		p.SetState(1945)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == tsqlParserWHEN {
			{
				p.SetState(1944)
				p.Switch_section()
			}

			p.SetState(1947)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1951)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserELSE {
			{
				p.SetState(1949)
				p.Match(tsqlParserELSE)
			}
			{
				p.SetState(1950)

				var _x = p.expression(0)

				localctx.(*Case_expressionContext).elseExpr = _x
			}

		}
		{
			p.SetState(1953)
			p.Match(tsqlParserEND)
		}

	case 7:
		localctx = NewCase_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1955)
			p.Match(tsqlParserCASE)
		}
		p.SetState(1957)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == tsqlParserWHEN {
			{
				p.SetState(1956)
				p.Switch_search_condition_section()
			}

			p.SetState(1959)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1963)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserELSE {
			{
				p.SetState(1961)
				p.Match(tsqlParserELSE)
			}
			{
				p.SetState(1962)

				var _x = p.expression(0)

				localctx.(*Case_expressionContext).elseExpr = _x
			}

		}
		{
			p.SetState(1965)
			p.Match(tsqlParserEND)
		}

	case 8:
		localctx = NewColumn_ref_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1967)
			p.Full_column_name()
		}

	case 9:
		localctx = NewBracket_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1968)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(1969)
			p.expression(0)
		}
		{
			p.SetState(1970)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 10:
		localctx = NewSubquery_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1972)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(1973)
			p.Subquery()
		}
		{
			p.SetState(1974)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 11:
		localctx = NewUnary_operator_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1976)

			var _m = p.Match(tsqlParserBIT_NOT)

			localctx.(*Unary_operator_expressionContext).op = _m
		}
		{
			p.SetState(1977)
			p.expression(6)
		}

	case 12:
		localctx = NewUnary_operator_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1978)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Unary_operator_expressionContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserPLUS || _la == tsqlParserMINUS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Unary_operator_expressionContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1979)
			p.expression(4)
		}

	case 13:
		localctx = NewOver_clause_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1980)
			p.Over_clause()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1998)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 304, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1996)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 303, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBinary_operator_expressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				localctx.(*Binary_operator_expressionContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, tsqlParserRULE_expression)
				p.SetState(1983)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(1984)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Binary_operator_expressionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-433)&-(0x1f+1)) == 0 && ((1<<uint((_la-433)))&((1<<(tsqlParserSTAR-433))|(1<<(tsqlParserDIVIDE-433))|(1<<(tsqlParserMODULE-433)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Binary_operator_expressionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1985)

					var _x = p.expression(6)

					localctx.(*Binary_operator_expressionContext).right = _x
				}

			case 2:
				localctx = NewBinary_operator_expressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				localctx.(*Binary_operator_expressionContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, tsqlParserRULE_expression)
				p.SetState(1986)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1987)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Binary_operator_expressionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-436)&-(0x1f+1)) == 0 && ((1<<uint((_la-436)))&((1<<(tsqlParserPLUS-436))|(1<<(tsqlParserMINUS-436))|(1<<(tsqlParserBIT_OR-436))|(1<<(tsqlParserBIT_AND-436))|(1<<(tsqlParserBIT_XOR-436)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Binary_operator_expressionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1988)

					var _x = p.expression(4)

					localctx.(*Binary_operator_expressionContext).right = _x
				}

			case 3:
				localctx = NewBinary_operator_expressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				localctx.(*Binary_operator_expressionContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, tsqlParserRULE_expression)
				p.SetState(1989)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1990)
					p.Comparison_operator()
				}
				{
					p.SetState(1991)

					var _x = p.expression(3)

					localctx.(*Binary_operator_expressionContext).right = _x
				}

			case 4:
				localctx = NewFunction_call_expressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, tsqlParserRULE_expression)
				p.SetState(1993)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(1994)
					p.Match(tsqlParserCOLLATE)
				}
				{
					p.SetState(1995)
					p.R_id()
				}

			}

		}
		p.SetState(2000)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 304, p.GetParserRuleContext())
	}

	return localctx
}

// IConstant_expressionContext is an interface to support dynamic dispatch.
type IConstant_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstant_expressionContext differentiates from other interfaces.
	IsConstant_expressionContext()
}

type Constant_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstant_expressionContext() *Constant_expressionContext {
	var p = new(Constant_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_constant_expression
	return p
}

func (*Constant_expressionContext) IsConstant_expressionContext() {}

func NewConstant_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constant_expressionContext {
	var p = new(Constant_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_constant_expression

	return p
}

func (s *Constant_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Constant_expressionContext) NULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserNULL, 0)
}

func (s *Constant_expressionContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Constant_expressionContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Constant_expressionContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Constant_expressionContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Constant_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constant_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constant_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterConstant_expression(s)
	}
}

func (s *Constant_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitConstant_expression(s)
	}
}

func (p *tsqlParser) Constant_expression() (localctx IConstant_expressionContext) {
	localctx = NewConstant_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, tsqlParserRULE_constant_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2009)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserNULL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2001)
			p.Match(tsqlParserNULL)
		}

	case tsqlParserDECIMAL, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserPLUS, tsqlParserMINUS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2002)
			p.Constant()
		}

	case tsqlParserCOALESCE, tsqlParserCONVERT, tsqlParserCURRENT_TIMESTAMP, tsqlParserCURRENT_USER, tsqlParserFORCESEEK, tsqlParserIDENTITY, tsqlParserIIF, tsqlParserLEFT, tsqlParserNEXT, tsqlParserNULLIF, tsqlParserRIGHT, tsqlParserSESSION_USER, tsqlParserSYSTEM_USER, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserBINARY_CHECKSUM, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDATEADD, tsqlParserDATEDIFF, tsqlParserDATENAME, tsqlParserDATEPART, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMIN_ACTIVE_ROWVERSION, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2003)
			p.Function_call()
		}

	case tsqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2004)
			p.Match(tsqlParserLOCAL_ID)
		}

	case tsqlParserLR_BRACKET:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2005)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2006)
			p.Constant_expression()
		}
		{
			p.SetState(2007)
			p.Match(tsqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISubqueryContext is an interface to support dynamic dispatch.
type ISubqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubqueryContext differentiates from other interfaces.
	IsSubqueryContext()
}

type SubqueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubqueryContext() *SubqueryContext {
	var p = new(SubqueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_subquery
	return p
}

func (*SubqueryContext) IsSubqueryContext() {}

func NewSubqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubqueryContext {
	var p = new(SubqueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_subquery

	return p
}

func (s *SubqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *SubqueryContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *SubqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSubquery(s)
	}
}

func (s *SubqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSubquery(s)
	}
}

func (p *tsqlParser) Subquery() (localctx ISubqueryContext) {
	localctx = NewSubqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, tsqlParserRULE_subquery)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2011)
		p.Select_statement()
	}

	return localctx
}

// IWith_expressionContext is an interface to support dynamic dispatch.
type IWith_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_expressionContext differentiates from other interfaces.
	IsWith_expressionContext()
}

type With_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_expressionContext() *With_expressionContext {
	var p = new(With_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_with_expression
	return p
}

func (*With_expressionContext) IsWith_expressionContext() {}

func NewWith_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_expressionContext {
	var p = new(With_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_with_expression

	return p
}

func (s *With_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *With_expressionContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *With_expressionContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICommon_table_expressionContext)(nil)).Elem())
	var tst = make([]ICommon_table_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICommon_table_expressionContext)
		}
	}

	return tst
}

func (s *With_expressionContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommon_table_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *With_expressionContext) XMLNAMESPACES() antlr.TerminalNode {
	return s.GetToken(tsqlParserXMLNAMESPACES, 0)
}

func (s *With_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWith_expression(s)
	}
}

func (s *With_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWith_expression(s)
	}
}

func (p *tsqlParser) With_expression() (localctx IWith_expressionContext) {
	localctx = NewWith_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, tsqlParserRULE_with_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2013)
		p.Match(tsqlParserWITH)
	}
	p.SetState(2016)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 306, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2014)
			p.Match(tsqlParserXMLNAMESPACES)
		}
		{
			p.SetState(2015)
			p.Match(tsqlParserCOMMA)
		}

	}
	{
		p.SetState(2018)
		p.Common_table_expression()
	}
	p.SetState(2023)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(2019)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2020)
			p.Common_table_expression()
		}

		p.SetState(2025)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICommon_table_expressionContext is an interface to support dynamic dispatch.
type ICommon_table_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetExpression_name returns the expression_name rule contexts.
	GetExpression_name() IR_idContext

	// SetExpression_name sets the expression_name rule contexts.
	SetExpression_name(IR_idContext)

	// IsCommon_table_expressionContext differentiates from other interfaces.
	IsCommon_table_expressionContext()
}

type Common_table_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	expression_name IR_idContext
}

func NewEmptyCommon_table_expressionContext() *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_common_table_expression
	return p
}

func (*Common_table_expressionContext) IsCommon_table_expressionContext() {}

func NewCommon_table_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_common_table_expression

	return p
}

func (s *Common_table_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Common_table_expressionContext) GetExpression_name() IR_idContext { return s.expression_name }

func (s *Common_table_expressionContext) SetExpression_name(v IR_idContext) { s.expression_name = v }

func (s *Common_table_expressionContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Common_table_expressionContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Common_table_expressionContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Common_table_expressionContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Common_table_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Common_table_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Common_table_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCommon_table_expression(s)
	}
}

func (s *Common_table_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCommon_table_expression(s)
	}
}

func (p *tsqlParser) Common_table_expression() (localctx ICommon_table_expressionContext) {
	localctx = NewCommon_table_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, tsqlParserRULE_common_table_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2026)

		var _x = p.R_id()

		localctx.(*Common_table_expressionContext).expression_name = _x
	}
	p.SetState(2031)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserLR_BRACKET {
		{
			p.SetState(2027)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2028)
			p.Column_name_list()
		}
		{
			p.SetState(2029)
			p.Match(tsqlParserRR_BRACKET)
		}

	}
	{
		p.SetState(2033)
		p.Match(tsqlParserAS)
	}
	{
		p.SetState(2034)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2035)
		p.Select_statement()
	}
	{
		p.SetState(2036)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IUpdate_elemContext is an interface to support dynamic dispatch.
type IUpdate_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUdt_column_name returns the udt_column_name rule contexts.
	GetUdt_column_name() IR_idContext

	// GetMethod_name returns the method_name rule contexts.
	GetMethod_name() IR_idContext

	// SetUdt_column_name sets the udt_column_name rule contexts.
	SetUdt_column_name(IR_idContext)

	// SetMethod_name sets the method_name rule contexts.
	SetMethod_name(IR_idContext)

	// IsUpdate_elemContext differentiates from other interfaces.
	IsUpdate_elemContext()
}

type Update_elemContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	udt_column_name IR_idContext
	method_name     IR_idContext
}

func NewEmptyUpdate_elemContext() *Update_elemContext {
	var p = new(Update_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_update_elem
	return p
}

func (*Update_elemContext) IsUpdate_elemContext() {}

func NewUpdate_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_elemContext {
	var p = new(Update_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_update_elem

	return p
}

func (s *Update_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_elemContext) GetUdt_column_name() IR_idContext { return s.udt_column_name }

func (s *Update_elemContext) GetMethod_name() IR_idContext { return s.method_name }

func (s *Update_elemContext) SetUdt_column_name(v IR_idContext) { s.udt_column_name = v }

func (s *Update_elemContext) SetMethod_name(v IR_idContext) { s.method_name = v }

func (s *Update_elemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Update_elemContext) Full_column_name() IFull_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_column_nameContext)
}

func (s *Update_elemContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Update_elemContext) Assignment_operator() IAssignment_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_operatorContext)
}

func (s *Update_elemContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Update_elemContext) AllR_id() []IR_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IR_idContext)(nil)).Elem())
	var tst = make([]IR_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IR_idContext)
		}
	}

	return tst
}

func (s *Update_elemContext) R_id(i int) IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Update_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterUpdate_elem(s)
	}
}

func (s *Update_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitUpdate_elem(s)
	}
}

func (p *tsqlParser) Update_elem() (localctx IUpdate_elemContext) {
	localctx = NewUpdate_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, tsqlParserRULE_update_elem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2054)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 311, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2040)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(2038)
				p.Full_column_name()
			}

		case tsqlParserLOCAL_ID:
			{
				p.SetState(2039)
				p.Match(tsqlParserLOCAL_ID)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(2044)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserEQUAL:
			{
				p.SetState(2042)
				p.Match(tsqlParserEQUAL)
			}

		case tsqlParserPLUS_ASSIGN, tsqlParserMINUS_ASSIGN, tsqlParserMULT_ASSIGN, tsqlParserDIV_ASSIGN, tsqlParserMOD_ASSIGN, tsqlParserAND_ASSIGN, tsqlParserXOR_ASSIGN, tsqlParserOR_ASSIGN:
			{
				p.SetState(2043)
				p.Assignment_operator()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2046)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2047)

			var _x = p.R_id()

			localctx.(*Update_elemContext).udt_column_name = _x
		}
		{
			p.SetState(2048)
			p.Match(tsqlParserDOT)
		}
		{
			p.SetState(2049)

			var _x = p.R_id()

			localctx.(*Update_elemContext).method_name = _x
		}
		{
			p.SetState(2050)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2051)
			p.Expression_list()
		}
		{
			p.SetState(2052)
			p.Match(tsqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ISearch_condition_listContext is an interface to support dynamic dispatch.
type ISearch_condition_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSearch_condition_listContext differentiates from other interfaces.
	IsSearch_condition_listContext()
}

type Search_condition_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySearch_condition_listContext() *Search_condition_listContext {
	var p = new(Search_condition_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_search_condition_list
	return p
}

func (*Search_condition_listContext) IsSearch_condition_listContext() {}

func NewSearch_condition_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Search_condition_listContext {
	var p = new(Search_condition_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_search_condition_list

	return p
}

func (s *Search_condition_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Search_condition_listContext) AllSearch_condition() []ISearch_conditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem())
	var tst = make([]ISearch_conditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISearch_conditionContext)
		}
	}

	return tst
}

func (s *Search_condition_listContext) Search_condition(i int) ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Search_condition_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Search_condition_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Search_condition_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSearch_condition_list(s)
	}
}

func (s *Search_condition_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSearch_condition_list(s)
	}
}

func (p *tsqlParser) Search_condition_list() (localctx ISearch_condition_listContext) {
	localctx = NewSearch_condition_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, tsqlParserRULE_search_condition_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2056)
		p.search_condition(0)
	}
	p.SetState(2061)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(2057)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2058)
			p.search_condition(0)
		}

		p.SetState(2063)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISearch_conditionContext is an interface to support dynamic dispatch.
type ISearch_conditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSearch_conditionContext differentiates from other interfaces.
	IsSearch_conditionContext()
}

type Search_conditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySearch_conditionContext() *Search_conditionContext {
	var p = new(Search_conditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_search_condition
	return p
}

func (*Search_conditionContext) IsSearch_conditionContext() {}

func NewSearch_conditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Search_conditionContext {
	var p = new(Search_conditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_search_condition

	return p
}

func (s *Search_conditionContext) GetParser() antlr.Parser { return s.parser }

func (s *Search_conditionContext) CopyFrom(ctx *Search_conditionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Search_conditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Search_conditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Search_cond_orContext struct {
	*Search_conditionContext
	left  ISearch_conditionContext
	op    antlr.Token
	right ISearch_conditionContext
}

func NewSearch_cond_orContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Search_cond_orContext {
	var p = new(Search_cond_orContext)

	p.Search_conditionContext = NewEmptySearch_conditionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Search_conditionContext))

	return p
}

func (s *Search_cond_orContext) GetOp() antlr.Token { return s.op }

func (s *Search_cond_orContext) SetOp(v antlr.Token) { s.op = v }

func (s *Search_cond_orContext) GetLeft() ISearch_conditionContext { return s.left }

func (s *Search_cond_orContext) GetRight() ISearch_conditionContext { return s.right }

func (s *Search_cond_orContext) SetLeft(v ISearch_conditionContext) { s.left = v }

func (s *Search_cond_orContext) SetRight(v ISearch_conditionContext) { s.right = v }

func (s *Search_cond_orContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Search_cond_orContext) AllSearch_condition() []ISearch_conditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem())
	var tst = make([]ISearch_conditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISearch_conditionContext)
		}
	}

	return tst
}

func (s *Search_cond_orContext) Search_condition(i int) ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Search_cond_orContext) OR() antlr.TerminalNode {
	return s.GetToken(tsqlParserOR, 0)
}

func (s *Search_cond_orContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSearch_cond_or(s)
	}
}

func (s *Search_cond_orContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSearch_cond_or(s)
	}
}

type Search_cond_predContext struct {
	*Search_conditionContext
}

func NewSearch_cond_predContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Search_cond_predContext {
	var p = new(Search_cond_predContext)

	p.Search_conditionContext = NewEmptySearch_conditionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Search_conditionContext))

	return p
}

func (s *Search_cond_predContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Search_cond_predContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *Search_cond_predContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSearch_cond_pred(s)
	}
}

func (s *Search_cond_predContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSearch_cond_pred(s)
	}
}

type Search_cond_andContext struct {
	*Search_conditionContext
	left  ISearch_conditionContext
	op    antlr.Token
	right ISearch_conditionContext
}

func NewSearch_cond_andContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Search_cond_andContext {
	var p = new(Search_cond_andContext)

	p.Search_conditionContext = NewEmptySearch_conditionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Search_conditionContext))

	return p
}

func (s *Search_cond_andContext) GetOp() antlr.Token { return s.op }

func (s *Search_cond_andContext) SetOp(v antlr.Token) { s.op = v }

func (s *Search_cond_andContext) GetLeft() ISearch_conditionContext { return s.left }

func (s *Search_cond_andContext) GetRight() ISearch_conditionContext { return s.right }

func (s *Search_cond_andContext) SetLeft(v ISearch_conditionContext) { s.left = v }

func (s *Search_cond_andContext) SetRight(v ISearch_conditionContext) { s.right = v }

func (s *Search_cond_andContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Search_cond_andContext) AllSearch_condition() []ISearch_conditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem())
	var tst = make([]ISearch_conditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISearch_conditionContext)
		}
	}

	return tst
}

func (s *Search_cond_andContext) Search_condition(i int) ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Search_cond_andContext) AND() antlr.TerminalNode {
	return s.GetToken(tsqlParserAND, 0)
}

func (s *Search_cond_andContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSearch_cond_and(s)
	}
}

func (s *Search_cond_andContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSearch_cond_and(s)
	}
}

func (p *tsqlParser) Search_condition() (localctx ISearch_conditionContext) {
	return p.search_condition(0)
}

func (p *tsqlParser) search_condition(_p int) (localctx ISearch_conditionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewSearch_conditionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ISearch_conditionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 186
	p.EnterRecursionRule(localctx, 186, tsqlParserRULE_search_condition, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewSearch_cond_predContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(2065)
		p.Predicate()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2075)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 314, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2073)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 313, p.GetParserRuleContext()) {
			case 1:
				localctx = NewSearch_cond_andContext(p, NewSearch_conditionContext(p, _parentctx, _parentState))
				localctx.(*Search_cond_andContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, tsqlParserRULE_search_condition)
				p.SetState(2067)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(2068)

					var _m = p.Match(tsqlParserAND)

					localctx.(*Search_cond_andContext).op = _m
				}
				{
					p.SetState(2069)

					var _x = p.search_condition(4)

					localctx.(*Search_cond_andContext).right = _x
				}

			case 2:
				localctx = NewSearch_cond_orContext(p, NewSearch_conditionContext(p, _parentctx, _parentState))
				localctx.(*Search_cond_orContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, tsqlParserRULE_search_condition)
				p.SetState(2070)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2071)

					var _m = p.Match(tsqlParserOR)

					localctx.(*Search_cond_orContext).op = _m
				}
				{
					p.SetState(2072)

					var _x = p.search_condition(3)

					localctx.(*Search_cond_orContext).right = _x
				}

			}

		}
		p.SetState(2077)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 314, p.GetParserRuleContext())
	}

	return localctx
}

// IPredicateContext is an interface to support dynamic dispatch.
type IPredicateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPredicateContext differentiates from other interfaces.
	IsPredicateContext()
}

type PredicateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPredicateContext() *PredicateContext {
	var p = new(PredicateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_predicate
	return p
}

func (*PredicateContext) IsPredicateContext() {}

func NewPredicateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PredicateContext {
	var p = new(PredicateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_predicate

	return p
}

func (s *PredicateContext) GetParser() antlr.Parser { return s.parser }

func (s *PredicateContext) CopyFrom(ctx *PredicateContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Binary_in_expressionContext struct {
	*PredicateContext
	left IExpressionContext
	op   antlr.Token
}

func NewBinary_in_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Binary_in_expressionContext {
	var p = new(Binary_in_expressionContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *Binary_in_expressionContext) GetOp() antlr.Token { return s.op }

func (s *Binary_in_expressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *Binary_in_expressionContext) GetLeft() IExpressionContext { return s.left }

func (s *Binary_in_expressionContext) SetLeft(v IExpressionContext) { s.left = v }

func (s *Binary_in_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Binary_in_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Binary_in_expressionContext) IN() antlr.TerminalNode {
	return s.GetToken(tsqlParserIN, 0)
}

func (s *Binary_in_expressionContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *Binary_in_expressionContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Binary_in_expressionContext) NOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOT, 0)
}

func (s *Binary_in_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBinary_in_expression(s)
	}
}

func (s *Binary_in_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBinary_in_expression(s)
	}
}

type Unary_operator_expression2Context struct {
	*PredicateContext
	op   antlr.Token
	expr ISubqueryContext
}

func NewUnary_operator_expression2Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *Unary_operator_expression2Context {
	var p = new(Unary_operator_expression2Context)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *Unary_operator_expression2Context) GetOp() antlr.Token { return s.op }

func (s *Unary_operator_expression2Context) SetOp(v antlr.Token) { s.op = v }

func (s *Unary_operator_expression2Context) GetExpr() ISubqueryContext { return s.expr }

func (s *Unary_operator_expression2Context) SetExpr(v ISubqueryContext) { s.expr = v }

func (s *Unary_operator_expression2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_operator_expression2Context) EXISTS() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXISTS, 0)
}

func (s *Unary_operator_expression2Context) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *Unary_operator_expression2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterUnary_operator_expression2(s)
	}
}

func (s *Unary_operator_expression2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitUnary_operator_expression2(s)
	}
}

type Binary_mod_expressionContext struct {
	*PredicateContext
	left        IExpressionContext
	op          antlr.Token
	_expression IExpressionContext
	right       []IExpressionContext
}

func NewBinary_mod_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Binary_mod_expressionContext {
	var p = new(Binary_mod_expressionContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *Binary_mod_expressionContext) GetOp() antlr.Token { return s.op }

func (s *Binary_mod_expressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *Binary_mod_expressionContext) GetLeft() IExpressionContext { return s.left }

func (s *Binary_mod_expressionContext) Get_expression() IExpressionContext { return s._expression }

func (s *Binary_mod_expressionContext) SetLeft(v IExpressionContext) { s.left = v }

func (s *Binary_mod_expressionContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Binary_mod_expressionContext) GetRight() []IExpressionContext { return s.right }

func (s *Binary_mod_expressionContext) SetRight(v []IExpressionContext) { s.right = v }

func (s *Binary_mod_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Binary_mod_expressionContext) AND() antlr.TerminalNode {
	return s.GetToken(tsqlParserAND, 0)
}

func (s *Binary_mod_expressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Binary_mod_expressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Binary_mod_expressionContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(tsqlParserBETWEEN, 0)
}

func (s *Binary_mod_expressionContext) NOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOT, 0)
}

func (s *Binary_mod_expressionContext) LIKE() antlr.TerminalNode {
	return s.GetToken(tsqlParserLIKE, 0)
}

func (s *Binary_mod_expressionContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(tsqlParserESCAPE, 0)
}

func (s *Binary_mod_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBinary_mod_expression(s)
	}
}

func (s *Binary_mod_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBinary_mod_expression(s)
	}
}

type Unary_operator_expression3Context struct {
	*PredicateContext
	op   antlr.Token
	expr IPredicateContext
}

func NewUnary_operator_expression3Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *Unary_operator_expression3Context {
	var p = new(Unary_operator_expression3Context)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *Unary_operator_expression3Context) GetOp() antlr.Token { return s.op }

func (s *Unary_operator_expression3Context) SetOp(v antlr.Token) { s.op = v }

func (s *Unary_operator_expression3Context) GetExpr() IPredicateContext { return s.expr }

func (s *Unary_operator_expression3Context) SetExpr(v IPredicateContext) { s.expr = v }

func (s *Unary_operator_expression3Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_operator_expression3Context) NOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOT, 0)
}

func (s *Unary_operator_expression3Context) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *Unary_operator_expression3Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterUnary_operator_expression3(s)
	}
}

func (s *Unary_operator_expression3Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitUnary_operator_expression3(s)
	}
}

type Bracket_search_expressionContext struct {
	*PredicateContext
}

func NewBracket_search_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Bracket_search_expressionContext {
	var p = new(Bracket_search_expressionContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *Bracket_search_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bracket_search_expressionContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Bracket_search_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBracket_search_expression(s)
	}
}

func (s *Bracket_search_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBracket_search_expression(s)
	}
}

type Sublink_expressionContext struct {
	*PredicateContext
	test_expr IExpressionContext
	op        IComparison_operatorContext
	pref      antlr.Token
}

func NewSublink_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Sublink_expressionContext {
	var p = new(Sublink_expressionContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *Sublink_expressionContext) GetPref() antlr.Token { return s.pref }

func (s *Sublink_expressionContext) SetPref(v antlr.Token) { s.pref = v }

func (s *Sublink_expressionContext) GetTest_expr() IExpressionContext { return s.test_expr }

func (s *Sublink_expressionContext) GetOp() IComparison_operatorContext { return s.op }

func (s *Sublink_expressionContext) SetTest_expr(v IExpressionContext) { s.test_expr = v }

func (s *Sublink_expressionContext) SetOp(v IComparison_operatorContext) { s.op = v }

func (s *Sublink_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sublink_expressionContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *Sublink_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Sublink_expressionContext) Comparison_operator() IComparison_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparison_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparison_operatorContext)
}

func (s *Sublink_expressionContext) ALL() antlr.TerminalNode {
	return s.GetToken(tsqlParserALL, 0)
}

func (s *Sublink_expressionContext) SOME() antlr.TerminalNode {
	return s.GetToken(tsqlParserSOME, 0)
}

func (s *Sublink_expressionContext) ANY() antlr.TerminalNode {
	return s.GetToken(tsqlParserANY, 0)
}

func (s *Sublink_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSublink_expression(s)
	}
}

func (s *Sublink_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSublink_expression(s)
	}
}

type Binary_operator_expression2Context struct {
	*PredicateContext
	left  IExpressionContext
	op    IComparison_operatorContext
	right IExpressionContext
}

func NewBinary_operator_expression2Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *Binary_operator_expression2Context {
	var p = new(Binary_operator_expression2Context)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *Binary_operator_expression2Context) GetLeft() IExpressionContext { return s.left }

func (s *Binary_operator_expression2Context) GetOp() IComparison_operatorContext { return s.op }

func (s *Binary_operator_expression2Context) GetRight() IExpressionContext { return s.right }

func (s *Binary_operator_expression2Context) SetLeft(v IExpressionContext) { s.left = v }

func (s *Binary_operator_expression2Context) SetOp(v IComparison_operatorContext) { s.op = v }

func (s *Binary_operator_expression2Context) SetRight(v IExpressionContext) { s.right = v }

func (s *Binary_operator_expression2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Binary_operator_expression2Context) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Binary_operator_expression2Context) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Binary_operator_expression2Context) Comparison_operator() IComparison_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparison_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparison_operatorContext)
}

func (s *Binary_operator_expression2Context) IS() antlr.TerminalNode {
	return s.GetToken(tsqlParserIS, 0)
}

func (s *Binary_operator_expression2Context) Null_notnull() INull_notnullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INull_notnullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INull_notnullContext)
}

func (s *Binary_operator_expression2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBinary_operator_expression2(s)
	}
}

func (s *Binary_operator_expression2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBinary_operator_expression2(s)
	}
}

type Decimal_expressionContext struct {
	*PredicateContext
}

func NewDecimal_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Decimal_expressionContext {
	var p = new(Decimal_expressionContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *Decimal_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Decimal_expressionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Decimal_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDecimal_expression(s)
	}
}

func (s *Decimal_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDecimal_expression(s)
	}
}

func (p *tsqlParser) Predicate() (localctx IPredicateContext) {
	localctx = NewPredicateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, tsqlParserRULE_predicate)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2136)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 320, p.GetParserRuleContext()) {
	case 1:
		localctx = NewUnary_operator_expression3Context(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2078)

			var _m = p.Match(tsqlParserNOT)

			localctx.(*Unary_operator_expression3Context).op = _m
		}
		{
			p.SetState(2079)

			var _x = p.Predicate()

			localctx.(*Unary_operator_expression3Context).expr = _x
		}

	case 2:
		localctx = NewUnary_operator_expression2Context(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2080)

			var _m = p.Match(tsqlParserEXISTS)

			localctx.(*Unary_operator_expression2Context).op = _m
		}
		{
			p.SetState(2081)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2082)

			var _x = p.Subquery()

			localctx.(*Unary_operator_expression2Context).expr = _x
		}
		{
			p.SetState(2083)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 3:
		localctx = NewBinary_operator_expression2Context(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2085)

			var _x = p.expression(0)

			localctx.(*Binary_operator_expression2Context).left = _x
		}
		{
			p.SetState(2086)

			var _x = p.Comparison_operator()

			localctx.(*Binary_operator_expression2Context).op = _x
		}
		{
			p.SetState(2087)

			var _x = p.expression(0)

			localctx.(*Binary_operator_expression2Context).right = _x
		}

	case 4:
		localctx = NewSublink_expressionContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2089)

			var _x = p.expression(0)

			localctx.(*Sublink_expressionContext).test_expr = _x
		}
		{
			p.SetState(2090)

			var _x = p.Comparison_operator()

			localctx.(*Sublink_expressionContext).op = _x
		}
		{
			p.SetState(2091)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Sublink_expressionContext).pref = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserALL || _la == tsqlParserANY || _la == tsqlParserSOME) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Sublink_expressionContext).pref = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2092)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2093)
			p.Subquery()
		}
		{
			p.SetState(2094)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 5:
		localctx = NewBinary_mod_expressionContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2096)

			var _x = p.expression(0)

			localctx.(*Binary_mod_expressionContext).left = _x
		}
		p.SetState(2098)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserNOT {
			{
				p.SetState(2097)
				p.Match(tsqlParserNOT)
			}

		}
		{
			p.SetState(2100)

			var _m = p.Match(tsqlParserBETWEEN)

			localctx.(*Binary_mod_expressionContext).op = _m
		}
		{
			p.SetState(2101)

			var _x = p.expression(0)

			localctx.(*Binary_mod_expressionContext)._expression = _x
		}
		localctx.(*Binary_mod_expressionContext).right = append(localctx.(*Binary_mod_expressionContext).right, localctx.(*Binary_mod_expressionContext)._expression)
		{
			p.SetState(2102)
			p.Match(tsqlParserAND)
		}
		{
			p.SetState(2103)

			var _x = p.expression(0)

			localctx.(*Binary_mod_expressionContext)._expression = _x
		}
		localctx.(*Binary_mod_expressionContext).right = append(localctx.(*Binary_mod_expressionContext).right, localctx.(*Binary_mod_expressionContext)._expression)

	case 6:
		localctx = NewBinary_in_expressionContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2105)

			var _x = p.expression(0)

			localctx.(*Binary_in_expressionContext).left = _x
		}
		p.SetState(2107)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserNOT {
			{
				p.SetState(2106)
				p.Match(tsqlParserNOT)
			}

		}
		{
			p.SetState(2109)

			var _m = p.Match(tsqlParserIN)

			localctx.(*Binary_in_expressionContext).op = _m
		}
		{
			p.SetState(2110)
			p.Match(tsqlParserLR_BRACKET)
		}
		p.SetState(2113)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 317, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(2111)
				p.Subquery()
			}

		case 2:
			{
				p.SetState(2112)
				p.Expression_list()
			}

		}
		{
			p.SetState(2115)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 7:
		localctx = NewBinary_mod_expressionContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2117)

			var _x = p.expression(0)

			localctx.(*Binary_mod_expressionContext).left = _x
		}
		p.SetState(2119)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserNOT {
			{
				p.SetState(2118)
				p.Match(tsqlParserNOT)
			}

		}
		{
			p.SetState(2121)

			var _m = p.Match(tsqlParserLIKE)

			localctx.(*Binary_mod_expressionContext).op = _m
		}
		{
			p.SetState(2122)

			var _x = p.expression(0)

			localctx.(*Binary_mod_expressionContext)._expression = _x
		}
		localctx.(*Binary_mod_expressionContext).right = append(localctx.(*Binary_mod_expressionContext).right, localctx.(*Binary_mod_expressionContext)._expression)
		p.SetState(2125)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 319, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2123)
				p.Match(tsqlParserESCAPE)
			}
			{
				p.SetState(2124)

				var _x = p.expression(0)

				localctx.(*Binary_mod_expressionContext)._expression = _x
			}
			localctx.(*Binary_mod_expressionContext).right = append(localctx.(*Binary_mod_expressionContext).right, localctx.(*Binary_mod_expressionContext)._expression)

		}

	case 8:
		localctx = NewBinary_operator_expression2Context(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2127)
			p.expression(0)
		}
		{
			p.SetState(2128)
			p.Match(tsqlParserIS)
		}
		{
			p.SetState(2129)
			p.Null_notnull()
		}

	case 9:
		localctx = NewBracket_search_expressionContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2131)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2132)
			p.search_condition(0)
		}
		{
			p.SetState(2133)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 10:
		localctx = NewDecimal_expressionContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2135)
			p.Match(tsqlParserDECIMAL)
		}

	}

	return localctx
}

// IQuery_expressionContext is an interface to support dynamic dispatch.
type IQuery_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQuery_expressionContext differentiates from other interfaces.
	IsQuery_expressionContext()
}

type Query_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_expressionContext() *Query_expressionContext {
	var p = new(Query_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_query_expression
	return p
}

func (*Query_expressionContext) IsQuery_expressionContext() {}

func NewQuery_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_expressionContext {
	var p = new(Query_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_query_expression

	return p
}

func (s *Query_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_expressionContext) CopyFrom(ctx *Query_expressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Query_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Bracket_query_expressionContext struct {
	*Query_expressionContext
}

func NewBracket_query_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Bracket_query_expressionContext {
	var p = new(Bracket_query_expressionContext)

	p.Query_expressionContext = NewEmptyQuery_expressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Query_expressionContext))

	return p
}

func (s *Bracket_query_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bracket_query_expressionContext) Query_expression() IQuery_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_expressionContext)
}

func (s *Bracket_query_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBracket_query_expression(s)
	}
}

func (s *Bracket_query_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBracket_query_expression(s)
	}
}

type Query_specification_expressionContext struct {
	*Query_expressionContext
}

func NewQuery_specification_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Query_specification_expressionContext {
	var p = new(Query_specification_expressionContext)

	p.Query_expressionContext = NewEmptyQuery_expressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Query_expressionContext))

	return p
}

func (s *Query_specification_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_specification_expressionContext) Query_specification() IQuery_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_specificationContext)
}

func (s *Query_specification_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterQuery_specification_expression(s)
	}
}

func (s *Query_specification_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitQuery_specification_expression(s)
	}
}

type Union_query_expressionContext struct {
	*Query_expressionContext
	left  IQuery_expressionContext
	op    IUnion_opContext
	right IQuery_expressionContext
}

func NewUnion_query_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Union_query_expressionContext {
	var p = new(Union_query_expressionContext)

	p.Query_expressionContext = NewEmptyQuery_expressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Query_expressionContext))

	return p
}

func (s *Union_query_expressionContext) GetLeft() IQuery_expressionContext { return s.left }

func (s *Union_query_expressionContext) GetOp() IUnion_opContext { return s.op }

func (s *Union_query_expressionContext) GetRight() IQuery_expressionContext { return s.right }

func (s *Union_query_expressionContext) SetLeft(v IQuery_expressionContext) { s.left = v }

func (s *Union_query_expressionContext) SetOp(v IUnion_opContext) { s.op = v }

func (s *Union_query_expressionContext) SetRight(v IQuery_expressionContext) { s.right = v }

func (s *Union_query_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Union_query_expressionContext) AllQuery_expression() []IQuery_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IQuery_expressionContext)(nil)).Elem())
	var tst = make([]IQuery_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IQuery_expressionContext)
		}
	}

	return tst
}

func (s *Union_query_expressionContext) Query_expression(i int) IQuery_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IQuery_expressionContext)
}

func (s *Union_query_expressionContext) Union_op() IUnion_opContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnion_opContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnion_opContext)
}

func (s *Union_query_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterUnion_query_expression(s)
	}
}

func (s *Union_query_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitUnion_query_expression(s)
	}
}

func (p *tsqlParser) Query_expression() (localctx IQuery_expressionContext) {
	return p.query_expression(0)
}

func (p *tsqlParser) query_expression(_p int) (localctx IQuery_expressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewQuery_expressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IQuery_expressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 190
	p.EnterRecursionRule(localctx, 190, tsqlParserRULE_query_expression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2144)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserLR_BRACKET:
		localctx = NewBracket_query_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(2139)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2140)
			p.query_expression(0)
		}
		{
			p.SetState(2141)
			p.Match(tsqlParserRR_BRACKET)
		}

	case tsqlParserSELECT:
		localctx = NewQuery_specification_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(2143)
			p.Query_specification()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2152)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 322, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewUnion_query_expressionContext(p, NewQuery_expressionContext(p, _parentctx, _parentState))
			localctx.(*Union_query_expressionContext).left = _prevctx

			p.PushNewRecursionContext(localctx, _startState, tsqlParserRULE_query_expression)
			p.SetState(2146)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(2147)

				var _x = p.Union_op()

				localctx.(*Union_query_expressionContext).op = _x
			}
			{
				p.SetState(2148)

				var _x = p.query_expression(3)

				localctx.(*Union_query_expressionContext).right = _x
			}

		}
		p.SetState(2154)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 322, p.GetParserRuleContext())
	}

	return localctx
}

// IUnion_opContext is an interface to support dynamic dispatch.
type IUnion_opContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnion_opContext differentiates from other interfaces.
	IsUnion_opContext()
}

type Union_opContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnion_opContext() *Union_opContext {
	var p = new(Union_opContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_union_op
	return p
}

func (*Union_opContext) IsUnion_opContext() {}

func NewUnion_opContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Union_opContext {
	var p = new(Union_opContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_union_op

	return p
}

func (s *Union_opContext) GetParser() antlr.Parser { return s.parser }

func (s *Union_opContext) UNION() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNION, 0)
}

func (s *Union_opContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXCEPT, 0)
}

func (s *Union_opContext) INTERSECT() antlr.TerminalNode {
	return s.GetToken(tsqlParserINTERSECT, 0)
}

func (s *Union_opContext) ALL() antlr.TerminalNode {
	return s.GetToken(tsqlParserALL, 0)
}

func (s *Union_opContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Union_opContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Union_opContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterUnion_op(s)
	}
}

func (s *Union_opContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitUnion_op(s)
	}
}

func (p *tsqlParser) Union_op() (localctx IUnion_opContext) {
	localctx = NewUnion_opContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, tsqlParserRULE_union_op)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2161)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserUNION:
		{
			p.SetState(2155)
			p.Match(tsqlParserUNION)
		}
		p.SetState(2157)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserALL {
			{
				p.SetState(2156)
				p.Match(tsqlParserALL)
			}

		}

	case tsqlParserEXCEPT:
		{
			p.SetState(2159)
			p.Match(tsqlParserEXCEPT)
		}

	case tsqlParserINTERSECT:
		{
			p.SetState(2160)
			p.Match(tsqlParserINTERSECT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQuery_specificationContext is an interface to support dynamic dispatch.
type IQuery_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPref returns the pref token.
	GetPref() antlr.Token

	// SetPref sets the pref token.
	SetPref(antlr.Token)

	// GetWhere returns the where rule contexts.
	GetWhere() ISearch_conditionContext

	// GetHaving returns the having rule contexts.
	GetHaving() ISearch_conditionContext

	// SetWhere sets the where rule contexts.
	SetWhere(ISearch_conditionContext)

	// SetHaving sets the having rule contexts.
	SetHaving(ISearch_conditionContext)

	// IsQuery_specificationContext differentiates from other interfaces.
	IsQuery_specificationContext()
}

type Query_specificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	pref   antlr.Token
	where  ISearch_conditionContext
	having ISearch_conditionContext
}

func NewEmptyQuery_specificationContext() *Query_specificationContext {
	var p = new(Query_specificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_query_specification
	return p
}

func (*Query_specificationContext) IsQuery_specificationContext() {}

func NewQuery_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_specificationContext {
	var p = new(Query_specificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_query_specification

	return p
}

func (s *Query_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_specificationContext) GetPref() antlr.Token { return s.pref }

func (s *Query_specificationContext) SetPref(v antlr.Token) { s.pref = v }

func (s *Query_specificationContext) GetWhere() ISearch_conditionContext { return s.where }

func (s *Query_specificationContext) GetHaving() ISearch_conditionContext { return s.having }

func (s *Query_specificationContext) SetWhere(v ISearch_conditionContext) { s.where = v }

func (s *Query_specificationContext) SetHaving(v ISearch_conditionContext) { s.having = v }

func (s *Query_specificationContext) SELECT() antlr.TerminalNode {
	return s.GetToken(tsqlParserSELECT, 0)
}

func (s *Query_specificationContext) Select_list() ISelect_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *Query_specificationContext) Top_clause() ITop_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITop_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITop_clauseContext)
}

func (s *Query_specificationContext) INTO() antlr.TerminalNode {
	return s.GetToken(tsqlParserINTO, 0)
}

func (s *Query_specificationContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Query_specificationContext) FROM() antlr.TerminalNode {
	return s.GetToken(tsqlParserFROM, 0)
}

func (s *Query_specificationContext) Table_sources() ITable_sourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourcesContext)
}

func (s *Query_specificationContext) WHERE() antlr.TerminalNode {
	return s.GetToken(tsqlParserWHERE, 0)
}

func (s *Query_specificationContext) GROUP() antlr.TerminalNode {
	return s.GetToken(tsqlParserGROUP, 0)
}

func (s *Query_specificationContext) BY() antlr.TerminalNode {
	return s.GetToken(tsqlParserBY, 0)
}

func (s *Query_specificationContext) AllGroup_by_item() []IGroup_by_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGroup_by_itemContext)(nil)).Elem())
	var tst = make([]IGroup_by_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGroup_by_itemContext)
		}
	}

	return tst
}

func (s *Query_specificationContext) Group_by_item(i int) IGroup_by_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroup_by_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGroup_by_itemContext)
}

func (s *Query_specificationContext) HAVING() antlr.TerminalNode {
	return s.GetToken(tsqlParserHAVING, 0)
}

func (s *Query_specificationContext) AllSearch_condition() []ISearch_conditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem())
	var tst = make([]ISearch_conditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISearch_conditionContext)
		}
	}

	return tst
}

func (s *Query_specificationContext) Search_condition(i int) ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Query_specificationContext) ALL() antlr.TerminalNode {
	return s.GetToken(tsqlParserALL, 0)
}

func (s *Query_specificationContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(tsqlParserDISTINCT, 0)
}

func (s *Query_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterQuery_specification(s)
	}
}

func (s *Query_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitQuery_specification(s)
	}
}

func (p *tsqlParser) Query_specification() (localctx IQuery_specificationContext) {
	localctx = NewQuery_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, tsqlParserRULE_query_specification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2163)
		p.Match(tsqlParserSELECT)
	}
	p.SetState(2165)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserALL || _la == tsqlParserDISTINCT {
		{
			p.SetState(2164)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Query_specificationContext).pref = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserALL || _la == tsqlParserDISTINCT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Query_specificationContext).pref = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(2168)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserTOP {
		{
			p.SetState(2167)
			p.Top_clause()
		}

	}
	{
		p.SetState(2170)
		p.Select_list()
	}
	p.SetState(2173)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 327, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2171)
			p.Match(tsqlParserINTO)
		}
		{
			p.SetState(2172)
			p.Table_name()
		}

	}
	p.SetState(2177)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 328, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2175)
			p.Match(tsqlParserFROM)
		}
		{
			p.SetState(2176)
			p.Table_sources()
		}

	}
	p.SetState(2181)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 329, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2179)
			p.Match(tsqlParserWHERE)
		}
		{
			p.SetState(2180)

			var _x = p.search_condition(0)

			localctx.(*Query_specificationContext).where = _x
		}

	}
	p.SetState(2193)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 331, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2183)
			p.Match(tsqlParserGROUP)
		}
		{
			p.SetState(2184)
			p.Match(tsqlParserBY)
		}
		{
			p.SetState(2185)
			p.Group_by_item()
		}
		p.SetState(2190)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 330, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2186)
					p.Match(tsqlParserCOMMA)
				}
				{
					p.SetState(2187)
					p.Group_by_item()
				}

			}
			p.SetState(2192)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 330, p.GetParserRuleContext())
		}

	}
	p.SetState(2197)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 332, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2195)
			p.Match(tsqlParserHAVING)
		}
		{
			p.SetState(2196)

			var _x = p.search_condition(0)

			localctx.(*Query_specificationContext).having = _x
		}

	}

	return localctx
}

// ITop_clauseContext is an interface to support dynamic dispatch.
type ITop_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTop_clauseContext differentiates from other interfaces.
	IsTop_clauseContext()
}

type Top_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTop_clauseContext() *Top_clauseContext {
	var p = new(Top_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_top_clause
	return p
}

func (*Top_clauseContext) IsTop_clauseContext() {}

func NewTop_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Top_clauseContext {
	var p = new(Top_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_top_clause

	return p
}

func (s *Top_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Top_clauseContext) TOP() antlr.TerminalNode {
	return s.GetToken(tsqlParserTOP, 0)
}

func (s *Top_clauseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Top_clauseContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserPERCENT, 0)
}

func (s *Top_clauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Top_clauseContext) TIES() antlr.TerminalNode {
	return s.GetToken(tsqlParserTIES, 0)
}

func (s *Top_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Top_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Top_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTop_clause(s)
	}
}

func (s *Top_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTop_clause(s)
	}
}

func (p *tsqlParser) Top_clause() (localctx ITop_clauseContext) {
	localctx = NewTop_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, tsqlParserRULE_top_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2199)
		p.Match(tsqlParserTOP)
	}
	{
		p.SetState(2200)
		p.expression(0)
	}
	p.SetState(2202)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserPERCENT {
		{
			p.SetState(2201)
			p.Match(tsqlParserPERCENT)
		}

	}
	p.SetState(2206)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH {
		{
			p.SetState(2204)
			p.Match(tsqlParserWITH)
		}
		{
			p.SetState(2205)
			p.Match(tsqlParserTIES)
		}

	}

	return localctx
}

// ITop_clause_dmContext is an interface to support dynamic dispatch.
type ITop_clause_dmContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTop_clause_dmContext differentiates from other interfaces.
	IsTop_clause_dmContext()
}

type Top_clause_dmContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTop_clause_dmContext() *Top_clause_dmContext {
	var p = new(Top_clause_dmContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_top_clause_dm
	return p
}

func (*Top_clause_dmContext) IsTop_clause_dmContext() {}

func NewTop_clause_dmContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Top_clause_dmContext {
	var p = new(Top_clause_dmContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_top_clause_dm

	return p
}

func (s *Top_clause_dmContext) GetParser() antlr.Parser { return s.parser }

func (s *Top_clause_dmContext) TOP() antlr.TerminalNode {
	return s.GetToken(tsqlParserTOP, 0)
}

func (s *Top_clause_dmContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Top_clause_dmContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserPERCENT, 0)
}

func (s *Top_clause_dmContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Top_clause_dmContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Top_clause_dmContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTop_clause_dm(s)
	}
}

func (s *Top_clause_dmContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTop_clause_dm(s)
	}
}

func (p *tsqlParser) Top_clause_dm() (localctx ITop_clause_dmContext) {
	localctx = NewTop_clause_dmContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, tsqlParserRULE_top_clause_dm)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2208)
		p.Match(tsqlParserTOP)
	}
	{
		p.SetState(2209)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2210)
		p.expression(0)
	}
	{
		p.SetState(2211)
		p.Match(tsqlParserRR_BRACKET)
	}
	p.SetState(2213)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserPERCENT {
		{
			p.SetState(2212)
			p.Match(tsqlParserPERCENT)
		}

	}

	return localctx
}

// IOrder_by_clauseContext is an interface to support dynamic dispatch.
type IOrder_by_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOffset returns the offset rule contexts.
	GetOffset() IExpressionContext

	// SetOffset sets the offset rule contexts.
	SetOffset(IExpressionContext)

	// IsOrder_by_clauseContext differentiates from other interfaces.
	IsOrder_by_clauseContext()
}

type Order_by_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	offset IExpressionContext
}

func NewEmptyOrder_by_clauseContext() *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_order_by_clause
	return p
}

func (*Order_by_clauseContext) IsOrder_by_clauseContext() {}

func NewOrder_by_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_order_by_clause

	return p
}

func (s *Order_by_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_clauseContext) GetOffset() IExpressionContext { return s.offset }

func (s *Order_by_clauseContext) SetOffset(v IExpressionContext) { s.offset = v }

func (s *Order_by_clauseContext) ORDER() antlr.TerminalNode {
	return s.GetToken(tsqlParserORDER, 0)
}

func (s *Order_by_clauseContext) BY() antlr.TerminalNode {
	return s.GetToken(tsqlParserBY, 0)
}

func (s *Order_by_clauseContext) AllOrder_by_expression() []IOrder_by_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrder_by_expressionContext)(nil)).Elem())
	var tst = make([]IOrder_by_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrder_by_expressionContext)
		}
	}

	return tst
}

func (s *Order_by_clauseContext) Order_by_expression(i int) IOrder_by_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_expressionContext)
}

func (s *Order_by_clauseContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFFSET, 0)
}

func (s *Order_by_clauseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Order_by_clauseContext) ROW() antlr.TerminalNode {
	return s.GetToken(tsqlParserROW, 0)
}

func (s *Order_by_clauseContext) ROWS() antlr.TerminalNode {
	return s.GetToken(tsqlParserROWS, 0)
}

func (s *Order_by_clauseContext) Fetch_expression() IFetch_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFetch_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFetch_expressionContext)
}

func (s *Order_by_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOrder_by_clause(s)
	}
}

func (s *Order_by_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOrder_by_clause(s)
	}
}

func (p *tsqlParser) Order_by_clause() (localctx IOrder_by_clauseContext) {
	localctx = NewOrder_by_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, tsqlParserRULE_order_by_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2215)
		p.Match(tsqlParserORDER)
	}
	{
		p.SetState(2216)
		p.Match(tsqlParserBY)
	}
	{
		p.SetState(2217)
		p.Order_by_expression()
	}
	p.SetState(2222)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 336, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2218)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2219)
				p.Order_by_expression()
			}

		}
		p.SetState(2224)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 336, p.GetParserRuleContext())
	}
	p.SetState(2231)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 338, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2225)
			p.Match(tsqlParserOFFSET)
		}
		{
			p.SetState(2226)

			var _x = p.expression(0)

			localctx.(*Order_by_clauseContext).offset = _x
		}
		{
			p.SetState(2227)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserROW || _la == tsqlParserROWS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(2229)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 337, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2228)
				p.Fetch_expression()
			}

		}

	}

	return localctx
}

// IFetch_expressionContext is an interface to support dynamic dispatch.
type IFetch_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFetch_expressionContext differentiates from other interfaces.
	IsFetch_expressionContext()
}

type Fetch_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFetch_expressionContext() *Fetch_expressionContext {
	var p = new(Fetch_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_fetch_expression
	return p
}

func (*Fetch_expressionContext) IsFetch_expressionContext() {}

func NewFetch_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fetch_expressionContext {
	var p = new(Fetch_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_fetch_expression

	return p
}

func (s *Fetch_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Fetch_expressionContext) FETCH() antlr.TerminalNode {
	return s.GetToken(tsqlParserFETCH, 0)
}

func (s *Fetch_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Fetch_expressionContext) ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserONLY, 0)
}

func (s *Fetch_expressionContext) FIRST() antlr.TerminalNode {
	return s.GetToken(tsqlParserFIRST, 0)
}

func (s *Fetch_expressionContext) NEXT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNEXT, 0)
}

func (s *Fetch_expressionContext) ROW() antlr.TerminalNode {
	return s.GetToken(tsqlParserROW, 0)
}

func (s *Fetch_expressionContext) ROWS() antlr.TerminalNode {
	return s.GetToken(tsqlParserROWS, 0)
}

func (s *Fetch_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fetch_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Fetch_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFetch_expression(s)
	}
}

func (s *Fetch_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFetch_expression(s)
	}
}

func (p *tsqlParser) Fetch_expression() (localctx IFetch_expressionContext) {
	localctx = NewFetch_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, tsqlParserRULE_fetch_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2233)
		p.Match(tsqlParserFETCH)
	}
	{
		p.SetState(2234)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserNEXT || _la == tsqlParserFIRST) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(2235)
		p.expression(0)
	}
	{
		p.SetState(2236)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserROW || _la == tsqlParserROWS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(2237)
		p.Match(tsqlParserONLY)
	}

	return localctx
}

// IFor_clauseContext is an interface to support dynamic dispatch.
type IFor_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFor_clauseContext differentiates from other interfaces.
	IsFor_clauseContext()
}

type For_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_clauseContext() *For_clauseContext {
	var p = new(For_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_for_clause
	return p
}

func (*For_clauseContext) IsFor_clauseContext() {}

func NewFor_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_clauseContext {
	var p = new(For_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_for_clause

	return p
}

func (s *For_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *For_clauseContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *For_clauseContext) BROWSE() antlr.TerminalNode {
	return s.GetToken(tsqlParserBROWSE, 0)
}

func (s *For_clauseContext) XML() antlr.TerminalNode {
	return s.GetToken(tsqlParserXML, 0)
}

func (s *For_clauseContext) AUTO() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO, 0)
}

func (s *For_clauseContext) Xml_common_directives() IXml_common_directivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXml_common_directivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXml_common_directivesContext)
}

func (s *For_clauseContext) PATH() antlr.TerminalNode {
	return s.GetToken(tsqlParserPATH, 0)
}

func (s *For_clauseContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *For_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *For_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFor_clause(s)
	}
}

func (s *For_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFor_clause(s)
	}
}

func (p *tsqlParser) For_clause() (localctx IFor_clauseContext) {
	localctx = NewFor_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, tsqlParserRULE_for_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2258)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 342, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2239)
			p.Match(tsqlParserFOR)
		}
		{
			p.SetState(2240)
			p.Match(tsqlParserBROWSE)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2241)
			p.Match(tsqlParserFOR)
		}
		{
			p.SetState(2242)
			p.Match(tsqlParserXML)
		}
		{
			p.SetState(2243)
			p.Match(tsqlParserAUTO)
		}
		p.SetState(2245)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 339, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2244)
				p.Xml_common_directives()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2247)
			p.Match(tsqlParserFOR)
		}
		{
			p.SetState(2248)
			p.Match(tsqlParserXML)
		}
		{
			p.SetState(2249)
			p.Match(tsqlParserPATH)
		}
		p.SetState(2253)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 340, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2250)
				p.Match(tsqlParserLR_BRACKET)
			}
			{
				p.SetState(2251)
				p.Match(tsqlParserSTRING)
			}
			{
				p.SetState(2252)
				p.Match(tsqlParserRR_BRACKET)
			}

		}
		p.SetState(2256)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 341, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2255)
				p.Xml_common_directives()
			}

		}

	}

	return localctx
}

// IXml_common_directivesContext is an interface to support dynamic dispatch.
type IXml_common_directivesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXml_common_directivesContext differentiates from other interfaces.
	IsXml_common_directivesContext()
}

type Xml_common_directivesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXml_common_directivesContext() *Xml_common_directivesContext {
	var p = new(Xml_common_directivesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_xml_common_directives
	return p
}

func (*Xml_common_directivesContext) IsXml_common_directivesContext() {}

func NewXml_common_directivesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Xml_common_directivesContext {
	var p = new(Xml_common_directivesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_xml_common_directives

	return p
}

func (s *Xml_common_directivesContext) GetParser() antlr.Parser { return s.parser }

func (s *Xml_common_directivesContext) BINARY() antlr.TerminalNode {
	return s.GetToken(tsqlParserBINARY, 0)
}

func (s *Xml_common_directivesContext) BASE64() antlr.TerminalNode {
	return s.GetToken(tsqlParserBASE64, 0)
}

func (s *Xml_common_directivesContext) TYPE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTYPE, 0)
}

func (s *Xml_common_directivesContext) ROOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserROOT, 0)
}

func (s *Xml_common_directivesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Xml_common_directivesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Xml_common_directivesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterXml_common_directives(s)
	}
}

func (s *Xml_common_directivesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitXml_common_directives(s)
	}
}

func (p *tsqlParser) Xml_common_directives() (localctx IXml_common_directivesContext) {
	localctx = NewXml_common_directivesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, tsqlParserRULE_xml_common_directives)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2260)
		p.Match(tsqlParserCOMMA)
	}
	p.SetState(2265)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserBINARY:
		{
			p.SetState(2261)
			p.Match(tsqlParserBINARY)
		}
		{
			p.SetState(2262)
			p.Match(tsqlParserBASE64)
		}

	case tsqlParserTYPE:
		{
			p.SetState(2263)
			p.Match(tsqlParserTYPE)
		}

	case tsqlParserROOT:
		{
			p.SetState(2264)
			p.Match(tsqlParserROOT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOrder_by_expressionContext is an interface to support dynamic dispatch.
type IOrder_by_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDirection returns the direction token.
	GetDirection() antlr.Token

	// SetDirection sets the direction token.
	SetDirection(antlr.Token)

	// IsOrder_by_expressionContext differentiates from other interfaces.
	IsOrder_by_expressionContext()
}

type Order_by_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	direction antlr.Token
}

func NewEmptyOrder_by_expressionContext() *Order_by_expressionContext {
	var p = new(Order_by_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_order_by_expression
	return p
}

func (*Order_by_expressionContext) IsOrder_by_expressionContext() {}

func NewOrder_by_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_expressionContext {
	var p = new(Order_by_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_order_by_expression

	return p
}

func (s *Order_by_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_expressionContext) GetDirection() antlr.Token { return s.direction }

func (s *Order_by_expressionContext) SetDirection(v antlr.Token) { s.direction = v }

func (s *Order_by_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Order_by_expressionContext) ASC() antlr.TerminalNode {
	return s.GetToken(tsqlParserASC, 0)
}

func (s *Order_by_expressionContext) DESC() antlr.TerminalNode {
	return s.GetToken(tsqlParserDESC, 0)
}

func (s *Order_by_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOrder_by_expression(s)
	}
}

func (s *Order_by_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOrder_by_expression(s)
	}
}

func (p *tsqlParser) Order_by_expression() (localctx IOrder_by_expressionContext) {
	localctx = NewOrder_by_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, tsqlParserRULE_order_by_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2267)
		p.expression(0)
	}
	p.SetState(2269)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 344, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2268)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Order_by_expressionContext).direction = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserASC || _la == tsqlParserDESC) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Order_by_expressionContext).direction = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IGroup_by_itemContext is an interface to support dynamic dispatch.
type IGroup_by_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroup_by_itemContext differentiates from other interfaces.
	IsGroup_by_itemContext()
}

type Group_by_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_by_itemContext() *Group_by_itemContext {
	var p = new(Group_by_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_group_by_item
	return p
}

func (*Group_by_itemContext) IsGroup_by_itemContext() {}

func NewGroup_by_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_by_itemContext {
	var p = new(Group_by_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_group_by_item

	return p
}

func (s *Group_by_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_by_itemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Group_by_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_by_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Group_by_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterGroup_by_item(s)
	}
}

func (s *Group_by_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitGroup_by_item(s)
	}
}

func (p *tsqlParser) Group_by_item() (localctx IGroup_by_itemContext) {
	localctx = NewGroup_by_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, tsqlParserRULE_group_by_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2271)
		p.expression(0)
	}

	return localctx
}

// IOption_clauseContext is an interface to support dynamic dispatch.
type IOption_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOption_clauseContext differentiates from other interfaces.
	IsOption_clauseContext()
}

type Option_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOption_clauseContext() *Option_clauseContext {
	var p = new(Option_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_option_clause
	return p
}

func (*Option_clauseContext) IsOption_clauseContext() {}

func NewOption_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Option_clauseContext {
	var p = new(Option_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_option_clause

	return p
}

func (s *Option_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Option_clauseContext) OPTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPTION, 0)
}

func (s *Option_clauseContext) AllOption() []IOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOptionContext)(nil)).Elem())
	var tst = make([]IOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOptionContext)
		}
	}

	return tst
}

func (s *Option_clauseContext) Option(i int) IOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOptionContext)
}

func (s *Option_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Option_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Option_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOption_clause(s)
	}
}

func (s *Option_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOption_clause(s)
	}
}

func (p *tsqlParser) Option_clause() (localctx IOption_clauseContext) {
	localctx = NewOption_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, tsqlParserRULE_option_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2273)
		p.Match(tsqlParserOPTION)
	}
	{
		p.SetState(2274)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2275)
		p.Option()
	}
	p.SetState(2280)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(2276)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2277)
			p.Option()
		}

		p.SetState(2282)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2283)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IOptionContext is an interface to support dynamic dispatch.
type IOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNumber_rows returns the number_rows token.
	GetNumber_rows() antlr.Token

	// GetNumber_of_processors returns the number_of_processors token.
	GetNumber_of_processors() antlr.Token

	// GetNumber_recursion returns the number_recursion token.
	GetNumber_recursion() antlr.Token

	// SetNumber_rows sets the number_rows token.
	SetNumber_rows(antlr.Token)

	// SetNumber_of_processors sets the number_of_processors token.
	SetNumber_of_processors(antlr.Token)

	// SetNumber_recursion sets the number_recursion token.
	SetNumber_recursion(antlr.Token)

	// IsOptionContext differentiates from other interfaces.
	IsOptionContext()
}

type OptionContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	number_rows          antlr.Token
	number_of_processors antlr.Token
	number_recursion     antlr.Token
}

func NewEmptyOptionContext() *OptionContext {
	var p = new(OptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_option
	return p
}

func (*OptionContext) IsOptionContext() {}

func NewOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptionContext {
	var p = new(OptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_option

	return p
}

func (s *OptionContext) GetParser() antlr.Parser { return s.parser }

func (s *OptionContext) GetNumber_rows() antlr.Token { return s.number_rows }

func (s *OptionContext) GetNumber_of_processors() antlr.Token { return s.number_of_processors }

func (s *OptionContext) GetNumber_recursion() antlr.Token { return s.number_recursion }

func (s *OptionContext) SetNumber_rows(v antlr.Token) { s.number_rows = v }

func (s *OptionContext) SetNumber_of_processors(v antlr.Token) { s.number_of_processors = v }

func (s *OptionContext) SetNumber_recursion(v antlr.Token) { s.number_recursion = v }

func (s *OptionContext) FAST() antlr.TerminalNode {
	return s.GetToken(tsqlParserFAST, 0)
}

func (s *OptionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *OptionContext) GROUP() antlr.TerminalNode {
	return s.GetToken(tsqlParserGROUP, 0)
}

func (s *OptionContext) HASH() antlr.TerminalNode {
	return s.GetToken(tsqlParserHASH, 0)
}

func (s *OptionContext) ORDER() antlr.TerminalNode {
	return s.GetToken(tsqlParserORDER, 0)
}

func (s *OptionContext) UNION() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNION, 0)
}

func (s *OptionContext) MERGE() antlr.TerminalNode {
	return s.GetToken(tsqlParserMERGE, 0)
}

func (s *OptionContext) CONCAT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONCAT, 0)
}

func (s *OptionContext) JOIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserJOIN, 0)
}

func (s *OptionContext) LOOP() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOOP, 0)
}

func (s *OptionContext) EXPAND() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXPAND, 0)
}

func (s *OptionContext) VIEWS() antlr.TerminalNode {
	return s.GetToken(tsqlParserVIEWS, 0)
}

func (s *OptionContext) FORCE() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORCE, 0)
}

func (s *OptionContext) IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() antlr.TerminalNode {
	return s.GetToken(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)
}

func (s *OptionContext) KEEP() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEEP, 0)
}

func (s *OptionContext) PLAN() antlr.TerminalNode {
	return s.GetToken(tsqlParserPLAN, 0)
}

func (s *OptionContext) KEEPFIXED() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEEPFIXED, 0)
}

func (s *OptionContext) MAXDOP() antlr.TerminalNode {
	return s.GetToken(tsqlParserMAXDOP, 0)
}

func (s *OptionContext) MAXRECURSION() antlr.TerminalNode {
	return s.GetToken(tsqlParserMAXRECURSION, 0)
}

func (s *OptionContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPTIMIZE, 0)
}

func (s *OptionContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *OptionContext) AllOptimize_for_arg() []IOptimize_for_argContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOptimize_for_argContext)(nil)).Elem())
	var tst = make([]IOptimize_for_argContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOptimize_for_argContext)
		}
	}

	return tst
}

func (s *OptionContext) Optimize_for_arg(i int) IOptimize_for_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptimize_for_argContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOptimize_for_argContext)
}

func (s *OptionContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNKNOWN, 0)
}

func (s *OptionContext) PARAMETERIZATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserPARAMETERIZATION, 0)
}

func (s *OptionContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSIMPLE, 0)
}

func (s *OptionContext) FORCED() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORCED, 0)
}

func (s *OptionContext) RECOMPILE() antlr.TerminalNode {
	return s.GetToken(tsqlParserRECOMPILE, 0)
}

func (s *OptionContext) ROBUST() antlr.TerminalNode {
	return s.GetToken(tsqlParserROBUST, 0)
}

func (s *OptionContext) USE() antlr.TerminalNode {
	return s.GetToken(tsqlParserUSE, 0)
}

func (s *OptionContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *OptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOption(s)
	}
}

func (s *OptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOption(s)
	}
}

func (p *tsqlParser) Option() (localctx IOptionContext) {
	localctx = NewOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, tsqlParserRULE_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2330)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 347, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2285)
			p.Match(tsqlParserFAST)
		}
		{
			p.SetState(2286)

			var _m = p.Match(tsqlParserDECIMAL)

			localctx.(*OptionContext).number_rows = _m
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2287)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserORDER || _la == tsqlParserHASH) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2288)
			p.Match(tsqlParserGROUP)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2289)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserMERGE || _la == tsqlParserCONCAT || _la == tsqlParserHASH) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2290)
			p.Match(tsqlParserUNION)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2291)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserMERGE || _la == tsqlParserHASH || _la == tsqlParserLOOP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2292)
			p.Match(tsqlParserJOIN)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2293)
			p.Match(tsqlParserEXPAND)
		}
		{
			p.SetState(2294)
			p.Match(tsqlParserVIEWS)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2295)
			p.Match(tsqlParserFORCE)
		}
		{
			p.SetState(2296)
			p.Match(tsqlParserORDER)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2297)
			p.Match(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2298)
			p.Match(tsqlParserKEEP)
		}
		{
			p.SetState(2299)
			p.Match(tsqlParserPLAN)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2300)
			p.Match(tsqlParserKEEPFIXED)
		}
		{
			p.SetState(2301)
			p.Match(tsqlParserPLAN)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2302)
			p.Match(tsqlParserMAXDOP)
		}
		{
			p.SetState(2303)

			var _m = p.Match(tsqlParserDECIMAL)

			localctx.(*OptionContext).number_of_processors = _m
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2304)
			p.Match(tsqlParserMAXRECURSION)
		}
		{
			p.SetState(2305)

			var _m = p.Match(tsqlParserDECIMAL)

			localctx.(*OptionContext).number_recursion = _m
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2306)
			p.Match(tsqlParserOPTIMIZE)
		}
		{
			p.SetState(2307)
			p.Match(tsqlParserFOR)
		}
		{
			p.SetState(2308)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2309)
			p.Optimize_for_arg()
		}
		p.SetState(2314)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(2310)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2311)
				p.Optimize_for_arg()
			}

			p.SetState(2316)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2317)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2319)
			p.Match(tsqlParserOPTIMIZE)
		}
		{
			p.SetState(2320)
			p.Match(tsqlParserFOR)
		}
		{
			p.SetState(2321)
			p.Match(tsqlParserUNKNOWN)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2322)
			p.Match(tsqlParserPARAMETERIZATION)
		}
		{
			p.SetState(2323)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserFORCED || _la == tsqlParserSIMPLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2324)
			p.Match(tsqlParserRECOMPILE)
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2325)
			p.Match(tsqlParserROBUST)
		}
		{
			p.SetState(2326)
			p.Match(tsqlParserPLAN)
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(2327)
			p.Match(tsqlParserUSE)
		}
		{
			p.SetState(2328)
			p.Match(tsqlParserPLAN)
		}
		{
			p.SetState(2329)
			p.Match(tsqlParserSTRING)
		}

	}

	return localctx
}

// IOptimize_for_argContext is an interface to support dynamic dispatch.
type IOptimize_for_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptimize_for_argContext differentiates from other interfaces.
	IsOptimize_for_argContext()
}

type Optimize_for_argContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptimize_for_argContext() *Optimize_for_argContext {
	var p = new(Optimize_for_argContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_optimize_for_arg
	return p
}

func (*Optimize_for_argContext) IsOptimize_for_argContext() {}

func NewOptimize_for_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Optimize_for_argContext {
	var p = new(Optimize_for_argContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_optimize_for_arg

	return p
}

func (s *Optimize_for_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Optimize_for_argContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Optimize_for_argContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNKNOWN, 0)
}

func (s *Optimize_for_argContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Optimize_for_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Optimize_for_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Optimize_for_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOptimize_for_arg(s)
	}
}

func (s *Optimize_for_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOptimize_for_arg(s)
	}
}

func (p *tsqlParser) Optimize_for_arg() (localctx IOptimize_for_argContext) {
	localctx = NewOptimize_for_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, tsqlParserRULE_optimize_for_arg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2332)
		p.Match(tsqlParserLOCAL_ID)
	}
	p.SetState(2336)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserUNKNOWN:
		{
			p.SetState(2333)
			p.Match(tsqlParserUNKNOWN)
		}

	case tsqlParserEQUAL:
		{
			p.SetState(2334)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2335)
			p.Constant()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelect_listContext is an interface to support dynamic dispatch.
type ISelect_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_listContext differentiates from other interfaces.
	IsSelect_listContext()
}

type Select_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_listContext() *Select_listContext {
	var p = new(Select_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_select_list
	return p
}

func (*Select_listContext) IsSelect_listContext() {}

func NewSelect_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_listContext {
	var p = new(Select_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_select_list

	return p
}

func (s *Select_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_listContext) AllSelect_list_elem() []ISelect_list_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_list_elemContext)(nil)).Elem())
	var tst = make([]ISelect_list_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_list_elemContext)
		}
	}

	return tst
}

func (s *Select_listContext) Select_list_elem(i int) ISelect_list_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_list_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_list_elemContext)
}

func (s *Select_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSelect_list(s)
	}
}

func (s *Select_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSelect_list(s)
	}
}

func (p *tsqlParser) Select_list() (localctx ISelect_listContext) {
	localctx = NewSelect_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, tsqlParserRULE_select_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2338)
		p.Select_list_elem()
	}
	p.SetState(2343)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 349, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2339)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2340)
				p.Select_list_elem()
			}

		}
		p.SetState(2345)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 349, p.GetParserRuleContext())
	}

	return localctx
}

// ISelect_list_elemContext is an interface to support dynamic dispatch.
type ISelect_list_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlias returns the alias rule contexts.
	GetAlias() IColumn_aliasContext

	// SetAlias sets the alias rule contexts.
	SetAlias(IColumn_aliasContext)

	// IsSelect_list_elemContext differentiates from other interfaces.
	IsSelect_list_elemContext()
}

type Select_list_elemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	alias  IColumn_aliasContext
}

func NewEmptySelect_list_elemContext() *Select_list_elemContext {
	var p = new(Select_list_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_select_list_elem
	return p
}

func (*Select_list_elemContext) IsSelect_list_elemContext() {}

func NewSelect_list_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_list_elemContext {
	var p = new(Select_list_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_select_list_elem

	return p
}

func (s *Select_list_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_list_elemContext) GetAlias() IColumn_aliasContext { return s.alias }

func (s *Select_list_elemContext) SetAlias(v IColumn_aliasContext) { s.alias = v }

func (s *Select_list_elemContext) A_star() IA_starContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IA_starContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IA_starContext)
}

func (s *Select_list_elemContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Select_list_elemContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(tsqlParserIDENTITY, 0)
}

func (s *Select_list_elemContext) ROWGUID() antlr.TerminalNode {
	return s.GetToken(tsqlParserROWGUID, 0)
}

func (s *Select_list_elemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Select_list_elemContext) Column_alias() IColumn_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_aliasContext)
}

func (s *Select_list_elemContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Select_list_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_list_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_list_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSelect_list_elem(s)
	}
}

func (s *Select_list_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSelect_list_elem(s)
	}
}

func (p *tsqlParser) Select_list_elem() (localctx ISelect_list_elemContext) {
	localctx = NewSelect_list_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, tsqlParserRULE_select_list_elem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2367)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 354, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2349)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserFORCESEEK || _la == tsqlParserNEXT || (((_la-196)&-(0x1f+1)) == 0 && ((1<<uint((_la-196)))&((1<<(tsqlParserABSOLUTE-196))|(1<<(tsqlParserAPPLY-196))|(1<<(tsqlParserAUTO-196))|(1<<(tsqlParserAVG-196))|(1<<(tsqlParserBASE64-196))|(1<<(tsqlParserCALLER-196))|(1<<(tsqlParserCAST-196))|(1<<(tsqlParserCATCH-196))|(1<<(tsqlParserCHECKSUM_AGG-196))|(1<<(tsqlParserCOMMITTED-196))|(1<<(tsqlParserCONCAT-196)))) != 0) || (((_la-228)&-(0x1f+1)) == 0 && ((1<<uint((_la-228)))&((1<<(tsqlParserCONTROL-228))|(1<<(tsqlParserCOOKIE-228))|(1<<(tsqlParserCOUNT-228))|(1<<(tsqlParserCOUNT_BIG-228))|(1<<(tsqlParserDELAY-228))|(1<<(tsqlParserDELETED-228))|(1<<(tsqlParserDENSE_RANK-228))|(1<<(tsqlParserDISABLE-228))|(1<<(tsqlParserDYNAMIC-228))|(1<<(tsqlParserENCRYPTION-228))|(1<<(tsqlParserEXPAND-228))|(1<<(tsqlParserFAST-228))|(1<<(tsqlParserFAST_FORWARD-228)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(tsqlParserFIRST-262))|(1<<(tsqlParserFOLLOWING-262))|(1<<(tsqlParserFORCE-262))|(1<<(tsqlParserFORCED-262))|(1<<(tsqlParserFORWARD_ONLY-262))|(1<<(tsqlParserFULLSCAN-262))|(1<<(tsqlParserGLOBAL-262))|(1<<(tsqlParserGO-262))|(1<<(tsqlParserGROUPING-262))|(1<<(tsqlParserGROUPING_ID-262))|(1<<(tsqlParserHASH-262))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-262))|(1<<(tsqlParserIMPERSONATE-262))|(1<<(tsqlParserINSENSITIVE-262))|(1<<(tsqlParserINSERTED-262))|(1<<(tsqlParserISOLATION-262))|(1<<(tsqlParserKEEP-262))|(1<<(tsqlParserKEEPFIXED-262))|(1<<(tsqlParserKEYSET-262))|(1<<(tsqlParserLAST-262))|(1<<(tsqlParserLEVEL-262))|(1<<(tsqlParserLOCAL-262))|(1<<(tsqlParserLOCK_ESCALATION-262))|(1<<(tsqlParserLOGIN-262))|(1<<(tsqlParserLOOP-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(tsqlParserMARK-294))|(1<<(tsqlParserMAX-294))|(1<<(tsqlParserMAXDOP-294))|(1<<(tsqlParserMAXRECURSION-294))|(1<<(tsqlParserMIN-294))|(1<<(tsqlParserMODIFY-294))|(1<<(tsqlParserNAME-294))|(1<<(tsqlParserNOCOUNT-294))|(1<<(tsqlParserNOEXPAND-294))|(1<<(tsqlParserNORECOMPUTE-294))|(1<<(tsqlParserNTILE-294))|(1<<(tsqlParserNUMBER-294))|(1<<(tsqlParserOFFSET-294))|(1<<(tsqlParserONLINE-294))|(1<<(tsqlParserONLY-294))|(1<<(tsqlParserOPTIMISTIC-294))|(1<<(tsqlParserOPTIMIZE-294))|(1<<(tsqlParserOUT-294))|(1<<(tsqlParserOUTPUT-294)))) != 0) || (((_la-326)&-(0x1f+1)) == 0 && ((1<<uint((_la-326)))&((1<<(tsqlParserOWNER-326))|(1<<(tsqlParserPARAMETERIZATION-326))|(1<<(tsqlParserPARTITION-326))|(1<<(tsqlParserPATH-326))|(1<<(tsqlParserPRECEDING-326))|(1<<(tsqlParserPRIOR-326))|(1<<(tsqlParserPRIVILEGES-326))|(1<<(tsqlParserRANGE-326))|(1<<(tsqlParserRANK-326))|(1<<(tsqlParserREADONLY-326))|(1<<(tsqlParserREAD_ONLY-326))|(1<<(tsqlParserRECOMPILE-326))|(1<<(tsqlParserRELATIVE-326))|(1<<(tsqlParserREMOTE-326))|(1<<(tsqlParserREPEATABLE-326))|(1<<(tsqlParserROBUST-326))|(1<<(tsqlParserROOT-326))|(1<<(tsqlParserROW-326))|(1<<(tsqlParserROWGUID-326))|(1<<(tsqlParserROWS-326))|(1<<(tsqlParserROW_NUMBER-326))|(1<<(tsqlParserSAMPLE-326))|(1<<(tsqlParserSCHEMABINDING-326))|(1<<(tsqlParserSCROLL-326))|(1<<(tsqlParserSCROLL_LOCKS-326)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(tsqlParserSELF-359))|(1<<(tsqlParserSERIALIZABLE-359))|(1<<(tsqlParserSIMPLE-359))|(1<<(tsqlParserSIZE-359))|(1<<(tsqlParserSNAPSHOT-359))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-359))|(1<<(tsqlParserSTATIC-359))|(1<<(tsqlParserSTATS_STREAM-359))|(1<<(tsqlParserSTDEV-359))|(1<<(tsqlParserSTDEVP-359))|(1<<(tsqlParserSUM-359))|(1<<(tsqlParserTEXTIMAGE_ON-359))|(1<<(tsqlParserTHROW-359))|(1<<(tsqlParserTIES-359))|(1<<(tsqlParserTIME-359))|(1<<(tsqlParserTRY-359))|(1<<(tsqlParserTYPE-359))|(1<<(tsqlParserTYPE_WARNING-359))|(1<<(tsqlParserUNBOUNDED-359))|(1<<(tsqlParserUNCOMMITTED-359))|(1<<(tsqlParserUNKNOWN-359))|(1<<(tsqlParserUSING-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(tsqlParserVAR-391))|(1<<(tsqlParserVARP-391))|(1<<(tsqlParserVIEWS-391))|(1<<(tsqlParserVIEW_METADATA-391))|(1<<(tsqlParserWORK-391))|(1<<(tsqlParserXML-391))|(1<<(tsqlParserXMLNAMESPACES-391))|(1<<(tsqlParserDOUBLE_QUOTE_ID-391))|(1<<(tsqlParserSQUARE_BRACKET_ID-391))|(1<<(tsqlParserID-391)))) != 0) {
			{
				p.SetState(2346)
				p.Table_name()
			}
			{
				p.SetState(2347)
				p.Match(tsqlParserDOT)
			}

		}
		p.SetState(2354)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserSTAR:
			{
				p.SetState(2351)
				p.A_star()
			}

		case tsqlParserDOLLAR:
			{
				p.SetState(2352)
				p.Match(tsqlParserDOLLAR)
			}
			{
				p.SetState(2353)
				_la = p.GetTokenStream().LA(1)

				if !(_la == tsqlParserIDENTITY || _la == tsqlParserROWGUID) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2356)

			var _x = p.Column_alias()

			localctx.(*Select_list_elemContext).alias = _x
		}
		{
			p.SetState(2357)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2358)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2360)
			p.expression(0)
		}
		p.SetState(2365)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 353, p.GetParserRuleContext()) == 1 {
			p.SetState(2362)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserAS {
				{
					p.SetState(2361)
					p.Match(tsqlParserAS)
				}

			}
			{
				p.SetState(2364)

				var _x = p.Column_alias()

				localctx.(*Select_list_elemContext).alias = _x
			}

		}

	}

	return localctx
}

// ITable_sourcesContext is an interface to support dynamic dispatch.
type ITable_sourcesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_sourcesContext differentiates from other interfaces.
	IsTable_sourcesContext()
}

type Table_sourcesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_sourcesContext() *Table_sourcesContext {
	var p = new(Table_sourcesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_sources
	return p
}

func (*Table_sourcesContext) IsTable_sourcesContext() {}

func NewTable_sourcesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_sourcesContext {
	var p = new(Table_sourcesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_sources

	return p
}

func (s *Table_sourcesContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_sourcesContext) AllTable_source() []ITable_sourceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem())
	var tst = make([]ITable_sourceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_sourceContext)
		}
	}

	return tst
}

func (s *Table_sourcesContext) Table_source(i int) ITable_sourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_sourceContext)
}

func (s *Table_sourcesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_sourcesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_sourcesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_sources(s)
	}
}

func (s *Table_sourcesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_sources(s)
	}
}

func (p *tsqlParser) Table_sources() (localctx ITable_sourcesContext) {
	localctx = NewTable_sourcesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, tsqlParserRULE_table_sources)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2369)
		p.table_source(0)
	}
	p.SetState(2374)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 355, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2370)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2371)
				p.table_source(0)
			}

		}
		p.SetState(2376)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 355, p.GetParserRuleContext())
	}

	return localctx
}

// ITable_sourceContext is an interface to support dynamic dispatch.
type ITable_sourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_sourceContext differentiates from other interfaces.
	IsTable_sourceContext()
}

type Table_sourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_sourceContext() *Table_sourceContext {
	var p = new(Table_sourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_source
	return p
}

func (*Table_sourceContext) IsTable_sourceContext() {}

func NewTable_sourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_sourceContext {
	var p = new(Table_sourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_source

	return p
}

func (s *Table_sourceContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_sourceContext) CopyFrom(ctx *Table_sourceContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Table_sourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_sourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Cross_joinContext struct {
	*Table_sourceContext
	left  ITable_sourceContext
	op    antlr.Token
	right ITable_sourceContext
}

func NewCross_joinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Cross_joinContext {
	var p = new(Cross_joinContext)

	p.Table_sourceContext = NewEmptyTable_sourceContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_sourceContext))

	return p
}

func (s *Cross_joinContext) GetOp() antlr.Token { return s.op }

func (s *Cross_joinContext) SetOp(v antlr.Token) { s.op = v }

func (s *Cross_joinContext) GetLeft() ITable_sourceContext { return s.left }

func (s *Cross_joinContext) GetRight() ITable_sourceContext { return s.right }

func (s *Cross_joinContext) SetLeft(v ITable_sourceContext) { s.left = v }

func (s *Cross_joinContext) SetRight(v ITable_sourceContext) { s.right = v }

func (s *Cross_joinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cross_joinContext) JOIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserJOIN, 0)
}

func (s *Cross_joinContext) AllTable_source() []ITable_sourceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem())
	var tst = make([]ITable_sourceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_sourceContext)
		}
	}

	return tst
}

func (s *Cross_joinContext) Table_source(i int) ITable_sourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_sourceContext)
}

func (s *Cross_joinContext) CROSS() antlr.TerminalNode {
	return s.GetToken(tsqlParserCROSS, 0)
}

func (s *Cross_joinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCross_join(s)
	}
}

func (s *Cross_joinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCross_join(s)
	}
}

type Table_source_item_joinContext struct {
	*Table_sourceContext
}

func NewTable_source_item_joinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Table_source_item_joinContext {
	var p = new(Table_source_item_joinContext)

	p.Table_sourceContext = NewEmptyTable_sourceContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_sourceContext))

	return p
}

func (s *Table_source_item_joinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_source_item_joinContext) Table_source_item() ITable_source_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_source_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_source_itemContext)
}

func (s *Table_source_item_joinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_source_item_join(s)
	}
}

func (s *Table_source_item_joinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_source_item_join(s)
	}
}

type Standard_joinContext struct {
	*Table_sourceContext
	left  ITable_sourceContext
	right ITable_sourceContext
}

func NewStandard_joinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Standard_joinContext {
	var p = new(Standard_joinContext)

	p.Table_sourceContext = NewEmptyTable_sourceContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_sourceContext))

	return p
}

func (s *Standard_joinContext) GetLeft() ITable_sourceContext { return s.left }

func (s *Standard_joinContext) GetRight() ITable_sourceContext { return s.right }

func (s *Standard_joinContext) SetLeft(v ITable_sourceContext) { s.left = v }

func (s *Standard_joinContext) SetRight(v ITable_sourceContext) { s.right = v }

func (s *Standard_joinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Standard_joinContext) Join_type() IJoin_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoin_typeContext)
}

func (s *Standard_joinContext) JOIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserJOIN, 0)
}

func (s *Standard_joinContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Standard_joinContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Standard_joinContext) AllTable_source() []ITable_sourceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem())
	var tst = make([]ITable_sourceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_sourceContext)
		}
	}

	return tst
}

func (s *Standard_joinContext) Table_source(i int) ITable_sourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_sourceContext)
}

func (s *Standard_joinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterStandard_join(s)
	}
}

func (s *Standard_joinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitStandard_join(s)
	}
}

type Apply_joinContext struct {
	*Table_sourceContext
	left  ITable_sourceContext
	op    antlr.Token
	right ITable_sourceContext
}

func NewApply_joinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Apply_joinContext {
	var p = new(Apply_joinContext)

	p.Table_sourceContext = NewEmptyTable_sourceContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_sourceContext))

	return p
}

func (s *Apply_joinContext) GetOp() antlr.Token { return s.op }

func (s *Apply_joinContext) SetOp(v antlr.Token) { s.op = v }

func (s *Apply_joinContext) GetLeft() ITable_sourceContext { return s.left }

func (s *Apply_joinContext) GetRight() ITable_sourceContext { return s.right }

func (s *Apply_joinContext) SetLeft(v ITable_sourceContext) { s.left = v }

func (s *Apply_joinContext) SetRight(v ITable_sourceContext) { s.right = v }

func (s *Apply_joinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Apply_joinContext) APPLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserAPPLY, 0)
}

func (s *Apply_joinContext) AllTable_source() []ITable_sourceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem())
	var tst = make([]ITable_sourceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_sourceContext)
		}
	}

	return tst
}

func (s *Apply_joinContext) Table_source(i int) ITable_sourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_sourceContext)
}

func (s *Apply_joinContext) CROSS() antlr.TerminalNode {
	return s.GetToken(tsqlParserCROSS, 0)
}

func (s *Apply_joinContext) OUTER() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUTER, 0)
}

func (s *Apply_joinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterApply_join(s)
	}
}

func (s *Apply_joinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitApply_join(s)
	}
}

type Bracket_table_sourceContext struct {
	*Table_sourceContext
}

func NewBracket_table_sourceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Bracket_table_sourceContext {
	var p = new(Bracket_table_sourceContext)

	p.Table_sourceContext = NewEmptyTable_sourceContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_sourceContext))

	return p
}

func (s *Bracket_table_sourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bracket_table_sourceContext) Table_source() ITable_sourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourceContext)
}

func (s *Bracket_table_sourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBracket_table_source(s)
	}
}

func (s *Bracket_table_sourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBracket_table_source(s)
	}
}

func (p *tsqlParser) Table_source() (localctx ITable_sourceContext) {
	return p.table_source(0)
}

func (p *tsqlParser) table_source(_p int) (localctx ITable_sourceContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewTable_sourceContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITable_sourceContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 224
	p.EnterRecursionRule(localctx, 224, tsqlParserRULE_table_source, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2383)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 356, p.GetParserRuleContext()) {
	case 1:
		localctx = NewBracket_table_sourceContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(2378)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2379)
			p.table_source(0)
		}
		{
			p.SetState(2380)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 2:
		localctx = NewTable_source_item_joinContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(2382)
			p.Table_source_item()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2402)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 358, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2400)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 357, p.GetParserRuleContext()) {
			case 1:
				localctx = NewCross_joinContext(p, NewTable_sourceContext(p, _parentctx, _parentState))
				localctx.(*Cross_joinContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, tsqlParserRULE_table_source)
				p.SetState(2385)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(2386)

					var _m = p.Match(tsqlParserCROSS)

					localctx.(*Cross_joinContext).op = _m
				}
				{
					p.SetState(2387)
					p.Match(tsqlParserJOIN)
				}
				{
					p.SetState(2388)

					var _x = p.table_source(4)

					localctx.(*Cross_joinContext).right = _x
				}

			case 2:
				localctx = NewApply_joinContext(p, NewTable_sourceContext(p, _parentctx, _parentState))
				localctx.(*Apply_joinContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, tsqlParserRULE_table_source)
				p.SetState(2389)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2390)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Apply_joinContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == tsqlParserCROSS || _la == tsqlParserOUTER) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Apply_joinContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(2391)
					p.Match(tsqlParserAPPLY)
				}
				{
					p.SetState(2392)

					var _x = p.table_source(3)

					localctx.(*Apply_joinContext).right = _x
				}

			case 3:
				localctx = NewStandard_joinContext(p, NewTable_sourceContext(p, _parentctx, _parentState))
				localctx.(*Standard_joinContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, tsqlParserRULE_table_source)
				p.SetState(2393)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(2394)
					p.Join_type()
				}
				{
					p.SetState(2395)
					p.Match(tsqlParserJOIN)
				}
				{
					p.SetState(2396)

					var _x = p.table_source(0)

					localctx.(*Standard_joinContext).right = _x
				}
				{
					p.SetState(2397)
					p.Match(tsqlParserON)
				}
				{
					p.SetState(2398)
					p.search_condition(0)
				}

			}

		}
		p.SetState(2404)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 358, p.GetParserRuleContext())
	}

	return localctx
}

// ITable_source_itemContext is an interface to support dynamic dispatch.
type ITable_source_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_source_itemContext differentiates from other interfaces.
	IsTable_source_itemContext()
}

type Table_source_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_source_itemContext() *Table_source_itemContext {
	var p = new(Table_source_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_source_item
	return p
}

func (*Table_source_itemContext) IsTable_source_itemContext() {}

func NewTable_source_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_source_itemContext {
	var p = new(Table_source_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_source_item

	return p
}

func (s *Table_source_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_source_itemContext) CopyFrom(ctx *Table_source_itemContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Table_source_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_source_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Table_source_item_simpleContext struct {
	*Table_source_itemContext
}

func NewTable_source_item_simpleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Table_source_item_simpleContext {
	var p = new(Table_source_item_simpleContext)

	p.Table_source_itemContext = NewEmptyTable_source_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_source_itemContext))

	return p
}

func (s *Table_source_item_simpleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_source_item_simpleContext) Rowset_function() IRowset_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowset_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowset_functionContext)
}

func (s *Table_source_item_simpleContext) Table_alias() ITable_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *Table_source_item_simpleContext) Change_table() IChange_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChange_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChange_tableContext)
}

func (s *Table_source_item_simpleContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Table_source_item_simpleContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Table_source_item_simpleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_source_item_simple(s)
	}
}

func (s *Table_source_item_simpleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_source_item_simple(s)
	}
}

type Table_source_item_complexContext struct {
	*Table_source_itemContext
}

func NewTable_source_item_complexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Table_source_item_complexContext {
	var p = new(Table_source_item_complexContext)

	p.Table_source_itemContext = NewEmptyTable_source_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_source_itemContext))

	return p
}

func (s *Table_source_item_complexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_source_item_complexContext) Derived_table() IDerived_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDerived_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDerived_tableContext)
}

func (s *Table_source_item_complexContext) Table_alias() ITable_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *Table_source_item_complexContext) Column_alias_list() IColumn_alias_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_alias_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_alias_listContext)
}

func (s *Table_source_item_complexContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Table_source_item_complexContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Table_source_item_complexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_source_item_complex(s)
	}
}

func (s *Table_source_item_complexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_source_item_complex(s)
	}
}

type Table_source_item_nameContext struct {
	*Table_source_itemContext
}

func NewTable_source_item_nameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Table_source_item_nameContext {
	var p = new(Table_source_item_nameContext)

	p.Table_source_itemContext = NewEmptyTable_source_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_source_itemContext))

	return p
}

func (s *Table_source_item_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_source_item_nameContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Table_source_item_nameContext) Table_alias() ITable_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *Table_source_item_nameContext) With_table_hints() IWith_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_table_hintsContext)
}

func (s *Table_source_item_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_source_item_name(s)
	}
}

func (s *Table_source_item_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_source_item_name(s)
	}
}

func (p *tsqlParser) Table_source_item() (localctx ITable_source_itemContext) {
	localctx = NewTable_source_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, tsqlParserRULE_table_source_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2444)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 369, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTable_source_item_nameContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2405)
			p.Table_name()
		}
		p.SetState(2407)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 359, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2406)
				p.Table_alias()
			}

		}
		p.SetState(2410)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 360, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2409)
				p.With_table_hints()
			}

		}

	case 2:
		localctx = NewTable_source_item_simpleContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2412)
			p.Rowset_function()
		}
		p.SetState(2414)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 361, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2413)
				p.Table_alias()
			}

		}

	case 3:
		localctx = NewTable_source_item_complexContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2416)
			p.Derived_table()
		}
		p.SetState(2421)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 363, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2417)
				p.Table_alias()
			}
			p.SetState(2419)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 362, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(2418)
					p.Column_alias_list()
				}

			}

		}

	case 4:
		localctx = NewTable_source_item_simpleContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2423)
			p.Change_table()
		}
		p.SetState(2425)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 364, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2424)
				p.Table_alias()
			}

		}

	case 5:
		localctx = NewTable_source_item_simpleContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2427)
			p.Function_call()
		}
		p.SetState(2429)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 365, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2428)
				p.Table_alias()
			}

		}

	case 6:
		localctx = NewTable_source_item_simpleContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2431)
			p.Match(tsqlParserLOCAL_ID)
		}
		p.SetState(2433)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 366, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2432)
				p.Table_alias()
			}

		}

	case 7:
		localctx = NewTable_source_item_complexContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2435)
			p.Match(tsqlParserLOCAL_ID)
		}
		{
			p.SetState(2436)
			p.Match(tsqlParserDOT)
		}
		{
			p.SetState(2437)
			p.Function_call()
		}
		p.SetState(2442)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 368, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2438)
				p.Table_alias()
			}
			p.SetState(2440)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 367, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(2439)
					p.Column_alias_list()
				}

			}

		}

	}

	return localctx
}

// ITable_aliasContext is an interface to support dynamic dispatch.
type ITable_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_aliasContext differentiates from other interfaces.
	IsTable_aliasContext()
}

type Table_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_aliasContext() *Table_aliasContext {
	var p = new(Table_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_alias
	return p
}

func (*Table_aliasContext) IsTable_aliasContext() {}

func NewTable_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_aliasContext {
	var p = new(Table_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_alias

	return p
}

func (s *Table_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_aliasContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Table_aliasContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Table_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_alias(s)
	}
}

func (s *Table_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_alias(s)
	}
}

func (p *tsqlParser) Table_alias() (localctx ITable_aliasContext) {
	localctx = NewTable_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, tsqlParserRULE_table_alias)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2447)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserAS {
		{
			p.SetState(2446)
			p.Match(tsqlParserAS)
		}

	}
	{
		p.SetState(2449)
		p.R_id()
	}

	return localctx
}

// IChange_tableContext is an interface to support dynamic dispatch.
type IChange_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChange_tableContext differentiates from other interfaces.
	IsChange_tableContext()
}

type Change_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChange_tableContext() *Change_tableContext {
	var p = new(Change_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_change_table
	return p
}

func (*Change_tableContext) IsChange_tableContext() {}

func NewChange_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Change_tableContext {
	var p = new(Change_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_change_table

	return p
}

func (s *Change_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Change_tableContext) CHANGETABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHANGETABLE, 0)
}

func (s *Change_tableContext) CHANGES() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHANGES, 0)
}

func (s *Change_tableContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Change_tableContext) NULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserNULL, 0)
}

func (s *Change_tableContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Change_tableContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Change_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Change_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Change_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterChange_table(s)
	}
}

func (s *Change_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitChange_table(s)
	}
}

func (p *tsqlParser) Change_table() (localctx IChange_tableContext) {
	localctx = NewChange_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, tsqlParserRULE_change_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2451)
		p.Match(tsqlParserCHANGETABLE)
	}
	{
		p.SetState(2452)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2453)
		p.Match(tsqlParserCHANGES)
	}
	{
		p.SetState(2454)
		p.Table_name()
	}
	{
		p.SetState(2455)
		p.Match(tsqlParserCOMMA)
	}
	{
		p.SetState(2456)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserNULL || _la == tsqlParserLOCAL_ID || _la == tsqlParserDECIMAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(2457)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IJoin_typeContext is an interface to support dynamic dispatch.
type IJoin_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetJoin_hint returns the join_hint token.
	GetJoin_hint() antlr.Token

	// SetJoin_hint sets the join_hint token.
	SetJoin_hint(antlr.Token)

	// IsJoin_typeContext differentiates from other interfaces.
	IsJoin_typeContext()
}

type Join_typeContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	join_hint antlr.Token
}

func NewEmptyJoin_typeContext() *Join_typeContext {
	var p = new(Join_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_join_type
	return p
}

func (*Join_typeContext) IsJoin_typeContext() {}

func NewJoin_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_typeContext {
	var p = new(Join_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_join_type

	return p
}

func (s *Join_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_typeContext) GetJoin_hint() antlr.Token { return s.join_hint }

func (s *Join_typeContext) SetJoin_hint(v antlr.Token) { s.join_hint = v }

func (s *Join_typeContext) LEFT() antlr.TerminalNode {
	return s.GetToken(tsqlParserLEFT, 0)
}

func (s *Join_typeContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(tsqlParserRIGHT, 0)
}

func (s *Join_typeContext) FULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserFULL, 0)
}

func (s *Join_typeContext) INNER() antlr.TerminalNode {
	return s.GetToken(tsqlParserINNER, 0)
}

func (s *Join_typeContext) OUTER() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUTER, 0)
}

func (s *Join_typeContext) LOOP() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOOP, 0)
}

func (s *Join_typeContext) HASH() antlr.TerminalNode {
	return s.GetToken(tsqlParserHASH, 0)
}

func (s *Join_typeContext) MERGE() antlr.TerminalNode {
	return s.GetToken(tsqlParserMERGE, 0)
}

func (s *Join_typeContext) REMOTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserREMOTE, 0)
}

func (s *Join_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterJoin_type(s)
	}
}

func (s *Join_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitJoin_type(s)
	}
}

func (p *tsqlParser) Join_type() (localctx IJoin_typeContext) {
	localctx = NewJoin_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, tsqlParserRULE_join_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2466)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserINNER, tsqlParserJOIN, tsqlParserMERGE, tsqlParserHASH, tsqlParserLOOP, tsqlParserREMOTE:
		p.SetState(2460)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserINNER {
			{
				p.SetState(2459)
				p.Match(tsqlParserINNER)
			}

		}

	case tsqlParserFULL, tsqlParserLEFT, tsqlParserRIGHT:
		{
			p.SetState(2462)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserFULL || _la == tsqlParserLEFT || _la == tsqlParserRIGHT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(2464)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserOUTER {
			{
				p.SetState(2463)
				p.Match(tsqlParserOUTER)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(2469)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserMERGE || _la == tsqlParserHASH || _la == tsqlParserLOOP || _la == tsqlParserREMOTE {
		{
			p.SetState(2468)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Join_typeContext).join_hint = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserMERGE || _la == tsqlParserHASH || _la == tsqlParserLOOP || _la == tsqlParserREMOTE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Join_typeContext).join_hint = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// ITable_name_with_hintContext is an interface to support dynamic dispatch.
type ITable_name_with_hintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_name_with_hintContext differentiates from other interfaces.
	IsTable_name_with_hintContext()
}

type Table_name_with_hintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_name_with_hintContext() *Table_name_with_hintContext {
	var p = new(Table_name_with_hintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_name_with_hint
	return p
}

func (*Table_name_with_hintContext) IsTable_name_with_hintContext() {}

func NewTable_name_with_hintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_name_with_hintContext {
	var p = new(Table_name_with_hintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_name_with_hint

	return p
}

func (s *Table_name_with_hintContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_name_with_hintContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Table_name_with_hintContext) With_table_hints() IWith_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_table_hintsContext)
}

func (s *Table_name_with_hintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_name_with_hintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_name_with_hintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_name_with_hint(s)
	}
}

func (s *Table_name_with_hintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_name_with_hint(s)
	}
}

func (p *tsqlParser) Table_name_with_hint() (localctx ITable_name_with_hintContext) {
	localctx = NewTable_name_with_hintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, tsqlParserRULE_table_name_with_hint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2471)
		p.Table_name()
	}
	p.SetState(2473)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 375, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2472)
			p.With_table_hints()
		}

	}

	return localctx
}

// IRowset_functionContext is an interface to support dynamic dispatch.
type IRowset_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetProvider_name returns the provider_name token.
	GetProvider_name() antlr.Token

	// GetConnectionString returns the connectionString token.
	GetConnectionString() antlr.Token

	// GetSql returns the sql token.
	GetSql() antlr.Token

	// GetData_file returns the data_file token.
	GetData_file() antlr.Token

	// SetProvider_name sets the provider_name token.
	SetProvider_name(antlr.Token)

	// SetConnectionString sets the connectionString token.
	SetConnectionString(antlr.Token)

	// SetSql sets the sql token.
	SetSql(antlr.Token)

	// SetData_file sets the data_file token.
	SetData_file(antlr.Token)

	// IsRowset_functionContext differentiates from other interfaces.
	IsRowset_functionContext()
}

type Rowset_functionContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	provider_name    antlr.Token
	connectionString antlr.Token
	sql              antlr.Token
	data_file        antlr.Token
}

func NewEmptyRowset_functionContext() *Rowset_functionContext {
	var p = new(Rowset_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_rowset_function
	return p
}

func (*Rowset_functionContext) IsRowset_functionContext() {}

func NewRowset_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rowset_functionContext {
	var p = new(Rowset_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_rowset_function

	return p
}

func (s *Rowset_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Rowset_functionContext) GetProvider_name() antlr.Token { return s.provider_name }

func (s *Rowset_functionContext) GetConnectionString() antlr.Token { return s.connectionString }

func (s *Rowset_functionContext) GetSql() antlr.Token { return s.sql }

func (s *Rowset_functionContext) GetData_file() antlr.Token { return s.data_file }

func (s *Rowset_functionContext) SetProvider_name(v antlr.Token) { s.provider_name = v }

func (s *Rowset_functionContext) SetConnectionString(v antlr.Token) { s.connectionString = v }

func (s *Rowset_functionContext) SetSql(v antlr.Token) { s.sql = v }

func (s *Rowset_functionContext) SetData_file(v antlr.Token) { s.data_file = v }

func (s *Rowset_functionContext) OPENROWSET() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPENROWSET, 0)
}

func (s *Rowset_functionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(tsqlParserLR_BRACKET, 0)
}

func (s *Rowset_functionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserCOMMA)
}

func (s *Rowset_functionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserCOMMA, i)
}

func (s *Rowset_functionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(tsqlParserRR_BRACKET, 0)
}

func (s *Rowset_functionContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserSTRING)
}

func (s *Rowset_functionContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, i)
}

func (s *Rowset_functionContext) BULK() antlr.TerminalNode {
	return s.GetToken(tsqlParserBULK, 0)
}

func (s *Rowset_functionContext) AllBulk_option() []IBulk_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBulk_optionContext)(nil)).Elem())
	var tst = make([]IBulk_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBulk_optionContext)
		}
	}

	return tst
}

func (s *Rowset_functionContext) Bulk_option(i int) IBulk_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBulk_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBulk_optionContext)
}

func (s *Rowset_functionContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Rowset_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rowset_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rowset_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterRowset_function(s)
	}
}

func (s *Rowset_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitRowset_function(s)
	}
}

func (p *tsqlParser) Rowset_function() (localctx IRowset_functionContext) {
	localctx = NewRowset_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, tsqlParserRULE_rowset_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2501)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 378, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2475)
			p.Match(tsqlParserOPENROWSET)
		}
		{
			p.SetState(2476)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2477)

			var _m = p.Match(tsqlParserSTRING)

			localctx.(*Rowset_functionContext).provider_name = _m
		}
		{
			p.SetState(2478)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2479)

			var _m = p.Match(tsqlParserSTRING)

			localctx.(*Rowset_functionContext).connectionString = _m
		}
		{
			p.SetState(2480)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2481)

			var _m = p.Match(tsqlParserSTRING)

			localctx.(*Rowset_functionContext).sql = _m
		}
		{
			p.SetState(2482)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2483)
			p.Match(tsqlParserOPENROWSET)
		}
		{
			p.SetState(2484)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2485)
			p.Match(tsqlParserBULK)
		}
		{
			p.SetState(2486)

			var _m = p.Match(tsqlParserSTRING)

			localctx.(*Rowset_functionContext).data_file = _m
		}
		{
			p.SetState(2487)
			p.Match(tsqlParserCOMMA)
		}
		p.SetState(2497)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 377, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(2488)
				p.Bulk_option()
			}
			p.SetState(2493)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == tsqlParserCOMMA {
				{
					p.SetState(2489)
					p.Match(tsqlParserCOMMA)
				}
				{
					p.SetState(2490)
					p.Bulk_option()
				}

				p.SetState(2495)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		case 2:
			{
				p.SetState(2496)
				p.R_id()
			}

		}
		{
			p.SetState(2499)
			p.Match(tsqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IBulk_optionContext is an interface to support dynamic dispatch.
type IBulk_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBulk_option_value returns the bulk_option_value token.
	GetBulk_option_value() antlr.Token

	// SetBulk_option_value sets the bulk_option_value token.
	SetBulk_option_value(antlr.Token)

	// IsBulk_optionContext differentiates from other interfaces.
	IsBulk_optionContext()
}

type Bulk_optionContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	bulk_option_value antlr.Token
}

func NewEmptyBulk_optionContext() *Bulk_optionContext {
	var p = new(Bulk_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_bulk_option
	return p
}

func (*Bulk_optionContext) IsBulk_optionContext() {}

func NewBulk_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bulk_optionContext {
	var p = new(Bulk_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_bulk_option

	return p
}

func (s *Bulk_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Bulk_optionContext) GetBulk_option_value() antlr.Token { return s.bulk_option_value }

func (s *Bulk_optionContext) SetBulk_option_value(v antlr.Token) { s.bulk_option_value = v }

func (s *Bulk_optionContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Bulk_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Bulk_optionContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Bulk_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bulk_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bulk_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBulk_option(s)
	}
}

func (s *Bulk_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBulk_option(s)
	}
}

func (p *tsqlParser) Bulk_option() (localctx IBulk_optionContext) {
	localctx = NewBulk_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, tsqlParserRULE_bulk_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2503)
		p.R_id()
	}
	{
		p.SetState(2504)
		p.Match(tsqlParserEQUAL)
	}
	{
		p.SetState(2505)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Bulk_optionContext).bulk_option_value = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserDECIMAL || _la == tsqlParserSTRING) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Bulk_optionContext).bulk_option_value = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDerived_tableContext is an interface to support dynamic dispatch.
type IDerived_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDerived_tableContext differentiates from other interfaces.
	IsDerived_tableContext()
}

type Derived_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDerived_tableContext() *Derived_tableContext {
	var p = new(Derived_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_derived_table
	return p
}

func (*Derived_tableContext) IsDerived_tableContext() {}

func NewDerived_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Derived_tableContext {
	var p = new(Derived_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_derived_table

	return p
}

func (s *Derived_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Derived_tableContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *Derived_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Derived_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Derived_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDerived_table(s)
	}
}

func (s *Derived_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDerived_table(s)
	}
}

func (p *tsqlParser) Derived_table() (localctx IDerived_tableContext) {
	localctx = NewDerived_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, tsqlParserRULE_derived_table)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2512)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 379, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2507)
			p.Subquery()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2508)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2509)
			p.Subquery()
		}
		{
			p.SetState(2510)
			p.Match(tsqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IFunction_callContext is an interface to support dynamic dispatch.
type IFunction_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_callContext differentiates from other interfaces.
	IsFunction_callContext()
}

type Function_callContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_callContext() *Function_callContext {
	var p = new(Function_callContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_function_call
	return p
}

func (*Function_callContext) IsFunction_callContext() {}

func NewFunction_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_callContext {
	var p = new(Function_callContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_function_call

	return p
}

func (s *Function_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_callContext) CopyFrom(ctx *Function_callContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Function_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Standard_callContext struct {
	*Function_callContext
	style     IExpressionContext
	seed      antlr.Token
	increment antlr.Token
}

func NewStandard_callContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Standard_callContext {
	var p = new(Standard_callContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *Standard_callContext) GetSeed() antlr.Token { return s.seed }

func (s *Standard_callContext) GetIncrement() antlr.Token { return s.increment }

func (s *Standard_callContext) SetSeed(v antlr.Token) { s.seed = v }

func (s *Standard_callContext) SetIncrement(v antlr.Token) { s.increment = v }

func (s *Standard_callContext) GetStyle() IExpressionContext { return s.style }

func (s *Standard_callContext) SetStyle(v IExpressionContext) { s.style = v }

func (s *Standard_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Standard_callContext) Scalar_function_name() IScalar_function_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScalar_function_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScalar_function_nameContext)
}

func (s *Standard_callContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Standard_callContext) BINARY_CHECKSUM() antlr.TerminalNode {
	return s.GetToken(tsqlParserBINARY_CHECKSUM, 0)
}

func (s *Standard_callContext) CONVERT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONVERT, 0)
}

func (s *Standard_callContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Standard_callContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Standard_callContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Standard_callContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOALESCE, 0)
}

func (s *Standard_callContext) DATEADD() antlr.TerminalNode {
	return s.GetToken(tsqlParserDATEADD, 0)
}

func (s *Standard_callContext) ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserID, 0)
}

func (s *Standard_callContext) DATEDIFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserDATEDIFF, 0)
}

func (s *Standard_callContext) DATENAME() antlr.TerminalNode {
	return s.GetToken(tsqlParserDATENAME, 0)
}

func (s *Standard_callContext) DATEPART() antlr.TerminalNode {
	return s.GetToken(tsqlParserDATEPART, 0)
}

func (s *Standard_callContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(tsqlParserIDENTITY, 0)
}

func (s *Standard_callContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserDECIMAL)
}

func (s *Standard_callContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, i)
}

func (s *Standard_callContext) IIF() antlr.TerminalNode {
	return s.GetToken(tsqlParserIIF, 0)
}

func (s *Standard_callContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Standard_callContext) NULLIF() antlr.TerminalNode {
	return s.GetToken(tsqlParserNULLIF, 0)
}

func (s *Standard_callContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterStandard_call(s)
	}
}

func (s *Standard_callContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitStandard_call(s)
	}
}

type Aggregate_callContext struct {
	*Function_callContext
}

func NewAggregate_callContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Aggregate_callContext {
	var p = new(Aggregate_callContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *Aggregate_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aggregate_callContext) Aggregate_windowed_function() IAggregate_windowed_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAggregate_windowed_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAggregate_windowed_functionContext)
}

func (s *Aggregate_callContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterAggregate_call(s)
	}
}

func (s *Aggregate_callContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitAggregate_call(s)
	}
}

type Nvf_callContext struct {
	*Function_callContext
}

func NewNvf_callContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Nvf_callContext {
	var p = new(Nvf_callContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *Nvf_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Nvf_callContext) Next_value_for_function() INext_value_for_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INext_value_for_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INext_value_for_functionContext)
}

func (s *Nvf_callContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterNvf_call(s)
	}
}

func (s *Nvf_callContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitNvf_call(s)
	}
}

type Rank_callContext struct {
	*Function_callContext
}

func NewRank_callContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Rank_callContext {
	var p = new(Rank_callContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *Rank_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rank_callContext) Ranking_windowed_function() IRanking_windowed_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRanking_windowed_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRanking_windowed_functionContext)
}

func (s *Rank_callContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterRank_call(s)
	}
}

func (s *Rank_callContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitRank_call(s)
	}
}

type Simple_callContext struct {
	*Function_callContext
}

func NewSimple_callContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Simple_callContext {
	var p = new(Simple_callContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *Simple_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_callContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECKSUM, 0)
}

func (s *Simple_callContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURRENT_TIMESTAMP, 0)
}

func (s *Simple_callContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURRENT_USER, 0)
}

func (s *Simple_callContext) MIN_ACTIVE_ROWVERSION() antlr.TerminalNode {
	return s.GetToken(tsqlParserMIN_ACTIVE_ROWVERSION, 0)
}

func (s *Simple_callContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(tsqlParserSESSION_USER, 0)
}

func (s *Simple_callContext) SYSTEM_USER() antlr.TerminalNode {
	return s.GetToken(tsqlParserSYSTEM_USER, 0)
}

func (s *Simple_callContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSimple_call(s)
	}
}

func (s *Simple_callContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSimple_call(s)
	}
}

type Cast_callContext struct {
	*Function_callContext
	alias IData_typeContext
}

func NewCast_callContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Cast_callContext {
	var p = new(Cast_callContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *Cast_callContext) GetAlias() IData_typeContext { return s.alias }

func (s *Cast_callContext) SetAlias(v IData_typeContext) { s.alias = v }

func (s *Cast_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cast_callContext) CAST() antlr.TerminalNode {
	return s.GetToken(tsqlParserCAST, 0)
}

func (s *Cast_callContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Cast_callContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Cast_callContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Cast_callContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCast_call(s)
	}
}

func (s *Cast_callContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCast_call(s)
	}
}

func (p *tsqlParser) Function_call() (localctx IFunction_callContext) {
	localctx = NewFunction_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, tsqlParserRULE_function_call)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2621)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 384, p.GetParserRuleContext()) {
	case 1:
		localctx = NewRank_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2514)
			p.Ranking_windowed_function()
		}

	case 2:
		localctx = NewAggregate_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2515)
			p.Aggregate_windowed_function()
		}

	case 3:
		localctx = NewStandard_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2516)
			p.Scalar_function_name()
		}
		{
			p.SetState(2517)
			p.Match(tsqlParserLR_BRACKET)
		}
		p.SetState(2519)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-18)&-(0x1f+1)) == 0 && ((1<<uint((_la-18)))&((1<<(tsqlParserCASE-18))|(1<<(tsqlParserCOALESCE-18))|(1<<(tsqlParserCONVERT-18))|(1<<(tsqlParserCURRENT_TIMESTAMP-18))|(1<<(tsqlParserCURRENT_USER-18))|(1<<(tsqlParserDEFAULT-18)))) != 0) || (((_la-72)&-(0x1f+1)) == 0 && ((1<<uint((_la-72)))&((1<<(tsqlParserFORCESEEK-72))|(1<<(tsqlParserIDENTITY-72))|(1<<(tsqlParserIIF-72))|(1<<(tsqlParserLEFT-72)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(tsqlParserNEXT-105))|(1<<(tsqlParserNULL-105))|(1<<(tsqlParserNULLIF-105))|(1<<(tsqlParserOVER-105)))) != 0) || (((_la-147)&-(0x1f+1)) == 0 && ((1<<uint((_la-147)))&((1<<(tsqlParserRIGHT-147))|(1<<(tsqlParserSESSION_USER-147))|(1<<(tsqlParserSYSTEM_USER-147)))) != 0) || (((_la-196)&-(0x1f+1)) == 0 && ((1<<uint((_la-196)))&((1<<(tsqlParserABSOLUTE-196))|(1<<(tsqlParserAPPLY-196))|(1<<(tsqlParserAUTO-196))|(1<<(tsqlParserAVG-196))|(1<<(tsqlParserBASE64-196))|(1<<(tsqlParserBINARY_CHECKSUM-196))|(1<<(tsqlParserCALLER-196))|(1<<(tsqlParserCAST-196))|(1<<(tsqlParserCATCH-196))|(1<<(tsqlParserCHECKSUM-196))|(1<<(tsqlParserCHECKSUM_AGG-196))|(1<<(tsqlParserCOMMITTED-196))|(1<<(tsqlParserCONCAT-196)))) != 0) || (((_la-228)&-(0x1f+1)) == 0 && ((1<<uint((_la-228)))&((1<<(tsqlParserCONTROL-228))|(1<<(tsqlParserCOOKIE-228))|(1<<(tsqlParserCOUNT-228))|(1<<(tsqlParserCOUNT_BIG-228))|(1<<(tsqlParserDATEADD-228))|(1<<(tsqlParserDATEDIFF-228))|(1<<(tsqlParserDATENAME-228))|(1<<(tsqlParserDATEPART-228))|(1<<(tsqlParserDELAY-228))|(1<<(tsqlParserDELETED-228))|(1<<(tsqlParserDENSE_RANK-228))|(1<<(tsqlParserDISABLE-228))|(1<<(tsqlParserDYNAMIC-228))|(1<<(tsqlParserENCRYPTION-228))|(1<<(tsqlParserEXPAND-228))|(1<<(tsqlParserFAST-228))|(1<<(tsqlParserFAST_FORWARD-228)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(tsqlParserFIRST-262))|(1<<(tsqlParserFOLLOWING-262))|(1<<(tsqlParserFORCE-262))|(1<<(tsqlParserFORCED-262))|(1<<(tsqlParserFORWARD_ONLY-262))|(1<<(tsqlParserFULLSCAN-262))|(1<<(tsqlParserGLOBAL-262))|(1<<(tsqlParserGO-262))|(1<<(tsqlParserGROUPING-262))|(1<<(tsqlParserGROUPING_ID-262))|(1<<(tsqlParserHASH-262))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-262))|(1<<(tsqlParserIMPERSONATE-262))|(1<<(tsqlParserINSENSITIVE-262))|(1<<(tsqlParserINSERTED-262))|(1<<(tsqlParserISOLATION-262))|(1<<(tsqlParserKEEP-262))|(1<<(tsqlParserKEEPFIXED-262))|(1<<(tsqlParserKEYSET-262))|(1<<(tsqlParserLAST-262))|(1<<(tsqlParserLEVEL-262))|(1<<(tsqlParserLOCAL-262))|(1<<(tsqlParserLOCK_ESCALATION-262))|(1<<(tsqlParserLOGIN-262))|(1<<(tsqlParserLOOP-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(tsqlParserMARK-294))|(1<<(tsqlParserMAX-294))|(1<<(tsqlParserMAXDOP-294))|(1<<(tsqlParserMAXRECURSION-294))|(1<<(tsqlParserMIN-294))|(1<<(tsqlParserMIN_ACTIVE_ROWVERSION-294))|(1<<(tsqlParserMODIFY-294))|(1<<(tsqlParserNAME-294))|(1<<(tsqlParserNOCOUNT-294))|(1<<(tsqlParserNOEXPAND-294))|(1<<(tsqlParserNORECOMPUTE-294))|(1<<(tsqlParserNTILE-294))|(1<<(tsqlParserNUMBER-294))|(1<<(tsqlParserOFFSET-294))|(1<<(tsqlParserONLINE-294))|(1<<(tsqlParserONLY-294))|(1<<(tsqlParserOPTIMISTIC-294))|(1<<(tsqlParserOPTIMIZE-294))|(1<<(tsqlParserOUT-294))|(1<<(tsqlParserOUTPUT-294)))) != 0) || (((_la-326)&-(0x1f+1)) == 0 && ((1<<uint((_la-326)))&((1<<(tsqlParserOWNER-326))|(1<<(tsqlParserPARAMETERIZATION-326))|(1<<(tsqlParserPARTITION-326))|(1<<(tsqlParserPATH-326))|(1<<(tsqlParserPRECEDING-326))|(1<<(tsqlParserPRIOR-326))|(1<<(tsqlParserPRIVILEGES-326))|(1<<(tsqlParserRANGE-326))|(1<<(tsqlParserRANK-326))|(1<<(tsqlParserREADONLY-326))|(1<<(tsqlParserREAD_ONLY-326))|(1<<(tsqlParserRECOMPILE-326))|(1<<(tsqlParserRELATIVE-326))|(1<<(tsqlParserREMOTE-326))|(1<<(tsqlParserREPEATABLE-326))|(1<<(tsqlParserROBUST-326))|(1<<(tsqlParserROOT-326))|(1<<(tsqlParserROW-326))|(1<<(tsqlParserROWGUID-326))|(1<<(tsqlParserROWS-326))|(1<<(tsqlParserROW_NUMBER-326))|(1<<(tsqlParserSAMPLE-326))|(1<<(tsqlParserSCHEMABINDING-326))|(1<<(tsqlParserSCROLL-326))|(1<<(tsqlParserSCROLL_LOCKS-326)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(tsqlParserSELF-359))|(1<<(tsqlParserSERIALIZABLE-359))|(1<<(tsqlParserSIMPLE-359))|(1<<(tsqlParserSIZE-359))|(1<<(tsqlParserSNAPSHOT-359))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-359))|(1<<(tsqlParserSTATIC-359))|(1<<(tsqlParserSTATS_STREAM-359))|(1<<(tsqlParserSTDEV-359))|(1<<(tsqlParserSTDEVP-359))|(1<<(tsqlParserSUM-359))|(1<<(tsqlParserTEXTIMAGE_ON-359))|(1<<(tsqlParserTHROW-359))|(1<<(tsqlParserTIES-359))|(1<<(tsqlParserTIME-359))|(1<<(tsqlParserTRY-359))|(1<<(tsqlParserTYPE-359))|(1<<(tsqlParserTYPE_WARNING-359))|(1<<(tsqlParserUNBOUNDED-359))|(1<<(tsqlParserUNCOMMITTED-359))|(1<<(tsqlParserUNKNOWN-359))|(1<<(tsqlParserUSING-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(tsqlParserVAR-391))|(1<<(tsqlParserVARP-391))|(1<<(tsqlParserVIEWS-391))|(1<<(tsqlParserVIEW_METADATA-391))|(1<<(tsqlParserWORK-391))|(1<<(tsqlParserXML-391))|(1<<(tsqlParserXMLNAMESPACES-391))|(1<<(tsqlParserDOUBLE_QUOTE_ID-391))|(1<<(tsqlParserSQUARE_BRACKET_ID-391))|(1<<(tsqlParserLOCAL_ID-391))|(1<<(tsqlParserDECIMAL-391))|(1<<(tsqlParserID-391))|(1<<(tsqlParserSTRING-391))|(1<<(tsqlParserBINARY-391))|(1<<(tsqlParserFLOAT-391))|(1<<(tsqlParserREAL-391)))) != 0) || (((_la-427)&-(0x1f+1)) == 0 && ((1<<uint((_la-427)))&((1<<(tsqlParserDOLLAR-427))|(1<<(tsqlParserLR_BRACKET-427))|(1<<(tsqlParserPLUS-427))|(1<<(tsqlParserMINUS-427))|(1<<(tsqlParserBIT_NOT-427)))) != 0) {
			{
				p.SetState(2518)
				p.Expression_list()
			}

		}
		{
			p.SetState(2521)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 4:
		localctx = NewNvf_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2523)
			p.Next_value_for_function()
		}

	case 5:
		localctx = NewStandard_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2524)
			p.Match(tsqlParserBINARY_CHECKSUM)
		}
		{
			p.SetState(2525)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2526)
			p.Match(tsqlParserSTAR)
		}
		{
			p.SetState(2527)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 6:
		localctx = NewCast_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2528)
			p.Match(tsqlParserCAST)
		}
		{
			p.SetState(2529)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2530)
			p.expression(0)
		}
		{
			p.SetState(2531)
			p.Match(tsqlParserAS)
		}
		{
			p.SetState(2532)

			var _x = p.Data_type()

			localctx.(*Cast_callContext).alias = _x
		}
		{
			p.SetState(2533)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 7:
		localctx = NewStandard_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2535)
			p.Match(tsqlParserCONVERT)
		}
		{
			p.SetState(2536)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2537)
			p.Data_type()
		}
		{
			p.SetState(2538)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2539)
			p.expression(0)
		}
		p.SetState(2542)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCOMMA {
			{
				p.SetState(2540)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2541)

				var _x = p.expression(0)

				localctx.(*Standard_callContext).style = _x
			}

		}
		{
			p.SetState(2544)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 8:
		localctx = NewSimple_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2546)
			p.Match(tsqlParserCHECKSUM)
		}
		{
			p.SetState(2547)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2548)
			p.Match(tsqlParserSTAR)
		}
		{
			p.SetState(2549)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 9:
		localctx = NewStandard_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2550)
			p.Match(tsqlParserCOALESCE)
		}
		{
			p.SetState(2551)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2552)
			p.Expression_list()
		}
		{
			p.SetState(2553)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 10:
		localctx = NewSimple_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2555)
			p.Match(tsqlParserCURRENT_TIMESTAMP)
		}

	case 11:
		localctx = NewSimple_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2556)
			p.Match(tsqlParserCURRENT_USER)
		}

	case 12:
		localctx = NewStandard_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2557)
			p.Match(tsqlParserDATEADD)
		}
		{
			p.SetState(2558)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2559)
			p.Match(tsqlParserID)
		}
		{
			p.SetState(2560)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2561)
			p.expression(0)
		}
		{
			p.SetState(2562)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2563)
			p.expression(0)
		}
		{
			p.SetState(2564)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 13:
		localctx = NewStandard_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2566)
			p.Match(tsqlParserDATEDIFF)
		}
		{
			p.SetState(2567)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2568)
			p.Match(tsqlParserID)
		}
		{
			p.SetState(2569)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2570)
			p.expression(0)
		}
		{
			p.SetState(2571)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2572)
			p.expression(0)
		}
		{
			p.SetState(2573)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 14:
		localctx = NewStandard_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2575)
			p.Match(tsqlParserDATENAME)
		}
		{
			p.SetState(2576)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2577)
			p.Match(tsqlParserID)
		}
		{
			p.SetState(2578)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2579)
			p.expression(0)
		}
		{
			p.SetState(2580)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 15:
		localctx = NewStandard_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2582)
			p.Match(tsqlParserDATEPART)
		}
		{
			p.SetState(2583)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2584)
			p.Match(tsqlParserID)
		}
		{
			p.SetState(2585)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2586)
			p.expression(0)
		}
		{
			p.SetState(2587)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 16:
		localctx = NewStandard_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2589)
			p.Match(tsqlParserIDENTITY)
		}
		{
			p.SetState(2590)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2591)
			p.Data_type()
		}
		p.SetState(2594)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 382, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2592)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2593)

				var _m = p.Match(tsqlParserDECIMAL)

				localctx.(*Standard_callContext).seed = _m
			}

		}
		p.SetState(2598)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCOMMA {
			{
				p.SetState(2596)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2597)

				var _m = p.Match(tsqlParserDECIMAL)

				localctx.(*Standard_callContext).increment = _m
			}

		}
		{
			p.SetState(2600)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 17:
		localctx = NewStandard_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(2602)
			p.Match(tsqlParserIIF)
		}
		{
			p.SetState(2603)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2604)
			p.search_condition(0)
		}
		{
			p.SetState(2605)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2606)
			p.expression(0)
		}
		{
			p.SetState(2607)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2608)
			p.expression(0)
		}
		{
			p.SetState(2609)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 18:
		localctx = NewSimple_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(2611)
			p.Match(tsqlParserMIN_ACTIVE_ROWVERSION)
		}

	case 19:
		localctx = NewStandard_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(2612)
			p.Match(tsqlParserNULLIF)
		}
		{
			p.SetState(2613)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2614)
			p.expression(0)
		}
		{
			p.SetState(2615)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2616)
			p.expression(0)
		}
		{
			p.SetState(2617)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 20:
		localctx = NewSimple_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(2619)
			p.Match(tsqlParserSESSION_USER)
		}

	case 21:
		localctx = NewSimple_callContext(p, localctx)
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(2620)
			p.Match(tsqlParserSYSTEM_USER)
		}

	}

	return localctx
}

// ISwitch_sectionContext is an interface to support dynamic dispatch.
type ISwitch_sectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWhenExpr returns the whenExpr rule contexts.
	GetWhenExpr() IExpressionContext

	// GetThenExpr returns the thenExpr rule contexts.
	GetThenExpr() IExpressionContext

	// SetWhenExpr sets the whenExpr rule contexts.
	SetWhenExpr(IExpressionContext)

	// SetThenExpr sets the thenExpr rule contexts.
	SetThenExpr(IExpressionContext)

	// IsSwitch_sectionContext differentiates from other interfaces.
	IsSwitch_sectionContext()
}

type Switch_sectionContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	whenExpr IExpressionContext
	thenExpr IExpressionContext
}

func NewEmptySwitch_sectionContext() *Switch_sectionContext {
	var p = new(Switch_sectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_switch_section
	return p
}

func (*Switch_sectionContext) IsSwitch_sectionContext() {}

func NewSwitch_sectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Switch_sectionContext {
	var p = new(Switch_sectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_switch_section

	return p
}

func (s *Switch_sectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Switch_sectionContext) GetWhenExpr() IExpressionContext { return s.whenExpr }

func (s *Switch_sectionContext) GetThenExpr() IExpressionContext { return s.thenExpr }

func (s *Switch_sectionContext) SetWhenExpr(v IExpressionContext) { s.whenExpr = v }

func (s *Switch_sectionContext) SetThenExpr(v IExpressionContext) { s.thenExpr = v }

func (s *Switch_sectionContext) WHEN() antlr.TerminalNode {
	return s.GetToken(tsqlParserWHEN, 0)
}

func (s *Switch_sectionContext) THEN() antlr.TerminalNode {
	return s.GetToken(tsqlParserTHEN, 0)
}

func (s *Switch_sectionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Switch_sectionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Switch_sectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Switch_sectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Switch_sectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSwitch_section(s)
	}
}

func (s *Switch_sectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSwitch_section(s)
	}
}

func (p *tsqlParser) Switch_section() (localctx ISwitch_sectionContext) {
	localctx = NewSwitch_sectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, tsqlParserRULE_switch_section)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2623)
		p.Match(tsqlParserWHEN)
	}
	{
		p.SetState(2624)

		var _x = p.expression(0)

		localctx.(*Switch_sectionContext).whenExpr = _x
	}
	{
		p.SetState(2625)
		p.Match(tsqlParserTHEN)
	}
	{
		p.SetState(2626)

		var _x = p.expression(0)

		localctx.(*Switch_sectionContext).thenExpr = _x
	}

	return localctx
}

// ISwitch_search_condition_sectionContext is an interface to support dynamic dispatch.
type ISwitch_search_condition_sectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWhenExpr returns the whenExpr rule contexts.
	GetWhenExpr() ISearch_conditionContext

	// GetThenExpr returns the thenExpr rule contexts.
	GetThenExpr() IExpressionContext

	// SetWhenExpr sets the whenExpr rule contexts.
	SetWhenExpr(ISearch_conditionContext)

	// SetThenExpr sets the thenExpr rule contexts.
	SetThenExpr(IExpressionContext)

	// IsSwitch_search_condition_sectionContext differentiates from other interfaces.
	IsSwitch_search_condition_sectionContext()
}

type Switch_search_condition_sectionContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	whenExpr ISearch_conditionContext
	thenExpr IExpressionContext
}

func NewEmptySwitch_search_condition_sectionContext() *Switch_search_condition_sectionContext {
	var p = new(Switch_search_condition_sectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_switch_search_condition_section
	return p
}

func (*Switch_search_condition_sectionContext) IsSwitch_search_condition_sectionContext() {}

func NewSwitch_search_condition_sectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Switch_search_condition_sectionContext {
	var p = new(Switch_search_condition_sectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_switch_search_condition_section

	return p
}

func (s *Switch_search_condition_sectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Switch_search_condition_sectionContext) GetWhenExpr() ISearch_conditionContext {
	return s.whenExpr
}

func (s *Switch_search_condition_sectionContext) GetThenExpr() IExpressionContext { return s.thenExpr }

func (s *Switch_search_condition_sectionContext) SetWhenExpr(v ISearch_conditionContext) {
	s.whenExpr = v
}

func (s *Switch_search_condition_sectionContext) SetThenExpr(v IExpressionContext) { s.thenExpr = v }

func (s *Switch_search_condition_sectionContext) WHEN() antlr.TerminalNode {
	return s.GetToken(tsqlParserWHEN, 0)
}

func (s *Switch_search_condition_sectionContext) THEN() antlr.TerminalNode {
	return s.GetToken(tsqlParserTHEN, 0)
}

func (s *Switch_search_condition_sectionContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Switch_search_condition_sectionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Switch_search_condition_sectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Switch_search_condition_sectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Switch_search_condition_sectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSwitch_search_condition_section(s)
	}
}

func (s *Switch_search_condition_sectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSwitch_search_condition_section(s)
	}
}

func (p *tsqlParser) Switch_search_condition_section() (localctx ISwitch_search_condition_sectionContext) {
	localctx = NewSwitch_search_condition_sectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, tsqlParserRULE_switch_search_condition_section)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2628)
		p.Match(tsqlParserWHEN)
	}
	{
		p.SetState(2629)

		var _x = p.search_condition(0)

		localctx.(*Switch_search_condition_sectionContext).whenExpr = _x
	}
	{
		p.SetState(2630)
		p.Match(tsqlParserTHEN)
	}
	{
		p.SetState(2631)

		var _x = p.expression(0)

		localctx.(*Switch_search_condition_sectionContext).thenExpr = _x
	}

	return localctx
}

// IWith_table_hintsContext is an interface to support dynamic dispatch.
type IWith_table_hintsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_table_hintsContext differentiates from other interfaces.
	IsWith_table_hintsContext()
}

type With_table_hintsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_table_hintsContext() *With_table_hintsContext {
	var p = new(With_table_hintsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_with_table_hints
	return p
}

func (*With_table_hintsContext) IsWith_table_hintsContext() {}

func NewWith_table_hintsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_table_hintsContext {
	var p = new(With_table_hintsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_with_table_hints

	return p
}

func (s *With_table_hintsContext) GetParser() antlr.Parser { return s.parser }

func (s *With_table_hintsContext) AllTable_hint() []ITable_hintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_hintContext)(nil)).Elem())
	var tst = make([]ITable_hintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_hintContext)
		}
	}

	return tst
}

func (s *With_table_hintsContext) Table_hint(i int) ITable_hintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_hintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_hintContext)
}

func (s *With_table_hintsContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *With_table_hintsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_table_hintsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_table_hintsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWith_table_hints(s)
	}
}

func (s *With_table_hintsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWith_table_hints(s)
	}
}

func (p *tsqlParser) With_table_hints() (localctx IWith_table_hintsContext) {
	localctx = NewWith_table_hintsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, tsqlParserRULE_with_table_hints)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2634)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH {
		{
			p.SetState(2633)
			p.Match(tsqlParserWITH)
		}

	}
	{
		p.SetState(2636)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2637)
		p.Table_hint()
	}
	p.SetState(2642)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(2638)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2639)
			p.Table_hint()
		}

		p.SetState(2644)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2645)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IInsert_with_table_hintsContext is an interface to support dynamic dispatch.
type IInsert_with_table_hintsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_with_table_hintsContext differentiates from other interfaces.
	IsInsert_with_table_hintsContext()
}

type Insert_with_table_hintsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_with_table_hintsContext() *Insert_with_table_hintsContext {
	var p = new(Insert_with_table_hintsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_insert_with_table_hints
	return p
}

func (*Insert_with_table_hintsContext) IsInsert_with_table_hintsContext() {}

func NewInsert_with_table_hintsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_with_table_hintsContext {
	var p = new(Insert_with_table_hintsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_insert_with_table_hints

	return p
}

func (s *Insert_with_table_hintsContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_with_table_hintsContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Insert_with_table_hintsContext) AllTable_hint() []ITable_hintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_hintContext)(nil)).Elem())
	var tst = make([]ITable_hintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_hintContext)
		}
	}

	return tst
}

func (s *Insert_with_table_hintsContext) Table_hint(i int) ITable_hintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_hintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_hintContext)
}

func (s *Insert_with_table_hintsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_with_table_hintsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_with_table_hintsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterInsert_with_table_hints(s)
	}
}

func (s *Insert_with_table_hintsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitInsert_with_table_hints(s)
	}
}

func (p *tsqlParser) Insert_with_table_hints() (localctx IInsert_with_table_hintsContext) {
	localctx = NewInsert_with_table_hintsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, tsqlParserRULE_insert_with_table_hints)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2647)
		p.Match(tsqlParserWITH)
	}
	{
		p.SetState(2648)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2649)
		p.Table_hint()
	}
	p.SetState(2654)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(2650)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2651)
			p.Table_hint()
		}

		p.SetState(2656)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2657)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// ITable_hintContext is an interface to support dynamic dispatch.
type ITable_hintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_hintContext differentiates from other interfaces.
	IsTable_hintContext()
}

type Table_hintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_hintContext() *Table_hintContext {
	var p = new(Table_hintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_hint
	return p
}

func (*Table_hintContext) IsTable_hintContext() {}

func NewTable_hintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_hintContext {
	var p = new(Table_hintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_hint

	return p
}

func (s *Table_hintContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_hintContext) NOEXPAND() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOEXPAND, 0)
}

func (s *Table_hintContext) INDEX() antlr.TerminalNode {
	return s.GetToken(tsqlParserINDEX, 0)
}

func (s *Table_hintContext) AllIndex_value() []IIndex_valueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_valueContext)(nil)).Elem())
	var tst = make([]IIndex_valueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_valueContext)
		}
	}

	return tst
}

func (s *Table_hintContext) Index_value(i int) IIndex_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_valueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_valueContext)
}

func (s *Table_hintContext) FORCESEEK() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORCESEEK, 0)
}

func (s *Table_hintContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSERIALIZABLE, 0)
}

func (s *Table_hintContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserSNAPSHOT, 0)
}

func (s *Table_hintContext) SPATIAL_WINDOW_MAX_CELLS() antlr.TerminalNode {
	return s.GetToken(tsqlParserSPATIAL_WINDOW_MAX_CELLS, 0)
}

func (s *Table_hintContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Table_hintContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserID)
}

func (s *Table_hintContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserID, i)
}

func (s *Table_hintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_hintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_hintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_hint(s)
	}
}

func (s *Table_hintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_hint(s)
	}
}

func (p *tsqlParser) Table_hint() (localctx ITable_hintContext) {
	localctx = NewTable_hintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, tsqlParserRULE_table_hint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2660)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserNOEXPAND {
		{
			p.SetState(2659)
			p.Match(tsqlParserNOEXPAND)
		}

	}
	p.SetState(2700)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 392, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2662)
			p.Match(tsqlParserINDEX)
		}
		{
			p.SetState(2663)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2664)
			p.Index_value()
		}
		p.SetState(2669)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(2665)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2666)
				p.Index_value()
			}

			p.SetState(2671)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2672)
			p.Match(tsqlParserRR_BRACKET)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 392, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(2674)
			p.Match(tsqlParserINDEX)
		}
		{
			p.SetState(2675)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2676)
			p.Index_value()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 392, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(2677)
			p.Match(tsqlParserFORCESEEK)
		}
		p.SetState(2692)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserLR_BRACKET {
			{
				p.SetState(2678)
				p.Match(tsqlParserLR_BRACKET)
			}
			{
				p.SetState(2679)
				p.Index_value()
			}
			{
				p.SetState(2680)
				p.Match(tsqlParserLR_BRACKET)
			}
			{
				p.SetState(2681)
				p.Match(tsqlParserID)
			}
			p.SetState(2686)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == tsqlParserCOMMA {
				{
					p.SetState(2682)
					p.Match(tsqlParserCOMMA)
				}
				{
					p.SetState(2683)
					p.Match(tsqlParserID)
				}

				p.SetState(2688)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2689)
				p.Match(tsqlParserRR_BRACKET)
			}
			{
				p.SetState(2690)
				p.Match(tsqlParserRR_BRACKET)
			}

		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 392, p.GetParserRuleContext()) == 4 {
		{
			p.SetState(2694)
			p.Match(tsqlParserSERIALIZABLE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 392, p.GetParserRuleContext()) == 5 {
		{
			p.SetState(2695)
			p.Match(tsqlParserSNAPSHOT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 392, p.GetParserRuleContext()) == 6 {
		{
			p.SetState(2696)
			p.Match(tsqlParserSPATIAL_WINDOW_MAX_CELLS)
		}
		{
			p.SetState(2697)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2698)
			p.Match(tsqlParserDECIMAL)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 392, p.GetParserRuleContext()) == 7 {
		{
			p.SetState(2699)
			p.Match(tsqlParserID)
		}

	}

	return localctx
}

// IIndex_valueContext is an interface to support dynamic dispatch.
type IIndex_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_valueContext differentiates from other interfaces.
	IsIndex_valueContext()
}

type Index_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_valueContext() *Index_valueContext {
	var p = new(Index_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_index_value
	return p
}

func (*Index_valueContext) IsIndex_valueContext() {}

func NewIndex_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_valueContext {
	var p = new(Index_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_index_value

	return p
}

func (s *Index_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_valueContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Index_valueContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Index_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterIndex_value(s)
	}
}

func (s *Index_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitIndex_value(s)
	}
}

func (p *tsqlParser) Index_value() (localctx IIndex_valueContext) {
	localctx = NewIndex_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, tsqlParserRULE_index_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2704)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2702)
			p.R_id()
		}

	case tsqlParserDECIMAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2703)
			p.Match(tsqlParserDECIMAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IColumn_alias_listContext is an interface to support dynamic dispatch.
type IColumn_alias_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_alias_listContext differentiates from other interfaces.
	IsColumn_alias_listContext()
}

type Column_alias_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_alias_listContext() *Column_alias_listContext {
	var p = new(Column_alias_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_column_alias_list
	return p
}

func (*Column_alias_listContext) IsColumn_alias_listContext() {}

func NewColumn_alias_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_alias_listContext {
	var p = new(Column_alias_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_column_alias_list

	return p
}

func (s *Column_alias_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_alias_listContext) AllColumn_alias() []IColumn_aliasContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem())
	var tst = make([]IColumn_aliasContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_aliasContext)
		}
	}

	return tst
}

func (s *Column_alias_listContext) Column_alias(i int) IColumn_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_aliasContext)
}

func (s *Column_alias_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_alias_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_alias_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterColumn_alias_list(s)
	}
}

func (s *Column_alias_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitColumn_alias_list(s)
	}
}

func (p *tsqlParser) Column_alias_list() (localctx IColumn_alias_listContext) {
	localctx = NewColumn_alias_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, tsqlParserRULE_column_alias_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2706)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2707)
		p.Column_alias()
	}
	p.SetState(2712)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(2708)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2709)
			p.Column_alias()
		}

		p.SetState(2714)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2715)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IColumn_aliasContext is an interface to support dynamic dispatch.
type IColumn_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_aliasContext differentiates from other interfaces.
	IsColumn_aliasContext()
}

type Column_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_aliasContext() *Column_aliasContext {
	var p = new(Column_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_column_alias
	return p
}

func (*Column_aliasContext) IsColumn_aliasContext() {}

func NewColumn_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_aliasContext {
	var p = new(Column_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_column_alias

	return p
}

func (s *Column_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_aliasContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Column_aliasContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Column_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterColumn_alias(s)
	}
}

func (s *Column_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitColumn_alias(s)
	}
}

func (p *tsqlParser) Column_alias() (localctx IColumn_aliasContext) {
	localctx = NewColumn_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, tsqlParserRULE_column_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2719)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2717)
			p.R_id()
		}

	case tsqlParserSTRING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2718)
			p.Match(tsqlParserSTRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IA_starContext is an interface to support dynamic dispatch.
type IA_starContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsA_starContext differentiates from other interfaces.
	IsA_starContext()
}

type A_starContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyA_starContext() *A_starContext {
	var p = new(A_starContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_a_star
	return p
}

func (*A_starContext) IsA_starContext() {}

func NewA_starContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *A_starContext {
	var p = new(A_starContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_a_star

	return p
}

func (s *A_starContext) GetParser() antlr.Parser { return s.parser }
func (s *A_starContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *A_starContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *A_starContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterA_star(s)
	}
}

func (s *A_starContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitA_star(s)
	}
}

func (p *tsqlParser) A_star() (localctx IA_starContext) {
	localctx = NewA_starContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, tsqlParserRULE_a_star)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2721)
		p.Match(tsqlParserSTAR)
	}

	return localctx
}

// ITable_value_constructorContext is an interface to support dynamic dispatch.
type ITable_value_constructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_value_constructorContext differentiates from other interfaces.
	IsTable_value_constructorContext()
}

type Table_value_constructorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_value_constructorContext() *Table_value_constructorContext {
	var p = new(Table_value_constructorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_value_constructor
	return p
}

func (*Table_value_constructorContext) IsTable_value_constructorContext() {}

func NewTable_value_constructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_value_constructorContext {
	var p = new(Table_value_constructorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_value_constructor

	return p
}

func (s *Table_value_constructorContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_value_constructorContext) VALUES() antlr.TerminalNode {
	return s.GetToken(tsqlParserVALUES, 0)
}

func (s *Table_value_constructorContext) AllValue_list() []IValue_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValue_listContext)(nil)).Elem())
	var tst = make([]IValue_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValue_listContext)
		}
	}

	return tst
}

func (s *Table_value_constructorContext) Value_list(i int) IValue_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValue_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValue_listContext)
}

func (s *Table_value_constructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_value_constructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_value_constructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_value_constructor(s)
	}
}

func (s *Table_value_constructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_value_constructor(s)
	}
}

func (p *tsqlParser) Table_value_constructor() (localctx ITable_value_constructorContext) {
	localctx = NewTable_value_constructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, tsqlParserRULE_table_value_constructor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2723)
		p.Match(tsqlParserVALUES)
	}
	{
		p.SetState(2724)
		p.Value_list()
	}
	p.SetState(2729)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(2725)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2726)
			p.Value_list()
		}

		p.SetState(2731)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IExpression_listContext is an interface to support dynamic dispatch.
type IExpression_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_listContext differentiates from other interfaces.
	IsExpression_listContext()
}

type Expression_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_listContext() *Expression_listContext {
	var p = new(Expression_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_expression_list
	return p
}

func (*Expression_listContext) IsExpression_listContext() {}

func NewExpression_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_listContext {
	var p = new(Expression_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_expression_list

	return p
}

func (s *Expression_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_listContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Expression_listContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterExpression_list(s)
	}
}

func (s *Expression_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitExpression_list(s)
	}
}

func (p *tsqlParser) Expression_list() (localctx IExpression_listContext) {
	localctx = NewExpression_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, tsqlParserRULE_expression_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2732)
		p.expression(0)
	}
	p.SetState(2737)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(2733)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2734)
			p.expression(0)
		}

		p.SetState(2739)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IValue_listContext is an interface to support dynamic dispatch.
type IValue_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValue_listContext differentiates from other interfaces.
	IsValue_listContext()
}

type Value_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValue_listContext() *Value_listContext {
	var p = new(Value_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_value_list
	return p
}

func (*Value_listContext) IsValue_listContext() {}

func NewValue_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Value_listContext {
	var p = new(Value_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_value_list

	return p
}

func (s *Value_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Value_listContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Value_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Value_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Value_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterValue_list(s)
	}
}

func (s *Value_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitValue_list(s)
	}
}

func (p *tsqlParser) Value_list() (localctx IValue_listContext) {
	localctx = NewValue_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, tsqlParserRULE_value_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2740)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2741)
		p.Expression_list()
	}
	{
		p.SetState(2742)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// INext_value_forContext is an interface to support dynamic dispatch.
type INext_value_forContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNext_value_forContext differentiates from other interfaces.
	IsNext_value_forContext()
}

type Next_value_forContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNext_value_forContext() *Next_value_forContext {
	var p = new(Next_value_forContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_next_value_for
	return p
}

func (*Next_value_forContext) IsNext_value_forContext() {}

func NewNext_value_forContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Next_value_forContext {
	var p = new(Next_value_forContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_next_value_for

	return p
}

func (s *Next_value_forContext) GetParser() antlr.Parser { return s.parser }

func (s *Next_value_forContext) NEXT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNEXT, 0)
}

func (s *Next_value_forContext) VALUE() antlr.TerminalNode {
	return s.GetToken(tsqlParserVALUE, 0)
}

func (s *Next_value_forContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *Next_value_forContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Next_value_forContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Next_value_forContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterNext_value_for(s)
	}
}

func (s *Next_value_forContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitNext_value_for(s)
	}
}

func (p *tsqlParser) Next_value_for() (localctx INext_value_forContext) {
	localctx = NewNext_value_forContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, tsqlParserRULE_next_value_for)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2744)
		p.Match(tsqlParserNEXT)
	}
	{
		p.SetState(2745)
		p.Match(tsqlParserVALUE)
	}
	{
		p.SetState(2746)
		p.Match(tsqlParserFOR)
	}

	return localctx
}

// INext_value_for_functionContext is an interface to support dynamic dispatch.
type INext_value_for_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetArgs returns the args rule contexts.
	GetArgs() IFunc_proc_nameContext

	// SetArgs sets the args rule contexts.
	SetArgs(IFunc_proc_nameContext)

	// IsNext_value_for_functionContext differentiates from other interfaces.
	IsNext_value_for_functionContext()
}

type Next_value_for_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	args   IFunc_proc_nameContext
}

func NewEmptyNext_value_for_functionContext() *Next_value_for_functionContext {
	var p = new(Next_value_for_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_next_value_for_function
	return p
}

func (*Next_value_for_functionContext) IsNext_value_for_functionContext() {}

func NewNext_value_for_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Next_value_for_functionContext {
	var p = new(Next_value_for_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_next_value_for_function

	return p
}

func (s *Next_value_for_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Next_value_for_functionContext) GetArgs() IFunc_proc_nameContext { return s.args }

func (s *Next_value_for_functionContext) SetArgs(v IFunc_proc_nameContext) { s.args = v }

func (s *Next_value_for_functionContext) Next_value_for() INext_value_forContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INext_value_forContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INext_value_forContext)
}

func (s *Next_value_for_functionContext) Over_clause() IOver_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOver_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *Next_value_for_functionContext) Func_proc_name() IFunc_proc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_proc_nameContext)
}

func (s *Next_value_for_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Next_value_for_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Next_value_for_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterNext_value_for_function(s)
	}
}

func (s *Next_value_for_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitNext_value_for_function(s)
	}
}

func (p *tsqlParser) Next_value_for_function() (localctx INext_value_for_functionContext) {
	localctx = NewNext_value_for_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, tsqlParserRULE_next_value_for_function)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2748)
		p.Next_value_for()
	}
	{
		p.SetState(2749)

		var _x = p.Func_proc_name()

		localctx.(*Next_value_for_functionContext).args = _x
	}
	{
		p.SetState(2750)
		p.Over_clause()
	}

	return localctx
}

// IRanking_windowed_functionContext is an interface to support dynamic dispatch.
type IRanking_windowed_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRanking_windowed_functionContext differentiates from other interfaces.
	IsRanking_windowed_functionContext()
}

type Ranking_windowed_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRanking_windowed_functionContext() *Ranking_windowed_functionContext {
	var p = new(Ranking_windowed_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_ranking_windowed_function
	return p
}

func (*Ranking_windowed_functionContext) IsRanking_windowed_functionContext() {}

func NewRanking_windowed_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ranking_windowed_functionContext {
	var p = new(Ranking_windowed_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_ranking_windowed_function

	return p
}

func (s *Ranking_windowed_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Ranking_windowed_functionContext) Over_clause() IOver_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOver_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *Ranking_windowed_functionContext) RANK() antlr.TerminalNode {
	return s.GetToken(tsqlParserRANK, 0)
}

func (s *Ranking_windowed_functionContext) DENSE_RANK() antlr.TerminalNode {
	return s.GetToken(tsqlParserDENSE_RANK, 0)
}

func (s *Ranking_windowed_functionContext) ROW_NUMBER() antlr.TerminalNode {
	return s.GetToken(tsqlParserROW_NUMBER, 0)
}

func (s *Ranking_windowed_functionContext) NTILE() antlr.TerminalNode {
	return s.GetToken(tsqlParserNTILE, 0)
}

func (s *Ranking_windowed_functionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Ranking_windowed_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ranking_windowed_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ranking_windowed_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterRanking_windowed_function(s)
	}
}

func (s *Ranking_windowed_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitRanking_windowed_function(s)
	}
}

func (p *tsqlParser) Ranking_windowed_function() (localctx IRanking_windowed_functionContext) {
	localctx = NewRanking_windowed_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, tsqlParserRULE_ranking_windowed_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2762)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserDENSE_RANK, tsqlParserRANK, tsqlParserROW_NUMBER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2752)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserDENSE_RANK || _la == tsqlParserRANK || _la == tsqlParserROW_NUMBER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2753)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2754)
			p.Match(tsqlParserRR_BRACKET)
		}
		{
			p.SetState(2755)
			p.Over_clause()
		}

	case tsqlParserNTILE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2756)
			p.Match(tsqlParserNTILE)
		}
		{
			p.SetState(2757)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2758)
			p.expression(0)
		}
		{
			p.SetState(2759)
			p.Match(tsqlParserRR_BRACKET)
		}
		{
			p.SetState(2760)
			p.Over_clause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAggregate_windowed_functionContext is an interface to support dynamic dispatch.
type IAggregate_windowed_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetArgs returns the args token.
	GetArgs() antlr.Token

	// SetArgs sets the args token.
	SetArgs(antlr.Token)

	// IsAggregate_windowed_functionContext differentiates from other interfaces.
	IsAggregate_windowed_functionContext()
}

type Aggregate_windowed_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	args   antlr.Token
}

func NewEmptyAggregate_windowed_functionContext() *Aggregate_windowed_functionContext {
	var p = new(Aggregate_windowed_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_aggregate_windowed_function
	return p
}

func (*Aggregate_windowed_functionContext) IsAggregate_windowed_functionContext() {}

func NewAggregate_windowed_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aggregate_windowed_functionContext {
	var p = new(Aggregate_windowed_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_aggregate_windowed_function

	return p
}

func (s *Aggregate_windowed_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Aggregate_windowed_functionContext) GetArgs() antlr.Token { return s.args }

func (s *Aggregate_windowed_functionContext) SetArgs(v antlr.Token) { s.args = v }

func (s *Aggregate_windowed_functionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Aggregate_windowed_functionContext) AVG() antlr.TerminalNode {
	return s.GetToken(tsqlParserAVG, 0)
}

func (s *Aggregate_windowed_functionContext) MAX() antlr.TerminalNode {
	return s.GetToken(tsqlParserMAX, 0)
}

func (s *Aggregate_windowed_functionContext) MIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserMIN, 0)
}

func (s *Aggregate_windowed_functionContext) SUM() antlr.TerminalNode {
	return s.GetToken(tsqlParserSUM, 0)
}

func (s *Aggregate_windowed_functionContext) STDEV() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTDEV, 0)
}

func (s *Aggregate_windowed_functionContext) STDEVP() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTDEVP, 0)
}

func (s *Aggregate_windowed_functionContext) VAR() antlr.TerminalNode {
	return s.GetToken(tsqlParserVAR, 0)
}

func (s *Aggregate_windowed_functionContext) VARP() antlr.TerminalNode {
	return s.GetToken(tsqlParserVARP, 0)
}

func (s *Aggregate_windowed_functionContext) All_distinct() IAll_distinctContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAll_distinctContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAll_distinctContext)
}

func (s *Aggregate_windowed_functionContext) Over_clause() IOver_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOver_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *Aggregate_windowed_functionContext) COUNT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOUNT, 0)
}

func (s *Aggregate_windowed_functionContext) COUNT_BIG() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOUNT_BIG, 0)
}

func (s *Aggregate_windowed_functionContext) CHECKSUM_AGG() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECKSUM_AGG, 0)
}

func (s *Aggregate_windowed_functionContext) GROUPING() antlr.TerminalNode {
	return s.GetToken(tsqlParserGROUPING, 0)
}

func (s *Aggregate_windowed_functionContext) GROUPING_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserGROUPING_ID, 0)
}

func (s *Aggregate_windowed_functionContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Aggregate_windowed_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aggregate_windowed_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Aggregate_windowed_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterAggregate_windowed_function(s)
	}
}

func (s *Aggregate_windowed_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitAggregate_windowed_function(s)
	}
}

func (p *tsqlParser) Aggregate_windowed_function() (localctx IAggregate_windowed_functionContext) {
	localctx = NewAggregate_windowed_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, tsqlParserRULE_aggregate_windowed_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2805)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserAVG, tsqlParserMAX, tsqlParserMIN, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserVAR, tsqlParserVARP:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2764)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserAVG || _la == tsqlParserMAX || _la == tsqlParserMIN || (((_la-369)&-(0x1f+1)) == 0 && ((1<<uint((_la-369)))&((1<<(tsqlParserSTDEV-369))|(1<<(tsqlParserSTDEVP-369))|(1<<(tsqlParserSUM-369))|(1<<(tsqlParserVAR-369))|(1<<(tsqlParserVARP-369)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2765)
			p.Match(tsqlParserLR_BRACKET)
		}
		p.SetState(2767)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserALL || _la == tsqlParserDISTINCT {
			{
				p.SetState(2766)
				p.All_distinct()
			}

		}
		{
			p.SetState(2769)
			p.expression(0)
		}
		{
			p.SetState(2770)
			p.Match(tsqlParserRR_BRACKET)
		}
		p.SetState(2772)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 400, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2771)
				p.Over_clause()
			}

		}

	case tsqlParserCOUNT, tsqlParserCOUNT_BIG:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2774)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserCOUNT || _la == tsqlParserCOUNT_BIG) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2775)
			p.Match(tsqlParserLR_BRACKET)
		}
		p.SetState(2781)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserSTAR:
			{
				p.SetState(2776)

				var _m = p.Match(tsqlParserSTAR)

				localctx.(*Aggregate_windowed_functionContext).args = _m
			}

		case tsqlParserALL, tsqlParserCASE, tsqlParserCOALESCE, tsqlParserCONVERT, tsqlParserCURRENT_TIMESTAMP, tsqlParserCURRENT_USER, tsqlParserDEFAULT, tsqlParserDISTINCT, tsqlParserFORCESEEK, tsqlParserIDENTITY, tsqlParserIIF, tsqlParserLEFT, tsqlParserNEXT, tsqlParserNULL, tsqlParserNULLIF, tsqlParserOVER, tsqlParserRIGHT, tsqlParserSESSION_USER, tsqlParserSYSTEM_USER, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserBINARY_CHECKSUM, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDATEADD, tsqlParserDATEDIFF, tsqlParserDATENAME, tsqlParserDATEPART, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMIN_ACTIVE_ROWVERSION, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserLOCAL_ID, tsqlParserDECIMAL, tsqlParserID, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserLR_BRACKET, tsqlParserPLUS, tsqlParserMINUS, tsqlParserBIT_NOT:
			p.SetState(2778)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserALL || _la == tsqlParserDISTINCT {
				{
					p.SetState(2777)
					p.All_distinct()
				}

			}
			{
				p.SetState(2780)
				p.expression(0)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2783)
			p.Match(tsqlParserRR_BRACKET)
		}
		p.SetState(2785)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 403, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2784)
				p.Over_clause()
			}

		}

	case tsqlParserCHECKSUM_AGG:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2787)
			p.Match(tsqlParserCHECKSUM_AGG)
		}
		{
			p.SetState(2788)
			p.Match(tsqlParserLR_BRACKET)
		}
		p.SetState(2790)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserALL || _la == tsqlParserDISTINCT {
			{
				p.SetState(2789)
				p.All_distinct()
			}

		}
		{
			p.SetState(2792)
			p.expression(0)
		}
		{
			p.SetState(2793)
			p.Match(tsqlParserRR_BRACKET)
		}

	case tsqlParserGROUPING:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2795)
			p.Match(tsqlParserGROUPING)
		}
		{
			p.SetState(2796)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2797)
			p.expression(0)
		}
		{
			p.SetState(2798)
			p.Match(tsqlParserRR_BRACKET)
		}

	case tsqlParserGROUPING_ID:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2800)
			p.Match(tsqlParserGROUPING_ID)
		}
		{
			p.SetState(2801)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2802)
			p.Expression_list()
		}
		{
			p.SetState(2803)
			p.Match(tsqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAll_distinctContext is an interface to support dynamic dispatch.
type IAll_distinctContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAll_distinctContext differentiates from other interfaces.
	IsAll_distinctContext()
}

type All_distinctContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAll_distinctContext() *All_distinctContext {
	var p = new(All_distinctContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_all_distinct
	return p
}

func (*All_distinctContext) IsAll_distinctContext() {}

func NewAll_distinctContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *All_distinctContext {
	var p = new(All_distinctContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_all_distinct

	return p
}

func (s *All_distinctContext) GetParser() antlr.Parser { return s.parser }

func (s *All_distinctContext) ALL() antlr.TerminalNode {
	return s.GetToken(tsqlParserALL, 0)
}

func (s *All_distinctContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(tsqlParserDISTINCT, 0)
}

func (s *All_distinctContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *All_distinctContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *All_distinctContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterAll_distinct(s)
	}
}

func (s *All_distinctContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitAll_distinct(s)
	}
}

func (p *tsqlParser) All_distinct() (localctx IAll_distinctContext) {
	localctx = NewAll_distinctContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, tsqlParserRULE_all_distinct)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2807)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserALL || _la == tsqlParserDISTINCT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOver_clauseContext is an interface to support dynamic dispatch.
type IOver_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOver_clauseContext differentiates from other interfaces.
	IsOver_clauseContext()
}

type Over_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOver_clauseContext() *Over_clauseContext {
	var p = new(Over_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_over_clause
	return p
}

func (*Over_clauseContext) IsOver_clauseContext() {}

func NewOver_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Over_clauseContext {
	var p = new(Over_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_over_clause

	return p
}

func (s *Over_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Over_clauseContext) OVER() antlr.TerminalNode {
	return s.GetToken(tsqlParserOVER, 0)
}

func (s *Over_clauseContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(tsqlParserPARTITION, 0)
}

func (s *Over_clauseContext) BY() antlr.TerminalNode {
	return s.GetToken(tsqlParserBY, 0)
}

func (s *Over_clauseContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Over_clauseContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Over_clauseContext) Row_or_range_clause() IRow_or_range_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRow_or_range_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRow_or_range_clauseContext)
}

func (s *Over_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Over_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Over_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOver_clause(s)
	}
}

func (s *Over_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOver_clause(s)
	}
}

func (p *tsqlParser) Over_clause() (localctx IOver_clauseContext) {
	localctx = NewOver_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, tsqlParserRULE_over_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2809)
		p.Match(tsqlParserOVER)
	}
	{
		p.SetState(2810)
		p.Match(tsqlParserLR_BRACKET)
	}
	p.SetState(2814)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserPARTITION {
		{
			p.SetState(2811)
			p.Match(tsqlParserPARTITION)
		}
		{
			p.SetState(2812)
			p.Match(tsqlParserBY)
		}
		{
			p.SetState(2813)
			p.Expression_list()
		}

	}
	p.SetState(2817)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserORDER {
		{
			p.SetState(2816)
			p.Order_by_clause()
		}

	}
	p.SetState(2820)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserRANGE || _la == tsqlParserROWS {
		{
			p.SetState(2819)
			p.Row_or_range_clause()
		}

	}
	{
		p.SetState(2822)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IRow_or_range_clauseContext is an interface to support dynamic dispatch.
type IRow_or_range_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRow_or_range_clauseContext differentiates from other interfaces.
	IsRow_or_range_clauseContext()
}

type Row_or_range_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRow_or_range_clauseContext() *Row_or_range_clauseContext {
	var p = new(Row_or_range_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_row_or_range_clause
	return p
}

func (*Row_or_range_clauseContext) IsRow_or_range_clauseContext() {}

func NewRow_or_range_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Row_or_range_clauseContext {
	var p = new(Row_or_range_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_row_or_range_clause

	return p
}

func (s *Row_or_range_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Row_or_range_clauseContext) Window_frame_extent() IWindow_frame_extentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_extentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_extentContext)
}

func (s *Row_or_range_clauseContext) ROWS() antlr.TerminalNode {
	return s.GetToken(tsqlParserROWS, 0)
}

func (s *Row_or_range_clauseContext) RANGE() antlr.TerminalNode {
	return s.GetToken(tsqlParserRANGE, 0)
}

func (s *Row_or_range_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Row_or_range_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Row_or_range_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterRow_or_range_clause(s)
	}
}

func (s *Row_or_range_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitRow_or_range_clause(s)
	}
}

func (p *tsqlParser) Row_or_range_clause() (localctx IRow_or_range_clauseContext) {
	localctx = NewRow_or_range_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, tsqlParserRULE_row_or_range_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2824)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserRANGE || _la == tsqlParserROWS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(2825)
		p.Window_frame_extent()
	}

	return localctx
}

// IWindow_frame_extentContext is an interface to support dynamic dispatch.
type IWindow_frame_extentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_frame_extentContext differentiates from other interfaces.
	IsWindow_frame_extentContext()
}

type Window_frame_extentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frame_extentContext() *Window_frame_extentContext {
	var p = new(Window_frame_extentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_window_frame_extent
	return p
}

func (*Window_frame_extentContext) IsWindow_frame_extentContext() {}

func NewWindow_frame_extentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frame_extentContext {
	var p = new(Window_frame_extentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_window_frame_extent

	return p
}

func (s *Window_frame_extentContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frame_extentContext) Window_frame_preceding() IWindow_frame_precedingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_precedingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_precedingContext)
}

func (s *Window_frame_extentContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(tsqlParserBETWEEN, 0)
}

func (s *Window_frame_extentContext) AllWindow_frame_bound() []IWindow_frame_boundContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWindow_frame_boundContext)(nil)).Elem())
	var tst = make([]IWindow_frame_boundContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWindow_frame_boundContext)
		}
	}

	return tst
}

func (s *Window_frame_extentContext) Window_frame_bound(i int) IWindow_frame_boundContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_boundContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_boundContext)
}

func (s *Window_frame_extentContext) AND() antlr.TerminalNode {
	return s.GetToken(tsqlParserAND, 0)
}

func (s *Window_frame_extentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frame_extentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frame_extentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWindow_frame_extent(s)
	}
}

func (s *Window_frame_extentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWindow_frame_extent(s)
	}
}

func (p *tsqlParser) Window_frame_extent() (localctx IWindow_frame_extentContext) {
	localctx = NewWindow_frame_extentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, tsqlParserRULE_window_frame_extent)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2833)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserCURRENT, tsqlParserUNBOUNDED, tsqlParserDECIMAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2827)
			p.Window_frame_preceding()
		}

	case tsqlParserBETWEEN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2828)
			p.Match(tsqlParserBETWEEN)
		}
		{
			p.SetState(2829)
			p.Window_frame_bound()
		}
		{
			p.SetState(2830)
			p.Match(tsqlParserAND)
		}
		{
			p.SetState(2831)
			p.Window_frame_bound()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWindow_frame_boundContext is an interface to support dynamic dispatch.
type IWindow_frame_boundContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_frame_boundContext differentiates from other interfaces.
	IsWindow_frame_boundContext()
}

type Window_frame_boundContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frame_boundContext() *Window_frame_boundContext {
	var p = new(Window_frame_boundContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_window_frame_bound
	return p
}

func (*Window_frame_boundContext) IsWindow_frame_boundContext() {}

func NewWindow_frame_boundContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frame_boundContext {
	var p = new(Window_frame_boundContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_window_frame_bound

	return p
}

func (s *Window_frame_boundContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frame_boundContext) Window_frame_preceding() IWindow_frame_precedingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_precedingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_precedingContext)
}

func (s *Window_frame_boundContext) Window_frame_following() IWindow_frame_followingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_followingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_followingContext)
}

func (s *Window_frame_boundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frame_boundContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frame_boundContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWindow_frame_bound(s)
	}
}

func (s *Window_frame_boundContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWindow_frame_bound(s)
	}
}

func (p *tsqlParser) Window_frame_bound() (localctx IWindow_frame_boundContext) {
	localctx = NewWindow_frame_boundContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, tsqlParserRULE_window_frame_bound)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2837)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 410, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2835)
			p.Window_frame_preceding()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2836)
			p.Window_frame_following()
		}

	}

	return localctx
}

// IWindow_frame_precedingContext is an interface to support dynamic dispatch.
type IWindow_frame_precedingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_frame_precedingContext differentiates from other interfaces.
	IsWindow_frame_precedingContext()
}

type Window_frame_precedingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frame_precedingContext() *Window_frame_precedingContext {
	var p = new(Window_frame_precedingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_window_frame_preceding
	return p
}

func (*Window_frame_precedingContext) IsWindow_frame_precedingContext() {}

func NewWindow_frame_precedingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frame_precedingContext {
	var p = new(Window_frame_precedingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_window_frame_preceding

	return p
}

func (s *Window_frame_precedingContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frame_precedingContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNBOUNDED, 0)
}

func (s *Window_frame_precedingContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRECEDING, 0)
}

func (s *Window_frame_precedingContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Window_frame_precedingContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURRENT, 0)
}

func (s *Window_frame_precedingContext) ROW() antlr.TerminalNode {
	return s.GetToken(tsqlParserROW, 0)
}

func (s *Window_frame_precedingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frame_precedingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frame_precedingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWindow_frame_preceding(s)
	}
}

func (s *Window_frame_precedingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWindow_frame_preceding(s)
	}
}

func (p *tsqlParser) Window_frame_preceding() (localctx IWindow_frame_precedingContext) {
	localctx = NewWindow_frame_precedingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, tsqlParserRULE_window_frame_preceding)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2845)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserUNBOUNDED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2839)
			p.Match(tsqlParserUNBOUNDED)
		}
		{
			p.SetState(2840)
			p.Match(tsqlParserPRECEDING)
		}

	case tsqlParserDECIMAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2841)
			p.Match(tsqlParserDECIMAL)
		}
		{
			p.SetState(2842)
			p.Match(tsqlParserPRECEDING)
		}

	case tsqlParserCURRENT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2843)
			p.Match(tsqlParserCURRENT)
		}
		{
			p.SetState(2844)
			p.Match(tsqlParserROW)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWindow_frame_followingContext is an interface to support dynamic dispatch.
type IWindow_frame_followingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_frame_followingContext differentiates from other interfaces.
	IsWindow_frame_followingContext()
}

type Window_frame_followingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frame_followingContext() *Window_frame_followingContext {
	var p = new(Window_frame_followingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_window_frame_following
	return p
}

func (*Window_frame_followingContext) IsWindow_frame_followingContext() {}

func NewWindow_frame_followingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frame_followingContext {
	var p = new(Window_frame_followingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_window_frame_following

	return p
}

func (s *Window_frame_followingContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frame_followingContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNBOUNDED, 0)
}

func (s *Window_frame_followingContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOLLOWING, 0)
}

func (s *Window_frame_followingContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Window_frame_followingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frame_followingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frame_followingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWindow_frame_following(s)
	}
}

func (s *Window_frame_followingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWindow_frame_following(s)
	}
}

func (p *tsqlParser) Window_frame_following() (localctx IWindow_frame_followingContext) {
	localctx = NewWindow_frame_followingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, tsqlParserRULE_window_frame_following)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2851)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserUNBOUNDED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2847)
			p.Match(tsqlParserUNBOUNDED)
		}
		{
			p.SetState(2848)
			p.Match(tsqlParserFOLLOWING)
		}

	case tsqlParserDECIMAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2849)
			p.Match(tsqlParserDECIMAL)
		}
		{
			p.SetState(2850)
			p.Match(tsqlParserFOLLOWING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_database_optionContext is an interface to support dynamic dispatch.
type ICreate_database_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_database_optionContext differentiates from other interfaces.
	IsCreate_database_optionContext()
}

type Create_database_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_database_optionContext() *Create_database_optionContext {
	var p = new(Create_database_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_create_database_option
	return p
}

func (*Create_database_optionContext) IsCreate_database_optionContext() {}

func NewCreate_database_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_database_optionContext {
	var p = new(Create_database_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_create_database_option

	return p
}

func (s *Create_database_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_database_optionContext) FILESTREAM() antlr.TerminalNode {
	return s.GetToken(tsqlParserFILESTREAM, 0)
}

func (s *Create_database_optionContext) AllDatabase_filestream_option() []IDatabase_filestream_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDatabase_filestream_optionContext)(nil)).Elem())
	var tst = make([]IDatabase_filestream_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDatabase_filestream_optionContext)
		}
	}

	return tst
}

func (s *Create_database_optionContext) Database_filestream_option(i int) IDatabase_filestream_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_filestream_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDatabase_filestream_optionContext)
}

func (s *Create_database_optionContext) DEFAULT_LANGUAGE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT_LANGUAGE, 0)
}

func (s *Create_database_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Create_database_optionContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Create_database_optionContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Create_database_optionContext) DEFAULT_FULLTEXT_LANGUAGE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT_FULLTEXT_LANGUAGE, 0)
}

func (s *Create_database_optionContext) NESTED_TRIGGERS() antlr.TerminalNode {
	return s.GetToken(tsqlParserNESTED_TRIGGERS, 0)
}

func (s *Create_database_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *Create_database_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Create_database_optionContext) TRANSFORM_NOISE_WORDS() antlr.TerminalNode {
	return s.GetToken(tsqlParserTRANSFORM_NOISE_WORDS, 0)
}

func (s *Create_database_optionContext) TWO_DIGIT_YEAR_CUTOFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserTWO_DIGIT_YEAR_CUTOFF, 0)
}

func (s *Create_database_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Create_database_optionContext) DB_CHAINING() antlr.TerminalNode {
	return s.GetToken(tsqlParserDB_CHAINING, 0)
}

func (s *Create_database_optionContext) TRUSTWORTHY() antlr.TerminalNode {
	return s.GetToken(tsqlParserTRUSTWORTHY, 0)
}

func (s *Create_database_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_database_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_database_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCreate_database_option(s)
	}
}

func (s *Create_database_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCreate_database_option(s)
	}
}

func (p *tsqlParser) Create_database_option() (localctx ICreate_database_optionContext) {
	localctx = NewCreate_database_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, tsqlParserRULE_create_database_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2887)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFILESTREAM:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2853)
			p.Match(tsqlParserFILESTREAM)
		}

		{
			p.SetState(2854)
			p.Database_filestream_option()
		}
		p.SetState(2859)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 413, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2855)
					p.Match(tsqlParserCOMMA)
				}
				{
					p.SetState(2856)
					p.Database_filestream_option()
				}

			}
			p.SetState(2861)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 413, p.GetParserRuleContext())
		}

	case tsqlParserDEFAULT_LANGUAGE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2862)
			p.Match(tsqlParserDEFAULT_LANGUAGE)
		}
		{
			p.SetState(2863)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(2866)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(2864)
				p.R_id()
			}

		case tsqlParserSTRING:
			{
				p.SetState(2865)
				p.Match(tsqlParserSTRING)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case tsqlParserDEFAULT_FULLTEXT_LANGUAGE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2868)
			p.Match(tsqlParserDEFAULT_FULLTEXT_LANGUAGE)
		}
		{
			p.SetState(2869)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(2872)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(2870)
				p.R_id()
			}

		case tsqlParserSTRING:
			{
				p.SetState(2871)
				p.Match(tsqlParserSTRING)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case tsqlParserNESTED_TRIGGERS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2874)
			p.Match(tsqlParserNESTED_TRIGGERS)
		}
		{
			p.SetState(2875)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2876)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserOFF || _la == tsqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case tsqlParserTRANSFORM_NOISE_WORDS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2877)
			p.Match(tsqlParserTRANSFORM_NOISE_WORDS)
		}
		{
			p.SetState(2878)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2879)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserOFF || _la == tsqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case tsqlParserTWO_DIGIT_YEAR_CUTOFF:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2880)
			p.Match(tsqlParserTWO_DIGIT_YEAR_CUTOFF)
		}
		{
			p.SetState(2881)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2882)
			p.Match(tsqlParserDECIMAL)
		}

	case tsqlParserDB_CHAINING:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2883)
			p.Match(tsqlParserDB_CHAINING)
		}
		{
			p.SetState(2884)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserOFF || _la == tsqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case tsqlParserTRUSTWORTHY:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2885)
			p.Match(tsqlParserTRUSTWORTHY)
		}
		{
			p.SetState(2886)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserOFF || _la == tsqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDatabase_filestream_optionContext is an interface to support dynamic dispatch.
type IDatabase_filestream_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatabase_filestream_optionContext differentiates from other interfaces.
	IsDatabase_filestream_optionContext()
}

type Database_filestream_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabase_filestream_optionContext() *Database_filestream_optionContext {
	var p = new(Database_filestream_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_database_filestream_option
	return p
}

func (*Database_filestream_optionContext) IsDatabase_filestream_optionContext() {}

func NewDatabase_filestream_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Database_filestream_optionContext {
	var p = new(Database_filestream_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_database_filestream_option

	return p
}

func (s *Database_filestream_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Database_filestream_optionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(tsqlParserLR_BRACKET, 0)
}

func (s *Database_filestream_optionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(tsqlParserRR_BRACKET, 0)
}

func (s *Database_filestream_optionContext) NON_TRANSACTED_ACCESS() antlr.TerminalNode {
	return s.GetToken(tsqlParserNON_TRANSACTED_ACCESS, 0)
}

func (s *Database_filestream_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Database_filestream_optionContext) DIRECTORY_NAME() antlr.TerminalNode {
	return s.GetToken(tsqlParserDIRECTORY_NAME, 0)
}

func (s *Database_filestream_optionContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Database_filestream_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *Database_filestream_optionContext) READ_ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD_ONLY, 0)
}

func (s *Database_filestream_optionContext) FULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserFULL, 0)
}

func (s *Database_filestream_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Database_filestream_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Database_filestream_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDatabase_filestream_option(s)
	}
}

func (s *Database_filestream_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDatabase_filestream_option(s)
	}
}

func (p *tsqlParser) Database_filestream_option() (localctx IDatabase_filestream_optionContext) {
	localctx = NewDatabase_filestream_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, tsqlParserRULE_database_filestream_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2889)
		p.Match(tsqlParserLR_BRACKET)
	}
	p.SetState(2896)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserNON_TRANSACTED_ACCESS:
		{
			p.SetState(2890)
			p.Match(tsqlParserNON_TRANSACTED_ACCESS)
		}
		{
			p.SetState(2891)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2892)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserFULL || _la == tsqlParserOFF || _la == tsqlParserREAD_ONLY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case tsqlParserDIRECTORY_NAME:
		{
			p.SetState(2893)
			p.Match(tsqlParserDIRECTORY_NAME)
		}
		{
			p.SetState(2894)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2895)
			p.Match(tsqlParserSTRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2898)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IDatabase_file_specContext is an interface to support dynamic dispatch.
type IDatabase_file_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatabase_file_specContext differentiates from other interfaces.
	IsDatabase_file_specContext()
}

type Database_file_specContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabase_file_specContext() *Database_file_specContext {
	var p = new(Database_file_specContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_database_file_spec
	return p
}

func (*Database_file_specContext) IsDatabase_file_specContext() {}

func NewDatabase_file_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Database_file_specContext {
	var p = new(Database_file_specContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_database_file_spec

	return p
}

func (s *Database_file_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Database_file_specContext) File_group() IFile_groupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFile_groupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFile_groupContext)
}

func (s *Database_file_specContext) File_spec() IFile_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFile_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFile_specContext)
}

func (s *Database_file_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Database_file_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Database_file_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDatabase_file_spec(s)
	}
}

func (s *Database_file_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDatabase_file_spec(s)
	}
}

func (p *tsqlParser) Database_file_spec() (localctx IDatabase_file_specContext) {
	localctx = NewDatabase_file_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, tsqlParserRULE_database_file_spec)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2902)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFILEGROUP:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2900)
			p.File_group()
		}

	case tsqlParserLR_BRACKET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2901)
			p.File_spec()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFile_groupContext is an interface to support dynamic dispatch.
type IFile_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFile_groupContext differentiates from other interfaces.
	IsFile_groupContext()
}

type File_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFile_groupContext() *File_groupContext {
	var p = new(File_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_file_group
	return p
}

func (*File_groupContext) IsFile_groupContext() {}

func NewFile_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *File_groupContext {
	var p = new(File_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_file_group

	return p
}

func (s *File_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *File_groupContext) FILEGROUP() antlr.TerminalNode {
	return s.GetToken(tsqlParserFILEGROUP, 0)
}

func (s *File_groupContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *File_groupContext) AllFile_spec() []IFile_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFile_specContext)(nil)).Elem())
	var tst = make([]IFile_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFile_specContext)
		}
	}

	return tst
}

func (s *File_groupContext) File_spec(i int) IFile_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFile_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFile_specContext)
}

func (s *File_groupContext) AllCONTAINS() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserCONTAINS)
}

func (s *File_groupContext) CONTAINS(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserCONTAINS, i)
}

func (s *File_groupContext) FILESTREAM() antlr.TerminalNode {
	return s.GetToken(tsqlParserFILESTREAM, 0)
}

func (s *File_groupContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT, 0)
}

func (s *File_groupContext) MEMORY_OPTIMIZED_DATA() antlr.TerminalNode {
	return s.GetToken(tsqlParserMEMORY_OPTIMIZED_DATA, 0)
}

func (s *File_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *File_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *File_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFile_group(s)
	}
}

func (s *File_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFile_group(s)
	}
}

func (p *tsqlParser) File_group() (localctx IFile_groupContext) {
	localctx = NewFile_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, tsqlParserRULE_file_group)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2904)
		p.Match(tsqlParserFILEGROUP)
	}
	{
		p.SetState(2905)
		p.R_id()
	}
	p.SetState(2908)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 419, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2906)
			p.Match(tsqlParserCONTAINS)
		}
		{
			p.SetState(2907)
			p.Match(tsqlParserFILESTREAM)
		}

	}
	p.SetState(2911)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserDEFAULT {
		{
			p.SetState(2910)
			p.Match(tsqlParserDEFAULT)
		}

	}
	p.SetState(2915)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCONTAINS {
		{
			p.SetState(2913)
			p.Match(tsqlParserCONTAINS)
		}
		{
			p.SetState(2914)
			p.Match(tsqlParserMEMORY_OPTIMIZED_DATA)
		}

	}
	{
		p.SetState(2917)
		p.File_spec()
	}
	p.SetState(2922)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 422, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2918)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2919)
				p.File_spec()
			}

		}
		p.SetState(2924)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 422, p.GetParserRuleContext())
	}

	return localctx
}

// IFile_specContext is an interface to support dynamic dispatch.
type IFile_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetR_file returns the r_file token.
	GetR_file() antlr.Token

	// SetR_file sets the r_file token.
	SetR_file(antlr.Token)

	// IsFile_specContext differentiates from other interfaces.
	IsFile_specContext()
}

type File_specContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	r_file antlr.Token
}

func NewEmptyFile_specContext() *File_specContext {
	var p = new(File_specContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_file_spec
	return p
}

func (*File_specContext) IsFile_specContext() {}

func NewFile_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *File_specContext {
	var p = new(File_specContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_file_spec

	return p
}

func (s *File_specContext) GetParser() antlr.Parser { return s.parser }

func (s *File_specContext) GetR_file() antlr.Token { return s.r_file }

func (s *File_specContext) SetR_file(v antlr.Token) { s.r_file = v }

func (s *File_specContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(tsqlParserLR_BRACKET, 0)
}

func (s *File_specContext) NAME() antlr.TerminalNode {
	return s.GetToken(tsqlParserNAME, 0)
}

func (s *File_specContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserEQUAL)
}

func (s *File_specContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, i)
}

func (s *File_specContext) FILENAME() antlr.TerminalNode {
	return s.GetToken(tsqlParserFILENAME, 0)
}

func (s *File_specContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(tsqlParserRR_BRACKET, 0)
}

func (s *File_specContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserSTRING)
}

func (s *File_specContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, i)
}

func (s *File_specContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *File_specContext) SIZE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSIZE, 0)
}

func (s *File_specContext) AllFile_size() []IFile_sizeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFile_sizeContext)(nil)).Elem())
	var tst = make([]IFile_sizeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFile_sizeContext)
		}
	}

	return tst
}

func (s *File_specContext) File_size(i int) IFile_sizeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFile_sizeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFile_sizeContext)
}

func (s *File_specContext) MAXSIZE() antlr.TerminalNode {
	return s.GetToken(tsqlParserMAXSIZE, 0)
}

func (s *File_specContext) FILEGROWTH() antlr.TerminalNode {
	return s.GetToken(tsqlParserFILEGROWTH, 0)
}

func (s *File_specContext) UNLIMITED() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNLIMITED, 0)
}

func (s *File_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *File_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *File_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFile_spec(s)
	}
}

func (s *File_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFile_spec(s)
	}
}

func (p *tsqlParser) File_spec() (localctx IFile_specContext) {
	localctx = NewFile_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, tsqlParserRULE_file_spec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2925)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2926)
		p.Match(tsqlParserNAME)
	}
	{
		p.SetState(2927)
		p.Match(tsqlParserEQUAL)
	}
	p.SetState(2930)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		{
			p.SetState(2928)
			p.R_id()
		}

	case tsqlParserSTRING:
		{
			p.SetState(2929)
			p.Match(tsqlParserSTRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(2933)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCOMMA {
		{
			p.SetState(2932)
			p.Match(tsqlParserCOMMA)
		}

	}
	{
		p.SetState(2935)
		p.Match(tsqlParserFILENAME)
	}
	{
		p.SetState(2936)
		p.Match(tsqlParserEQUAL)
	}
	{
		p.SetState(2937)

		var _m = p.Match(tsqlParserSTRING)

		localctx.(*File_specContext).r_file = _m
	}
	p.SetState(2939)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCOMMA {
		{
			p.SetState(2938)
			p.Match(tsqlParserCOMMA)
		}

	}
	p.SetState(2947)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserSIZE {
		{
			p.SetState(2941)
			p.Match(tsqlParserSIZE)
		}
		{
			p.SetState(2942)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2943)
			p.File_size()
		}
		p.SetState(2945)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCOMMA {
			{
				p.SetState(2944)
				p.Match(tsqlParserCOMMA)
			}

		}

	}
	p.SetState(2958)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserMAXSIZE {
		{
			p.SetState(2949)
			p.Match(tsqlParserMAXSIZE)
		}
		{
			p.SetState(2950)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(2953)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserDECIMAL:
			{
				p.SetState(2951)
				p.File_size()
			}

		case tsqlParserUNLIMITED:
			{
				p.SetState(2952)
				p.Match(tsqlParserUNLIMITED)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(2956)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCOMMA {
			{
				p.SetState(2955)
				p.Match(tsqlParserCOMMA)
			}

		}

	}
	p.SetState(2966)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFILEGROWTH {
		{
			p.SetState(2960)
			p.Match(tsqlParserFILEGROWTH)
		}
		{
			p.SetState(2961)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2962)
			p.File_size()
		}
		p.SetState(2964)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCOMMA {
			{
				p.SetState(2963)
				p.Match(tsqlParserCOMMA)
			}

		}

	}
	{
		p.SetState(2968)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IFull_table_nameContext is an interface to support dynamic dispatch.
type IFull_table_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetServer returns the server rule contexts.
	GetServer() IR_idContext

	// GetDatabase returns the database rule contexts.
	GetDatabase() IR_idContext

	// GetSchema returns the schema rule contexts.
	GetSchema() IR_idContext

	// GetTable returns the table rule contexts.
	GetTable() IR_idContext

	// SetServer sets the server rule contexts.
	SetServer(IR_idContext)

	// SetDatabase sets the database rule contexts.
	SetDatabase(IR_idContext)

	// SetSchema sets the schema rule contexts.
	SetSchema(IR_idContext)

	// SetTable sets the table rule contexts.
	SetTable(IR_idContext)

	// IsFull_table_nameContext differentiates from other interfaces.
	IsFull_table_nameContext()
}

type Full_table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	server   IR_idContext
	database IR_idContext
	schema   IR_idContext
	table    IR_idContext
}

func NewEmptyFull_table_nameContext() *Full_table_nameContext {
	var p = new(Full_table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_full_table_name
	return p
}

func (*Full_table_nameContext) IsFull_table_nameContext() {}

func NewFull_table_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_table_nameContext {
	var p = new(Full_table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_full_table_name

	return p
}

func (s *Full_table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_table_nameContext) GetServer() IR_idContext { return s.server }

func (s *Full_table_nameContext) GetDatabase() IR_idContext { return s.database }

func (s *Full_table_nameContext) GetSchema() IR_idContext { return s.schema }

func (s *Full_table_nameContext) GetTable() IR_idContext { return s.table }

func (s *Full_table_nameContext) SetServer(v IR_idContext) { s.server = v }

func (s *Full_table_nameContext) SetDatabase(v IR_idContext) { s.database = v }

func (s *Full_table_nameContext) SetSchema(v IR_idContext) { s.schema = v }

func (s *Full_table_nameContext) SetTable(v IR_idContext) { s.table = v }

func (s *Full_table_nameContext) AllR_id() []IR_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IR_idContext)(nil)).Elem())
	var tst = make([]IR_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IR_idContext)
		}
	}

	return tst
}

func (s *Full_table_nameContext) R_id(i int) IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Full_table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Full_table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFull_table_name(s)
	}
}

func (s *Full_table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFull_table_name(s)
	}
}

func (p *tsqlParser) Full_table_name() (localctx IFull_table_nameContext) {
	localctx = NewFull_table_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, tsqlParserRULE_full_table_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2987)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 434, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2970)

			var _x = p.R_id()

			localctx.(*Full_table_nameContext).server = _x
		}
		{
			p.SetState(2971)
			p.Match(tsqlParserDOT)
		}
		{
			p.SetState(2972)

			var _x = p.R_id()

			localctx.(*Full_table_nameContext).database = _x
		}
		{
			p.SetState(2973)
			p.Match(tsqlParserDOT)
		}
		{
			p.SetState(2974)

			var _x = p.R_id()

			localctx.(*Full_table_nameContext).schema = _x
		}
		{
			p.SetState(2975)
			p.Match(tsqlParserDOT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 434, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(2977)

			var _x = p.R_id()

			localctx.(*Full_table_nameContext).database = _x
		}
		{
			p.SetState(2978)
			p.Match(tsqlParserDOT)
		}
		p.SetState(2980)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserFORCESEEK || _la == tsqlParserNEXT || (((_la-196)&-(0x1f+1)) == 0 && ((1<<uint((_la-196)))&((1<<(tsqlParserABSOLUTE-196))|(1<<(tsqlParserAPPLY-196))|(1<<(tsqlParserAUTO-196))|(1<<(tsqlParserAVG-196))|(1<<(tsqlParserBASE64-196))|(1<<(tsqlParserCALLER-196))|(1<<(tsqlParserCAST-196))|(1<<(tsqlParserCATCH-196))|(1<<(tsqlParserCHECKSUM_AGG-196))|(1<<(tsqlParserCOMMITTED-196))|(1<<(tsqlParserCONCAT-196)))) != 0) || (((_la-228)&-(0x1f+1)) == 0 && ((1<<uint((_la-228)))&((1<<(tsqlParserCONTROL-228))|(1<<(tsqlParserCOOKIE-228))|(1<<(tsqlParserCOUNT-228))|(1<<(tsqlParserCOUNT_BIG-228))|(1<<(tsqlParserDELAY-228))|(1<<(tsqlParserDELETED-228))|(1<<(tsqlParserDENSE_RANK-228))|(1<<(tsqlParserDISABLE-228))|(1<<(tsqlParserDYNAMIC-228))|(1<<(tsqlParserENCRYPTION-228))|(1<<(tsqlParserEXPAND-228))|(1<<(tsqlParserFAST-228))|(1<<(tsqlParserFAST_FORWARD-228)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(tsqlParserFIRST-262))|(1<<(tsqlParserFOLLOWING-262))|(1<<(tsqlParserFORCE-262))|(1<<(tsqlParserFORCED-262))|(1<<(tsqlParserFORWARD_ONLY-262))|(1<<(tsqlParserFULLSCAN-262))|(1<<(tsqlParserGLOBAL-262))|(1<<(tsqlParserGO-262))|(1<<(tsqlParserGROUPING-262))|(1<<(tsqlParserGROUPING_ID-262))|(1<<(tsqlParserHASH-262))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-262))|(1<<(tsqlParserIMPERSONATE-262))|(1<<(tsqlParserINSENSITIVE-262))|(1<<(tsqlParserINSERTED-262))|(1<<(tsqlParserISOLATION-262))|(1<<(tsqlParserKEEP-262))|(1<<(tsqlParserKEEPFIXED-262))|(1<<(tsqlParserKEYSET-262))|(1<<(tsqlParserLAST-262))|(1<<(tsqlParserLEVEL-262))|(1<<(tsqlParserLOCAL-262))|(1<<(tsqlParserLOCK_ESCALATION-262))|(1<<(tsqlParserLOGIN-262))|(1<<(tsqlParserLOOP-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(tsqlParserMARK-294))|(1<<(tsqlParserMAX-294))|(1<<(tsqlParserMAXDOP-294))|(1<<(tsqlParserMAXRECURSION-294))|(1<<(tsqlParserMIN-294))|(1<<(tsqlParserMODIFY-294))|(1<<(tsqlParserNAME-294))|(1<<(tsqlParserNOCOUNT-294))|(1<<(tsqlParserNOEXPAND-294))|(1<<(tsqlParserNORECOMPUTE-294))|(1<<(tsqlParserNTILE-294))|(1<<(tsqlParserNUMBER-294))|(1<<(tsqlParserOFFSET-294))|(1<<(tsqlParserONLINE-294))|(1<<(tsqlParserONLY-294))|(1<<(tsqlParserOPTIMISTIC-294))|(1<<(tsqlParserOPTIMIZE-294))|(1<<(tsqlParserOUT-294))|(1<<(tsqlParserOUTPUT-294)))) != 0) || (((_la-326)&-(0x1f+1)) == 0 && ((1<<uint((_la-326)))&((1<<(tsqlParserOWNER-326))|(1<<(tsqlParserPARAMETERIZATION-326))|(1<<(tsqlParserPARTITION-326))|(1<<(tsqlParserPATH-326))|(1<<(tsqlParserPRECEDING-326))|(1<<(tsqlParserPRIOR-326))|(1<<(tsqlParserPRIVILEGES-326))|(1<<(tsqlParserRANGE-326))|(1<<(tsqlParserRANK-326))|(1<<(tsqlParserREADONLY-326))|(1<<(tsqlParserREAD_ONLY-326))|(1<<(tsqlParserRECOMPILE-326))|(1<<(tsqlParserRELATIVE-326))|(1<<(tsqlParserREMOTE-326))|(1<<(tsqlParserREPEATABLE-326))|(1<<(tsqlParserROBUST-326))|(1<<(tsqlParserROOT-326))|(1<<(tsqlParserROW-326))|(1<<(tsqlParserROWGUID-326))|(1<<(tsqlParserROWS-326))|(1<<(tsqlParserROW_NUMBER-326))|(1<<(tsqlParserSAMPLE-326))|(1<<(tsqlParserSCHEMABINDING-326))|(1<<(tsqlParserSCROLL-326))|(1<<(tsqlParserSCROLL_LOCKS-326)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(tsqlParserSELF-359))|(1<<(tsqlParserSERIALIZABLE-359))|(1<<(tsqlParserSIMPLE-359))|(1<<(tsqlParserSIZE-359))|(1<<(tsqlParserSNAPSHOT-359))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-359))|(1<<(tsqlParserSTATIC-359))|(1<<(tsqlParserSTATS_STREAM-359))|(1<<(tsqlParserSTDEV-359))|(1<<(tsqlParserSTDEVP-359))|(1<<(tsqlParserSUM-359))|(1<<(tsqlParserTEXTIMAGE_ON-359))|(1<<(tsqlParserTHROW-359))|(1<<(tsqlParserTIES-359))|(1<<(tsqlParserTIME-359))|(1<<(tsqlParserTRY-359))|(1<<(tsqlParserTYPE-359))|(1<<(tsqlParserTYPE_WARNING-359))|(1<<(tsqlParserUNBOUNDED-359))|(1<<(tsqlParserUNCOMMITTED-359))|(1<<(tsqlParserUNKNOWN-359))|(1<<(tsqlParserUSING-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(tsqlParserVAR-391))|(1<<(tsqlParserVARP-391))|(1<<(tsqlParserVIEWS-391))|(1<<(tsqlParserVIEW_METADATA-391))|(1<<(tsqlParserWORK-391))|(1<<(tsqlParserXML-391))|(1<<(tsqlParserXMLNAMESPACES-391))|(1<<(tsqlParserDOUBLE_QUOTE_ID-391))|(1<<(tsqlParserSQUARE_BRACKET_ID-391))|(1<<(tsqlParserID-391)))) != 0) {
			{
				p.SetState(2979)

				var _x = p.R_id()

				localctx.(*Full_table_nameContext).schema = _x
			}

		}
		{
			p.SetState(2982)
			p.Match(tsqlParserDOT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 434, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(2984)

			var _x = p.R_id()

			localctx.(*Full_table_nameContext).schema = _x
		}
		{
			p.SetState(2985)
			p.Match(tsqlParserDOT)
		}

	}
	{
		p.SetState(2989)

		var _x = p.R_id()

		localctx.(*Full_table_nameContext).table = _x
	}

	return localctx
}

// ITable_nameContext is an interface to support dynamic dispatch.
type ITable_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase returns the database rule contexts.
	GetDatabase() IR_idContext

	// GetSchema returns the schema rule contexts.
	GetSchema() IR_idContext

	// GetTable returns the table rule contexts.
	GetTable() IR_idContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IR_idContext)

	// SetSchema sets the schema rule contexts.
	SetSchema(IR_idContext)

	// SetTable sets the table rule contexts.
	SetTable(IR_idContext)

	// IsTable_nameContext differentiates from other interfaces.
	IsTable_nameContext()
}

type Table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	database IR_idContext
	schema   IR_idContext
	table    IR_idContext
}

func NewEmptyTable_nameContext() *Table_nameContext {
	var p = new(Table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_name
	return p
}

func (*Table_nameContext) IsTable_nameContext() {}

func NewTable_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_nameContext {
	var p = new(Table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_name

	return p
}

func (s *Table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_nameContext) GetDatabase() IR_idContext { return s.database }

func (s *Table_nameContext) GetSchema() IR_idContext { return s.schema }

func (s *Table_nameContext) GetTable() IR_idContext { return s.table }

func (s *Table_nameContext) SetDatabase(v IR_idContext) { s.database = v }

func (s *Table_nameContext) SetSchema(v IR_idContext) { s.schema = v }

func (s *Table_nameContext) SetTable(v IR_idContext) { s.table = v }

func (s *Table_nameContext) AllR_id() []IR_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IR_idContext)(nil)).Elem())
	var tst = make([]IR_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IR_idContext)
		}
	}

	return tst
}

func (s *Table_nameContext) R_id(i int) IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_name(s)
	}
}

func (s *Table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_name(s)
	}
}

func (p *tsqlParser) Table_name() (localctx ITable_nameContext) {
	localctx = NewTable_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, tsqlParserRULE_table_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3001)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 436, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2991)

			var _x = p.R_id()

			localctx.(*Table_nameContext).database = _x
		}
		{
			p.SetState(2992)
			p.Match(tsqlParserDOT)
		}
		p.SetState(2994)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserFORCESEEK || _la == tsqlParserNEXT || (((_la-196)&-(0x1f+1)) == 0 && ((1<<uint((_la-196)))&((1<<(tsqlParserABSOLUTE-196))|(1<<(tsqlParserAPPLY-196))|(1<<(tsqlParserAUTO-196))|(1<<(tsqlParserAVG-196))|(1<<(tsqlParserBASE64-196))|(1<<(tsqlParserCALLER-196))|(1<<(tsqlParserCAST-196))|(1<<(tsqlParserCATCH-196))|(1<<(tsqlParserCHECKSUM_AGG-196))|(1<<(tsqlParserCOMMITTED-196))|(1<<(tsqlParserCONCAT-196)))) != 0) || (((_la-228)&-(0x1f+1)) == 0 && ((1<<uint((_la-228)))&((1<<(tsqlParserCONTROL-228))|(1<<(tsqlParserCOOKIE-228))|(1<<(tsqlParserCOUNT-228))|(1<<(tsqlParserCOUNT_BIG-228))|(1<<(tsqlParserDELAY-228))|(1<<(tsqlParserDELETED-228))|(1<<(tsqlParserDENSE_RANK-228))|(1<<(tsqlParserDISABLE-228))|(1<<(tsqlParserDYNAMIC-228))|(1<<(tsqlParserENCRYPTION-228))|(1<<(tsqlParserEXPAND-228))|(1<<(tsqlParserFAST-228))|(1<<(tsqlParserFAST_FORWARD-228)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(tsqlParserFIRST-262))|(1<<(tsqlParserFOLLOWING-262))|(1<<(tsqlParserFORCE-262))|(1<<(tsqlParserFORCED-262))|(1<<(tsqlParserFORWARD_ONLY-262))|(1<<(tsqlParserFULLSCAN-262))|(1<<(tsqlParserGLOBAL-262))|(1<<(tsqlParserGO-262))|(1<<(tsqlParserGROUPING-262))|(1<<(tsqlParserGROUPING_ID-262))|(1<<(tsqlParserHASH-262))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-262))|(1<<(tsqlParserIMPERSONATE-262))|(1<<(tsqlParserINSENSITIVE-262))|(1<<(tsqlParserINSERTED-262))|(1<<(tsqlParserISOLATION-262))|(1<<(tsqlParserKEEP-262))|(1<<(tsqlParserKEEPFIXED-262))|(1<<(tsqlParserKEYSET-262))|(1<<(tsqlParserLAST-262))|(1<<(tsqlParserLEVEL-262))|(1<<(tsqlParserLOCAL-262))|(1<<(tsqlParserLOCK_ESCALATION-262))|(1<<(tsqlParserLOGIN-262))|(1<<(tsqlParserLOOP-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(tsqlParserMARK-294))|(1<<(tsqlParserMAX-294))|(1<<(tsqlParserMAXDOP-294))|(1<<(tsqlParserMAXRECURSION-294))|(1<<(tsqlParserMIN-294))|(1<<(tsqlParserMODIFY-294))|(1<<(tsqlParserNAME-294))|(1<<(tsqlParserNOCOUNT-294))|(1<<(tsqlParserNOEXPAND-294))|(1<<(tsqlParserNORECOMPUTE-294))|(1<<(tsqlParserNTILE-294))|(1<<(tsqlParserNUMBER-294))|(1<<(tsqlParserOFFSET-294))|(1<<(tsqlParserONLINE-294))|(1<<(tsqlParserONLY-294))|(1<<(tsqlParserOPTIMISTIC-294))|(1<<(tsqlParserOPTIMIZE-294))|(1<<(tsqlParserOUT-294))|(1<<(tsqlParserOUTPUT-294)))) != 0) || (((_la-326)&-(0x1f+1)) == 0 && ((1<<uint((_la-326)))&((1<<(tsqlParserOWNER-326))|(1<<(tsqlParserPARAMETERIZATION-326))|(1<<(tsqlParserPARTITION-326))|(1<<(tsqlParserPATH-326))|(1<<(tsqlParserPRECEDING-326))|(1<<(tsqlParserPRIOR-326))|(1<<(tsqlParserPRIVILEGES-326))|(1<<(tsqlParserRANGE-326))|(1<<(tsqlParserRANK-326))|(1<<(tsqlParserREADONLY-326))|(1<<(tsqlParserREAD_ONLY-326))|(1<<(tsqlParserRECOMPILE-326))|(1<<(tsqlParserRELATIVE-326))|(1<<(tsqlParserREMOTE-326))|(1<<(tsqlParserREPEATABLE-326))|(1<<(tsqlParserROBUST-326))|(1<<(tsqlParserROOT-326))|(1<<(tsqlParserROW-326))|(1<<(tsqlParserROWGUID-326))|(1<<(tsqlParserROWS-326))|(1<<(tsqlParserROW_NUMBER-326))|(1<<(tsqlParserSAMPLE-326))|(1<<(tsqlParserSCHEMABINDING-326))|(1<<(tsqlParserSCROLL-326))|(1<<(tsqlParserSCROLL_LOCKS-326)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(tsqlParserSELF-359))|(1<<(tsqlParserSERIALIZABLE-359))|(1<<(tsqlParserSIMPLE-359))|(1<<(tsqlParserSIZE-359))|(1<<(tsqlParserSNAPSHOT-359))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-359))|(1<<(tsqlParserSTATIC-359))|(1<<(tsqlParserSTATS_STREAM-359))|(1<<(tsqlParserSTDEV-359))|(1<<(tsqlParserSTDEVP-359))|(1<<(tsqlParserSUM-359))|(1<<(tsqlParserTEXTIMAGE_ON-359))|(1<<(tsqlParserTHROW-359))|(1<<(tsqlParserTIES-359))|(1<<(tsqlParserTIME-359))|(1<<(tsqlParserTRY-359))|(1<<(tsqlParserTYPE-359))|(1<<(tsqlParserTYPE_WARNING-359))|(1<<(tsqlParserUNBOUNDED-359))|(1<<(tsqlParserUNCOMMITTED-359))|(1<<(tsqlParserUNKNOWN-359))|(1<<(tsqlParserUSING-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(tsqlParserVAR-391))|(1<<(tsqlParserVARP-391))|(1<<(tsqlParserVIEWS-391))|(1<<(tsqlParserVIEW_METADATA-391))|(1<<(tsqlParserWORK-391))|(1<<(tsqlParserXML-391))|(1<<(tsqlParserXMLNAMESPACES-391))|(1<<(tsqlParserDOUBLE_QUOTE_ID-391))|(1<<(tsqlParserSQUARE_BRACKET_ID-391))|(1<<(tsqlParserID-391)))) != 0) {
			{
				p.SetState(2993)

				var _x = p.R_id()

				localctx.(*Table_nameContext).schema = _x
			}

		}
		{
			p.SetState(2996)
			p.Match(tsqlParserDOT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 436, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(2998)

			var _x = p.R_id()

			localctx.(*Table_nameContext).schema = _x
		}
		{
			p.SetState(2999)
			p.Match(tsqlParserDOT)
		}

	}
	{
		p.SetState(3003)

		var _x = p.R_id()

		localctx.(*Table_nameContext).table = _x
	}

	return localctx
}

// ISimple_nameContext is an interface to support dynamic dispatch.
type ISimple_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema returns the schema rule contexts.
	GetSchema() IR_idContext

	// GetName returns the name rule contexts.
	GetName() IR_idContext

	// SetSchema sets the schema rule contexts.
	SetSchema(IR_idContext)

	// SetName sets the name rule contexts.
	SetName(IR_idContext)

	// IsSimple_nameContext differentiates from other interfaces.
	IsSimple_nameContext()
}

type Simple_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	schema IR_idContext
	name   IR_idContext
}

func NewEmptySimple_nameContext() *Simple_nameContext {
	var p = new(Simple_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_simple_name
	return p
}

func (*Simple_nameContext) IsSimple_nameContext() {}

func NewSimple_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_nameContext {
	var p = new(Simple_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_simple_name

	return p
}

func (s *Simple_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_nameContext) GetSchema() IR_idContext { return s.schema }

func (s *Simple_nameContext) GetName() IR_idContext { return s.name }

func (s *Simple_nameContext) SetSchema(v IR_idContext) { s.schema = v }

func (s *Simple_nameContext) SetName(v IR_idContext) { s.name = v }

func (s *Simple_nameContext) AllR_id() []IR_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IR_idContext)(nil)).Elem())
	var tst = make([]IR_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IR_idContext)
		}
	}

	return tst
}

func (s *Simple_nameContext) R_id(i int) IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Simple_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSimple_name(s)
	}
}

func (s *Simple_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSimple_name(s)
	}
}

func (p *tsqlParser) Simple_name() (localctx ISimple_nameContext) {
	localctx = NewSimple_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, tsqlParserRULE_simple_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3008)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 437, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3005)

			var _x = p.R_id()

			localctx.(*Simple_nameContext).schema = _x
		}
		{
			p.SetState(3006)
			p.Match(tsqlParserDOT)
		}

	}
	{
		p.SetState(3010)

		var _x = p.R_id()

		localctx.(*Simple_nameContext).name = _x
	}

	return localctx
}

// IFunc_proc_nameContext is an interface to support dynamic dispatch.
type IFunc_proc_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase returns the database rule contexts.
	GetDatabase() IR_idContext

	// GetSchema returns the schema rule contexts.
	GetSchema() IR_idContext

	// GetProcedure returns the procedure rule contexts.
	GetProcedure() IR_idContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IR_idContext)

	// SetSchema sets the schema rule contexts.
	SetSchema(IR_idContext)

	// SetProcedure sets the procedure rule contexts.
	SetProcedure(IR_idContext)

	// IsFunc_proc_nameContext differentiates from other interfaces.
	IsFunc_proc_nameContext()
}

type Func_proc_nameContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	database  IR_idContext
	schema    IR_idContext
	procedure IR_idContext
}

func NewEmptyFunc_proc_nameContext() *Func_proc_nameContext {
	var p = new(Func_proc_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_func_proc_name
	return p
}

func (*Func_proc_nameContext) IsFunc_proc_nameContext() {}

func NewFunc_proc_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Func_proc_nameContext {
	var p = new(Func_proc_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_func_proc_name

	return p
}

func (s *Func_proc_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Func_proc_nameContext) GetDatabase() IR_idContext { return s.database }

func (s *Func_proc_nameContext) GetSchema() IR_idContext { return s.schema }

func (s *Func_proc_nameContext) GetProcedure() IR_idContext { return s.procedure }

func (s *Func_proc_nameContext) SetDatabase(v IR_idContext) { s.database = v }

func (s *Func_proc_nameContext) SetSchema(v IR_idContext) { s.schema = v }

func (s *Func_proc_nameContext) SetProcedure(v IR_idContext) { s.procedure = v }

func (s *Func_proc_nameContext) AllR_id() []IR_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IR_idContext)(nil)).Elem())
	var tst = make([]IR_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IR_idContext)
		}
	}

	return tst
}

func (s *Func_proc_nameContext) R_id(i int) IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Func_proc_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Func_proc_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Func_proc_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFunc_proc_name(s)
	}
}

func (s *Func_proc_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFunc_proc_name(s)
	}
}

func (p *tsqlParser) Func_proc_name() (localctx IFunc_proc_nameContext) {
	localctx = NewFunc_proc_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, tsqlParserRULE_func_proc_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3022)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 439, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3012)

			var _x = p.R_id()

			localctx.(*Func_proc_nameContext).database = _x
		}
		{
			p.SetState(3013)
			p.Match(tsqlParserDOT)
		}
		p.SetState(3015)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserFORCESEEK || _la == tsqlParserNEXT || (((_la-196)&-(0x1f+1)) == 0 && ((1<<uint((_la-196)))&((1<<(tsqlParserABSOLUTE-196))|(1<<(tsqlParserAPPLY-196))|(1<<(tsqlParserAUTO-196))|(1<<(tsqlParserAVG-196))|(1<<(tsqlParserBASE64-196))|(1<<(tsqlParserCALLER-196))|(1<<(tsqlParserCAST-196))|(1<<(tsqlParserCATCH-196))|(1<<(tsqlParserCHECKSUM_AGG-196))|(1<<(tsqlParserCOMMITTED-196))|(1<<(tsqlParserCONCAT-196)))) != 0) || (((_la-228)&-(0x1f+1)) == 0 && ((1<<uint((_la-228)))&((1<<(tsqlParserCONTROL-228))|(1<<(tsqlParserCOOKIE-228))|(1<<(tsqlParserCOUNT-228))|(1<<(tsqlParserCOUNT_BIG-228))|(1<<(tsqlParserDELAY-228))|(1<<(tsqlParserDELETED-228))|(1<<(tsqlParserDENSE_RANK-228))|(1<<(tsqlParserDISABLE-228))|(1<<(tsqlParserDYNAMIC-228))|(1<<(tsqlParserENCRYPTION-228))|(1<<(tsqlParserEXPAND-228))|(1<<(tsqlParserFAST-228))|(1<<(tsqlParserFAST_FORWARD-228)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(tsqlParserFIRST-262))|(1<<(tsqlParserFOLLOWING-262))|(1<<(tsqlParserFORCE-262))|(1<<(tsqlParserFORCED-262))|(1<<(tsqlParserFORWARD_ONLY-262))|(1<<(tsqlParserFULLSCAN-262))|(1<<(tsqlParserGLOBAL-262))|(1<<(tsqlParserGO-262))|(1<<(tsqlParserGROUPING-262))|(1<<(tsqlParserGROUPING_ID-262))|(1<<(tsqlParserHASH-262))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-262))|(1<<(tsqlParserIMPERSONATE-262))|(1<<(tsqlParserINSENSITIVE-262))|(1<<(tsqlParserINSERTED-262))|(1<<(tsqlParserISOLATION-262))|(1<<(tsqlParserKEEP-262))|(1<<(tsqlParserKEEPFIXED-262))|(1<<(tsqlParserKEYSET-262))|(1<<(tsqlParserLAST-262))|(1<<(tsqlParserLEVEL-262))|(1<<(tsqlParserLOCAL-262))|(1<<(tsqlParserLOCK_ESCALATION-262))|(1<<(tsqlParserLOGIN-262))|(1<<(tsqlParserLOOP-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(tsqlParserMARK-294))|(1<<(tsqlParserMAX-294))|(1<<(tsqlParserMAXDOP-294))|(1<<(tsqlParserMAXRECURSION-294))|(1<<(tsqlParserMIN-294))|(1<<(tsqlParserMODIFY-294))|(1<<(tsqlParserNAME-294))|(1<<(tsqlParserNOCOUNT-294))|(1<<(tsqlParserNOEXPAND-294))|(1<<(tsqlParserNORECOMPUTE-294))|(1<<(tsqlParserNTILE-294))|(1<<(tsqlParserNUMBER-294))|(1<<(tsqlParserOFFSET-294))|(1<<(tsqlParserONLINE-294))|(1<<(tsqlParserONLY-294))|(1<<(tsqlParserOPTIMISTIC-294))|(1<<(tsqlParserOPTIMIZE-294))|(1<<(tsqlParserOUT-294))|(1<<(tsqlParserOUTPUT-294)))) != 0) || (((_la-326)&-(0x1f+1)) == 0 && ((1<<uint((_la-326)))&((1<<(tsqlParserOWNER-326))|(1<<(tsqlParserPARAMETERIZATION-326))|(1<<(tsqlParserPARTITION-326))|(1<<(tsqlParserPATH-326))|(1<<(tsqlParserPRECEDING-326))|(1<<(tsqlParserPRIOR-326))|(1<<(tsqlParserPRIVILEGES-326))|(1<<(tsqlParserRANGE-326))|(1<<(tsqlParserRANK-326))|(1<<(tsqlParserREADONLY-326))|(1<<(tsqlParserREAD_ONLY-326))|(1<<(tsqlParserRECOMPILE-326))|(1<<(tsqlParserRELATIVE-326))|(1<<(tsqlParserREMOTE-326))|(1<<(tsqlParserREPEATABLE-326))|(1<<(tsqlParserROBUST-326))|(1<<(tsqlParserROOT-326))|(1<<(tsqlParserROW-326))|(1<<(tsqlParserROWGUID-326))|(1<<(tsqlParserROWS-326))|(1<<(tsqlParserROW_NUMBER-326))|(1<<(tsqlParserSAMPLE-326))|(1<<(tsqlParserSCHEMABINDING-326))|(1<<(tsqlParserSCROLL-326))|(1<<(tsqlParserSCROLL_LOCKS-326)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(tsqlParserSELF-359))|(1<<(tsqlParserSERIALIZABLE-359))|(1<<(tsqlParserSIMPLE-359))|(1<<(tsqlParserSIZE-359))|(1<<(tsqlParserSNAPSHOT-359))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-359))|(1<<(tsqlParserSTATIC-359))|(1<<(tsqlParserSTATS_STREAM-359))|(1<<(tsqlParserSTDEV-359))|(1<<(tsqlParserSTDEVP-359))|(1<<(tsqlParserSUM-359))|(1<<(tsqlParserTEXTIMAGE_ON-359))|(1<<(tsqlParserTHROW-359))|(1<<(tsqlParserTIES-359))|(1<<(tsqlParserTIME-359))|(1<<(tsqlParserTRY-359))|(1<<(tsqlParserTYPE-359))|(1<<(tsqlParserTYPE_WARNING-359))|(1<<(tsqlParserUNBOUNDED-359))|(1<<(tsqlParserUNCOMMITTED-359))|(1<<(tsqlParserUNKNOWN-359))|(1<<(tsqlParserUSING-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(tsqlParserVAR-391))|(1<<(tsqlParserVARP-391))|(1<<(tsqlParserVIEWS-391))|(1<<(tsqlParserVIEW_METADATA-391))|(1<<(tsqlParserWORK-391))|(1<<(tsqlParserXML-391))|(1<<(tsqlParserXMLNAMESPACES-391))|(1<<(tsqlParserDOUBLE_QUOTE_ID-391))|(1<<(tsqlParserSQUARE_BRACKET_ID-391))|(1<<(tsqlParserID-391)))) != 0) {
			{
				p.SetState(3014)

				var _x = p.R_id()

				localctx.(*Func_proc_nameContext).schema = _x
			}

		}
		{
			p.SetState(3017)
			p.Match(tsqlParserDOT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 439, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(3019)

			var _x = p.R_id()

			localctx.(*Func_proc_nameContext).schema = _x
		}

		{
			p.SetState(3020)
			p.Match(tsqlParserDOT)
		}

	}
	{
		p.SetState(3024)

		var _x = p.R_id()

		localctx.(*Func_proc_nameContext).procedure = _x
	}

	return localctx
}

// IDdl_objectContext is an interface to support dynamic dispatch.
type IDdl_objectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDdl_objectContext differentiates from other interfaces.
	IsDdl_objectContext()
}

type Ddl_objectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDdl_objectContext() *Ddl_objectContext {
	var p = new(Ddl_objectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_ddl_object
	return p
}

func (*Ddl_objectContext) IsDdl_objectContext() {}

func NewDdl_objectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ddl_objectContext {
	var p = new(Ddl_objectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_ddl_object

	return p
}

func (s *Ddl_objectContext) GetParser() antlr.Parser { return s.parser }

func (s *Ddl_objectContext) Full_table_name() IFull_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_table_nameContext)
}

func (s *Ddl_objectContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Ddl_objectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ddl_objectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ddl_objectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDdl_object(s)
	}
}

func (s *Ddl_objectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDdl_object(s)
	}
}

func (p *tsqlParser) Ddl_object() (localctx IDdl_objectContext) {
	localctx = NewDdl_objectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, tsqlParserRULE_ddl_object)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3028)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3026)
			p.Full_table_name()
		}

	case tsqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3027)
			p.Match(tsqlParserLOCAL_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFull_column_nameContext is an interface to support dynamic dispatch.
type IFull_column_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable returns the table rule contexts.
	GetTable() ITable_nameContext

	// GetName returns the name rule contexts.
	GetName() IR_idContext

	// SetTable sets the table rule contexts.
	SetTable(ITable_nameContext)

	// SetName sets the name rule contexts.
	SetName(IR_idContext)

	// IsFull_column_nameContext differentiates from other interfaces.
	IsFull_column_nameContext()
}

type Full_column_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	table  ITable_nameContext
	name   IR_idContext
}

func NewEmptyFull_column_nameContext() *Full_column_nameContext {
	var p = new(Full_column_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_full_column_name
	return p
}

func (*Full_column_nameContext) IsFull_column_nameContext() {}

func NewFull_column_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_column_nameContext {
	var p = new(Full_column_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_full_column_name

	return p
}

func (s *Full_column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_column_nameContext) GetTable() ITable_nameContext { return s.table }

func (s *Full_column_nameContext) GetName() IR_idContext { return s.name }

func (s *Full_column_nameContext) SetTable(v ITable_nameContext) { s.table = v }

func (s *Full_column_nameContext) SetName(v IR_idContext) { s.name = v }

func (s *Full_column_nameContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Full_column_nameContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Full_column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Full_column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFull_column_name(s)
	}
}

func (s *Full_column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFull_column_name(s)
	}
}

func (p *tsqlParser) Full_column_name() (localctx IFull_column_nameContext) {
	localctx = NewFull_column_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, tsqlParserRULE_full_column_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3033)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 441, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3030)

			var _x = p.Table_name()

			localctx.(*Full_column_nameContext).table = _x
		}
		{
			p.SetState(3031)
			p.Match(tsqlParserDOT)
		}

	}
	{
		p.SetState(3035)

		var _x = p.R_id()

		localctx.(*Full_column_nameContext).name = _x
	}

	return localctx
}

// IColumn_name_listContext is an interface to support dynamic dispatch.
type IColumn_name_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_name_listContext differentiates from other interfaces.
	IsColumn_name_listContext()
}

type Column_name_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_name_listContext() *Column_name_listContext {
	var p = new(Column_name_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_column_name_list
	return p
}

func (*Column_name_listContext) IsColumn_name_listContext() {}

func NewColumn_name_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_name_listContext {
	var p = new(Column_name_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_column_name_list

	return p
}

func (s *Column_name_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_name_listContext) AllR_id() []IR_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IR_idContext)(nil)).Elem())
	var tst = make([]IR_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IR_idContext)
		}
	}

	return tst
}

func (s *Column_name_listContext) R_id(i int) IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Column_name_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_name_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_name_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterColumn_name_list(s)
	}
}

func (s *Column_name_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitColumn_name_list(s)
	}
}

func (p *tsqlParser) Column_name_list() (localctx IColumn_name_listContext) {
	localctx = NewColumn_name_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, tsqlParserRULE_column_name_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3037)
		p.R_id()
	}
	p.SetState(3042)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(3038)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(3039)
			p.R_id()
		}

		p.SetState(3044)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICursor_nameContext is an interface to support dynamic dispatch.
type ICursor_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursor_nameContext differentiates from other interfaces.
	IsCursor_nameContext()
}

type Cursor_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursor_nameContext() *Cursor_nameContext {
	var p = new(Cursor_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_cursor_name
	return p
}

func (*Cursor_nameContext) IsCursor_nameContext() {}

func NewCursor_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cursor_nameContext {
	var p = new(Cursor_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_cursor_name

	return p
}

func (s *Cursor_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Cursor_nameContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Cursor_nameContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Cursor_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cursor_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cursor_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCursor_name(s)
	}
}

func (s *Cursor_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCursor_name(s)
	}
}

func (p *tsqlParser) Cursor_name() (localctx ICursor_nameContext) {
	localctx = NewCursor_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, tsqlParserRULE_cursor_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3047)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3045)
			p.R_id()
		}

	case tsqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3046)
			p.Match(tsqlParserLOCAL_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOn_offContext is an interface to support dynamic dispatch.
type IOn_offContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOn_offContext differentiates from other interfaces.
	IsOn_offContext()
}

type On_offContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_offContext() *On_offContext {
	var p = new(On_offContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_on_off
	return p
}

func (*On_offContext) IsOn_offContext() {}

func NewOn_offContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_offContext {
	var p = new(On_offContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_on_off

	return p
}

func (s *On_offContext) GetParser() antlr.Parser { return s.parser }

func (s *On_offContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *On_offContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *On_offContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_offContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_offContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOn_off(s)
	}
}

func (s *On_offContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOn_off(s)
	}
}

func (p *tsqlParser) On_off() (localctx IOn_offContext) {
	localctx = NewOn_offContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, tsqlParserRULE_on_off)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3049)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserOFF || _la == tsqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IClusteredContext is an interface to support dynamic dispatch.
type IClusteredContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClusteredContext differentiates from other interfaces.
	IsClusteredContext()
}

type ClusteredContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClusteredContext() *ClusteredContext {
	var p = new(ClusteredContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_clustered
	return p
}

func (*ClusteredContext) IsClusteredContext() {}

func NewClusteredContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClusteredContext {
	var p = new(ClusteredContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_clustered

	return p
}

func (s *ClusteredContext) GetParser() antlr.Parser { return s.parser }

func (s *ClusteredContext) CLUSTERED() antlr.TerminalNode {
	return s.GetToken(tsqlParserCLUSTERED, 0)
}

func (s *ClusteredContext) NONCLUSTERED() antlr.TerminalNode {
	return s.GetToken(tsqlParserNONCLUSTERED, 0)
}

func (s *ClusteredContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClusteredContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClusteredContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterClustered(s)
	}
}

func (s *ClusteredContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitClustered(s)
	}
}

func (p *tsqlParser) Clustered() (localctx IClusteredContext) {
	localctx = NewClusteredContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, tsqlParserRULE_clustered)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3051)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserCLUSTERED || _la == tsqlParserNONCLUSTERED) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INull_notnullContext is an interface to support dynamic dispatch.
type INull_notnullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNull_notnullContext differentiates from other interfaces.
	IsNull_notnullContext()
}

type Null_notnullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNull_notnullContext() *Null_notnullContext {
	var p = new(Null_notnullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_null_notnull
	return p
}

func (*Null_notnullContext) IsNull_notnullContext() {}

func NewNull_notnullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Null_notnullContext {
	var p = new(Null_notnullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_null_notnull

	return p
}

func (s *Null_notnullContext) GetParser() antlr.Parser { return s.parser }

func (s *Null_notnullContext) NULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserNULL, 0)
}

func (s *Null_notnullContext) NOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOT, 0)
}

func (s *Null_notnullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Null_notnullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Null_notnullContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterNull_notnull(s)
	}
}

func (s *Null_notnullContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitNull_notnull(s)
	}
}

func (p *tsqlParser) Null_notnull() (localctx INull_notnullContext) {
	localctx = NewNull_notnullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, tsqlParserRULE_null_notnull)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3054)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserNOT {
		{
			p.SetState(3053)
			p.Match(tsqlParserNOT)
		}

	}
	{
		p.SetState(3056)
		p.Match(tsqlParserNULL)
	}

	return localctx
}

// IScalar_function_nameContext is an interface to support dynamic dispatch.
type IScalar_function_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScalar_function_nameContext differentiates from other interfaces.
	IsScalar_function_nameContext()
}

type Scalar_function_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScalar_function_nameContext() *Scalar_function_nameContext {
	var p = new(Scalar_function_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_scalar_function_name
	return p
}

func (*Scalar_function_nameContext) IsScalar_function_nameContext() {}

func NewScalar_function_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Scalar_function_nameContext {
	var p = new(Scalar_function_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_scalar_function_name

	return p
}

func (s *Scalar_function_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Scalar_function_nameContext) Func_proc_name() IFunc_proc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_proc_nameContext)
}

func (s *Scalar_function_nameContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(tsqlParserRIGHT, 0)
}

func (s *Scalar_function_nameContext) LEFT() antlr.TerminalNode {
	return s.GetToken(tsqlParserLEFT, 0)
}

func (s *Scalar_function_nameContext) BINARY_CHECKSUM() antlr.TerminalNode {
	return s.GetToken(tsqlParserBINARY_CHECKSUM, 0)
}

func (s *Scalar_function_nameContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECKSUM, 0)
}

func (s *Scalar_function_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Scalar_function_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Scalar_function_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterScalar_function_name(s)
	}
}

func (s *Scalar_function_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitScalar_function_name(s)
	}
}

func (p *tsqlParser) Scalar_function_name() (localctx IScalar_function_nameContext) {
	localctx = NewScalar_function_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, tsqlParserRULE_scalar_function_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3063)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3058)
			p.Func_proc_name()
		}

	case tsqlParserRIGHT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3059)
			p.Match(tsqlParserRIGHT)
		}

	case tsqlParserLEFT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3060)
			p.Match(tsqlParserLEFT)
		}

	case tsqlParserBINARY_CHECKSUM:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3061)
			p.Match(tsqlParserBINARY_CHECKSUM)
		}

	case tsqlParserCHECKSUM:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3062)
			p.Match(tsqlParserCHECKSUM)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IData_typeContext is an interface to support dynamic dispatch.
type IData_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_typeContext differentiates from other interfaces.
	IsData_typeContext()
}

type Data_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_typeContext() *Data_typeContext {
	var p = new(Data_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_data_type
	return p
}

func (*Data_typeContext) IsData_typeContext() {}

func NewData_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_typeContext {
	var p = new(Data_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_data_type

	return p
}

func (s *Data_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_typeContext) R_id() IR_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_idContext)
}

func (s *Data_typeContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(tsqlParserIDENTITY, 0)
}

func (s *Data_typeContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserDECIMAL)
}

func (s *Data_typeContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, i)
}

func (s *Data_typeContext) MAX() antlr.TerminalNode {
	return s.GetToken(tsqlParserMAX, 0)
}

func (s *Data_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterData_type(s)
	}
}

func (s *Data_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitData_type(s)
	}
}

func (p *tsqlParser) Data_type() (localctx IData_typeContext) {
	localctx = NewData_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, tsqlParserRULE_data_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3065)
		p.R_id()
	}
	p.SetState(3067)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 446, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3066)
			p.Match(tsqlParserIDENTITY)
		}

	}
	p.SetState(3076)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 448, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3069)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(3070)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserMAX || _la == tsqlParserDECIMAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(3073)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCOMMA {
			{
				p.SetState(3071)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(3072)
				p.Match(tsqlParserDECIMAL)
			}

		}
		{
			p.SetState(3075)
			p.Match(tsqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IDefault_valueContext is an interface to support dynamic dispatch.
type IDefault_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefault_valueContext differentiates from other interfaces.
	IsDefault_valueContext()
}

type Default_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefault_valueContext() *Default_valueContext {
	var p = new(Default_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_default_value
	return p
}

func (*Default_valueContext) IsDefault_valueContext() {}

func NewDefault_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Default_valueContext {
	var p = new(Default_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_default_value

	return p
}

func (s *Default_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Default_valueContext) NULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserNULL, 0)
}

func (s *Default_valueContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Default_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Default_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Default_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDefault_value(s)
	}
}

func (s *Default_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDefault_value(s)
	}
}

func (p *tsqlParser) Default_value() (localctx IDefault_valueContext) {
	localctx = NewDefault_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, tsqlParserRULE_default_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3080)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserNULL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3078)
			p.Match(tsqlParserNULL)
		}

	case tsqlParserDECIMAL, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserPLUS, tsqlParserMINUS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3079)
			p.Constant()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstantContext is an interface to support dynamic dispatch.
type IConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDollar returns the dollar token.
	GetDollar() antlr.Token

	// SetDollar sets the dollar token.
	SetDollar(antlr.Token)

	// IsConstantContext differentiates from other interfaces.
	IsConstantContext()
}

type ConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	dollar antlr.Token
}

func NewEmptyConstantContext() *ConstantContext {
	var p = new(ConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_constant
	return p
}

func (*ConstantContext) IsConstantContext() {}

func NewConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantContext {
	var p = new(ConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_constant

	return p
}

func (s *ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantContext) GetDollar() antlr.Token { return s.dollar }

func (s *ConstantContext) SetDollar(v antlr.Token) { s.dollar = v }

func (s *ConstantContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *ConstantContext) BINARY() antlr.TerminalNode {
	return s.GetToken(tsqlParserBINARY, 0)
}

func (s *ConstantContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *ConstantContext) Sign() ISignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignContext)
}

func (s *ConstantContext) REAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAL, 0)
}

func (s *ConstantContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(tsqlParserFLOAT, 0)
}

func (s *ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterConstant(s)
	}
}

func (s *ConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitConstant(s)
	}
}

func (p *tsqlParser) Constant() (localctx IConstantContext) {
	localctx = NewConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, tsqlParserRULE_constant)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3097)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 453, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3082)
			p.Match(tsqlParserSTRING)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3083)
			p.Match(tsqlParserBINARY)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(3085)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserPLUS || _la == tsqlParserMINUS {
			{
				p.SetState(3084)
				p.Sign()
			}

		}
		{
			p.SetState(3087)
			p.Match(tsqlParserDECIMAL)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(3089)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserPLUS || _la == tsqlParserMINUS {
			{
				p.SetState(3088)
				p.Sign()
			}

		}
		{
			p.SetState(3091)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserFLOAT || _la == tsqlParserREAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(3093)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserPLUS || _la == tsqlParserMINUS {
			{
				p.SetState(3092)
				p.Sign()
			}

		}
		{
			p.SetState(3095)

			var _m = p.Match(tsqlParserDOLLAR)

			localctx.(*ConstantContext).dollar = _m
		}
		{
			p.SetState(3096)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserDECIMAL || _la == tsqlParserFLOAT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// ISignContext is an interface to support dynamic dispatch.
type ISignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSignContext differentiates from other interfaces.
	IsSignContext()
}

type SignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySignContext() *SignContext {
	var p = new(SignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_sign
	return p
}

func (*SignContext) IsSignContext() {}

func NewSignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignContext {
	var p = new(SignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_sign

	return p
}

func (s *SignContext) GetParser() antlr.Parser { return s.parser }
func (s *SignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSign(s)
	}
}

func (s *SignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSign(s)
	}
}

func (p *tsqlParser) Sign() (localctx ISignContext) {
	localctx = NewSignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, tsqlParserRULE_sign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3099)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserPLUS || _la == tsqlParserMINUS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IR_idContext is an interface to support dynamic dispatch.
type IR_idContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsR_idContext differentiates from other interfaces.
	IsR_idContext()
}

type R_idContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyR_idContext() *R_idContext {
	var p = new(R_idContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_r_id
	return p
}

func (*R_idContext) IsR_idContext() {}

func NewR_idContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *R_idContext {
	var p = new(R_idContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_r_id

	return p
}

func (s *R_idContext) GetParser() antlr.Parser { return s.parser }

func (s *R_idContext) Simple_id() ISimple_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_idContext)
}

func (s *R_idContext) DOUBLE_QUOTE_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserDOUBLE_QUOTE_ID, 0)
}

func (s *R_idContext) SQUARE_BRACKET_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserSQUARE_BRACKET_ID, 0)
}

func (s *R_idContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *R_idContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *R_idContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterR_id(s)
	}
}

func (s *R_idContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitR_id(s)
	}
}

func (p *tsqlParser) R_id() (localctx IR_idContext) {
	localctx = NewR_idContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, tsqlParserRULE_r_id)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3104)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserNEXT, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSIZE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3101)
			p.Simple_id()
		}

	case tsqlParserDOUBLE_QUOTE_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3102)
			p.Match(tsqlParserDOUBLE_QUOTE_ID)
		}

	case tsqlParserSQUARE_BRACKET_ID:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3103)
			p.Match(tsqlParserSQUARE_BRACKET_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISimple_idContext is an interface to support dynamic dispatch.
type ISimple_idContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimple_idContext differentiates from other interfaces.
	IsSimple_idContext()
}

type Simple_idContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_idContext() *Simple_idContext {
	var p = new(Simple_idContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_simple_id
	return p
}

func (*Simple_idContext) IsSimple_idContext() {}

func NewSimple_idContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_idContext {
	var p = new(Simple_idContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_simple_id

	return p
}

func (s *Simple_idContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_idContext) ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserID, 0)
}

func (s *Simple_idContext) ABSOLUTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserABSOLUTE, 0)
}

func (s *Simple_idContext) APPLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserAPPLY, 0)
}

func (s *Simple_idContext) AUTO() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO, 0)
}

func (s *Simple_idContext) AVG() antlr.TerminalNode {
	return s.GetToken(tsqlParserAVG, 0)
}

func (s *Simple_idContext) BASE64() antlr.TerminalNode {
	return s.GetToken(tsqlParserBASE64, 0)
}

func (s *Simple_idContext) CALLER() antlr.TerminalNode {
	return s.GetToken(tsqlParserCALLER, 0)
}

func (s *Simple_idContext) CAST() antlr.TerminalNode {
	return s.GetToken(tsqlParserCAST, 0)
}

func (s *Simple_idContext) CATCH() antlr.TerminalNode {
	return s.GetToken(tsqlParserCATCH, 0)
}

func (s *Simple_idContext) CHECKSUM_AGG() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECKSUM_AGG, 0)
}

func (s *Simple_idContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOMMITTED, 0)
}

func (s *Simple_idContext) CONCAT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONCAT, 0)
}

func (s *Simple_idContext) CONTROL() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONTROL, 0)
}

func (s *Simple_idContext) COOKIE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOOKIE, 0)
}

func (s *Simple_idContext) COUNT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOUNT, 0)
}

func (s *Simple_idContext) COUNT_BIG() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOUNT_BIG, 0)
}

func (s *Simple_idContext) DELAY() antlr.TerminalNode {
	return s.GetToken(tsqlParserDELAY, 0)
}

func (s *Simple_idContext) DELETED() antlr.TerminalNode {
	return s.GetToken(tsqlParserDELETED, 0)
}

func (s *Simple_idContext) DENSE_RANK() antlr.TerminalNode {
	return s.GetToken(tsqlParserDENSE_RANK, 0)
}

func (s *Simple_idContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDISABLE, 0)
}

func (s *Simple_idContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(tsqlParserDYNAMIC, 0)
}

func (s *Simple_idContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserENCRYPTION, 0)
}

func (s *Simple_idContext) EXPAND() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXPAND, 0)
}

func (s *Simple_idContext) FAST() antlr.TerminalNode {
	return s.GetToken(tsqlParserFAST, 0)
}

func (s *Simple_idContext) FAST_FORWARD() antlr.TerminalNode {
	return s.GetToken(tsqlParserFAST_FORWARD, 0)
}

func (s *Simple_idContext) FIRST() antlr.TerminalNode {
	return s.GetToken(tsqlParserFIRST, 0)
}

func (s *Simple_idContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOLLOWING, 0)
}

func (s *Simple_idContext) FORCE() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORCE, 0)
}

func (s *Simple_idContext) FORCESEEK() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORCESEEK, 0)
}

func (s *Simple_idContext) FORWARD_ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORWARD_ONLY, 0)
}

func (s *Simple_idContext) FULLSCAN() antlr.TerminalNode {
	return s.GetToken(tsqlParserFULLSCAN, 0)
}

func (s *Simple_idContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserGLOBAL, 0)
}

func (s *Simple_idContext) GO() antlr.TerminalNode {
	return s.GetToken(tsqlParserGO, 0)
}

func (s *Simple_idContext) GROUPING() antlr.TerminalNode {
	return s.GetToken(tsqlParserGROUPING, 0)
}

func (s *Simple_idContext) GROUPING_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserGROUPING_ID, 0)
}

func (s *Simple_idContext) HASH() antlr.TerminalNode {
	return s.GetToken(tsqlParserHASH, 0)
}

func (s *Simple_idContext) IMPERSONATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserIMPERSONATE, 0)
}

func (s *Simple_idContext) INSENSITIVE() antlr.TerminalNode {
	return s.GetToken(tsqlParserINSENSITIVE, 0)
}

func (s *Simple_idContext) INSERTED() antlr.TerminalNode {
	return s.GetToken(tsqlParserINSERTED, 0)
}

func (s *Simple_idContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserISOLATION, 0)
}

func (s *Simple_idContext) KEEP() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEEP, 0)
}

func (s *Simple_idContext) KEEPFIXED() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEEPFIXED, 0)
}

func (s *Simple_idContext) FORCED() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORCED, 0)
}

func (s *Simple_idContext) KEYSET() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEYSET, 0)
}

func (s *Simple_idContext) IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() antlr.TerminalNode {
	return s.GetToken(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)
}

func (s *Simple_idContext) LAST() antlr.TerminalNode {
	return s.GetToken(tsqlParserLAST, 0)
}

func (s *Simple_idContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(tsqlParserLEVEL, 0)
}

func (s *Simple_idContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL, 0)
}

func (s *Simple_idContext) LOCK_ESCALATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCK_ESCALATION, 0)
}

func (s *Simple_idContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOGIN, 0)
}

func (s *Simple_idContext) LOOP() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOOP, 0)
}

func (s *Simple_idContext) MARK() antlr.TerminalNode {
	return s.GetToken(tsqlParserMARK, 0)
}

func (s *Simple_idContext) MAX() antlr.TerminalNode {
	return s.GetToken(tsqlParserMAX, 0)
}

func (s *Simple_idContext) MAXDOP() antlr.TerminalNode {
	return s.GetToken(tsqlParserMAXDOP, 0)
}

func (s *Simple_idContext) MAXRECURSION() antlr.TerminalNode {
	return s.GetToken(tsqlParserMAXRECURSION, 0)
}

func (s *Simple_idContext) MIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserMIN, 0)
}

func (s *Simple_idContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(tsqlParserMODIFY, 0)
}

func (s *Simple_idContext) NAME() antlr.TerminalNode {
	return s.GetToken(tsqlParserNAME, 0)
}

func (s *Simple_idContext) NEXT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNEXT, 0)
}

func (s *Simple_idContext) NOCOUNT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOCOUNT, 0)
}

func (s *Simple_idContext) NOEXPAND() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOEXPAND, 0)
}

func (s *Simple_idContext) NORECOMPUTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserNORECOMPUTE, 0)
}

func (s *Simple_idContext) NTILE() antlr.TerminalNode {
	return s.GetToken(tsqlParserNTILE, 0)
}

func (s *Simple_idContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(tsqlParserNUMBER, 0)
}

func (s *Simple_idContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFFSET, 0)
}

func (s *Simple_idContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(tsqlParserONLINE, 0)
}

func (s *Simple_idContext) ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserONLY, 0)
}

func (s *Simple_idContext) OPTIMISTIC() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPTIMISTIC, 0)
}

func (s *Simple_idContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPTIMIZE, 0)
}

func (s *Simple_idContext) OUT() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUT, 0)
}

func (s *Simple_idContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUTPUT, 0)
}

func (s *Simple_idContext) OWNER() antlr.TerminalNode {
	return s.GetToken(tsqlParserOWNER, 0)
}

func (s *Simple_idContext) PARAMETERIZATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserPARAMETERIZATION, 0)
}

func (s *Simple_idContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(tsqlParserPARTITION, 0)
}

func (s *Simple_idContext) PATH() antlr.TerminalNode {
	return s.GetToken(tsqlParserPATH, 0)
}

func (s *Simple_idContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRECEDING, 0)
}

func (s *Simple_idContext) PRIOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRIOR, 0)
}

func (s *Simple_idContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRIVILEGES, 0)
}

func (s *Simple_idContext) RANGE() antlr.TerminalNode {
	return s.GetToken(tsqlParserRANGE, 0)
}

func (s *Simple_idContext) RANK() antlr.TerminalNode {
	return s.GetToken(tsqlParserRANK, 0)
}

func (s *Simple_idContext) READONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserREADONLY, 0)
}

func (s *Simple_idContext) READ_ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD_ONLY, 0)
}

func (s *Simple_idContext) RECOMPILE() antlr.TerminalNode {
	return s.GetToken(tsqlParserRECOMPILE, 0)
}

func (s *Simple_idContext) RELATIVE() antlr.TerminalNode {
	return s.GetToken(tsqlParserRELATIVE, 0)
}

func (s *Simple_idContext) REMOTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserREMOTE, 0)
}

func (s *Simple_idContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserREPEATABLE, 0)
}

func (s *Simple_idContext) ROBUST() antlr.TerminalNode {
	return s.GetToken(tsqlParserROBUST, 0)
}

func (s *Simple_idContext) ROOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserROOT, 0)
}

func (s *Simple_idContext) ROW() antlr.TerminalNode {
	return s.GetToken(tsqlParserROW, 0)
}

func (s *Simple_idContext) ROWGUID() antlr.TerminalNode {
	return s.GetToken(tsqlParserROWGUID, 0)
}

func (s *Simple_idContext) ROWS() antlr.TerminalNode {
	return s.GetToken(tsqlParserROWS, 0)
}

func (s *Simple_idContext) ROW_NUMBER() antlr.TerminalNode {
	return s.GetToken(tsqlParserROW_NUMBER, 0)
}

func (s *Simple_idContext) SAMPLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSAMPLE, 0)
}

func (s *Simple_idContext) SCHEMABINDING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSCHEMABINDING, 0)
}

func (s *Simple_idContext) SCROLL() antlr.TerminalNode {
	return s.GetToken(tsqlParserSCROLL, 0)
}

func (s *Simple_idContext) SCROLL_LOCKS() antlr.TerminalNode {
	return s.GetToken(tsqlParserSCROLL_LOCKS, 0)
}

func (s *Simple_idContext) SELF() antlr.TerminalNode {
	return s.GetToken(tsqlParserSELF, 0)
}

func (s *Simple_idContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSERIALIZABLE, 0)
}

func (s *Simple_idContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSIMPLE, 0)
}

func (s *Simple_idContext) SIZE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSIZE, 0)
}

func (s *Simple_idContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserSNAPSHOT, 0)
}

func (s *Simple_idContext) SPATIAL_WINDOW_MAX_CELLS() antlr.TerminalNode {
	return s.GetToken(tsqlParserSPATIAL_WINDOW_MAX_CELLS, 0)
}

func (s *Simple_idContext) STATIC() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTATIC, 0)
}

func (s *Simple_idContext) STATS_STREAM() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTATS_STREAM, 0)
}

func (s *Simple_idContext) STDEV() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTDEV, 0)
}

func (s *Simple_idContext) STDEVP() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTDEVP, 0)
}

func (s *Simple_idContext) SUM() antlr.TerminalNode {
	return s.GetToken(tsqlParserSUM, 0)
}

func (s *Simple_idContext) TEXTIMAGE_ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserTEXTIMAGE_ON, 0)
}

func (s *Simple_idContext) THROW() antlr.TerminalNode {
	return s.GetToken(tsqlParserTHROW, 0)
}

func (s *Simple_idContext) TIES() antlr.TerminalNode {
	return s.GetToken(tsqlParserTIES, 0)
}

func (s *Simple_idContext) TIME() antlr.TerminalNode {
	return s.GetToken(tsqlParserTIME, 0)
}

func (s *Simple_idContext) TRY() antlr.TerminalNode {
	return s.GetToken(tsqlParserTRY, 0)
}

func (s *Simple_idContext) TYPE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTYPE, 0)
}

func (s *Simple_idContext) TYPE_WARNING() antlr.TerminalNode {
	return s.GetToken(tsqlParserTYPE_WARNING, 0)
}

func (s *Simple_idContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNBOUNDED, 0)
}

func (s *Simple_idContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNCOMMITTED, 0)
}

func (s *Simple_idContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNKNOWN, 0)
}

func (s *Simple_idContext) USING() antlr.TerminalNode {
	return s.GetToken(tsqlParserUSING, 0)
}

func (s *Simple_idContext) VAR() antlr.TerminalNode {
	return s.GetToken(tsqlParserVAR, 0)
}

func (s *Simple_idContext) VARP() antlr.TerminalNode {
	return s.GetToken(tsqlParserVARP, 0)
}

func (s *Simple_idContext) VIEW_METADATA() antlr.TerminalNode {
	return s.GetToken(tsqlParserVIEW_METADATA, 0)
}

func (s *Simple_idContext) VIEWS() antlr.TerminalNode {
	return s.GetToken(tsqlParserVIEWS, 0)
}

func (s *Simple_idContext) WORK() antlr.TerminalNode {
	return s.GetToken(tsqlParserWORK, 0)
}

func (s *Simple_idContext) XML() antlr.TerminalNode {
	return s.GetToken(tsqlParserXML, 0)
}

func (s *Simple_idContext) XMLNAMESPACES() antlr.TerminalNode {
	return s.GetToken(tsqlParserXMLNAMESPACES, 0)
}

func (s *Simple_idContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_idContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_idContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSimple_id(s)
	}
}

func (s *Simple_idContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSimple_id(s)
	}
}

func (p *tsqlParser) Simple_id() (localctx ISimple_idContext) {
	localctx = NewSimple_idContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, tsqlParserRULE_simple_id)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3106)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserFORCESEEK || _la == tsqlParserNEXT || (((_la-196)&-(0x1f+1)) == 0 && ((1<<uint((_la-196)))&((1<<(tsqlParserABSOLUTE-196))|(1<<(tsqlParserAPPLY-196))|(1<<(tsqlParserAUTO-196))|(1<<(tsqlParserAVG-196))|(1<<(tsqlParserBASE64-196))|(1<<(tsqlParserCALLER-196))|(1<<(tsqlParserCAST-196))|(1<<(tsqlParserCATCH-196))|(1<<(tsqlParserCHECKSUM_AGG-196))|(1<<(tsqlParserCOMMITTED-196))|(1<<(tsqlParserCONCAT-196)))) != 0) || (((_la-228)&-(0x1f+1)) == 0 && ((1<<uint((_la-228)))&((1<<(tsqlParserCONTROL-228))|(1<<(tsqlParserCOOKIE-228))|(1<<(tsqlParserCOUNT-228))|(1<<(tsqlParserCOUNT_BIG-228))|(1<<(tsqlParserDELAY-228))|(1<<(tsqlParserDELETED-228))|(1<<(tsqlParserDENSE_RANK-228))|(1<<(tsqlParserDISABLE-228))|(1<<(tsqlParserDYNAMIC-228))|(1<<(tsqlParserENCRYPTION-228))|(1<<(tsqlParserEXPAND-228))|(1<<(tsqlParserFAST-228))|(1<<(tsqlParserFAST_FORWARD-228)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(tsqlParserFIRST-262))|(1<<(tsqlParserFOLLOWING-262))|(1<<(tsqlParserFORCE-262))|(1<<(tsqlParserFORCED-262))|(1<<(tsqlParserFORWARD_ONLY-262))|(1<<(tsqlParserFULLSCAN-262))|(1<<(tsqlParserGLOBAL-262))|(1<<(tsqlParserGO-262))|(1<<(tsqlParserGROUPING-262))|(1<<(tsqlParserGROUPING_ID-262))|(1<<(tsqlParserHASH-262))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-262))|(1<<(tsqlParserIMPERSONATE-262))|(1<<(tsqlParserINSENSITIVE-262))|(1<<(tsqlParserINSERTED-262))|(1<<(tsqlParserISOLATION-262))|(1<<(tsqlParserKEEP-262))|(1<<(tsqlParserKEEPFIXED-262))|(1<<(tsqlParserKEYSET-262))|(1<<(tsqlParserLAST-262))|(1<<(tsqlParserLEVEL-262))|(1<<(tsqlParserLOCAL-262))|(1<<(tsqlParserLOCK_ESCALATION-262))|(1<<(tsqlParserLOGIN-262))|(1<<(tsqlParserLOOP-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(tsqlParserMARK-294))|(1<<(tsqlParserMAX-294))|(1<<(tsqlParserMAXDOP-294))|(1<<(tsqlParserMAXRECURSION-294))|(1<<(tsqlParserMIN-294))|(1<<(tsqlParserMODIFY-294))|(1<<(tsqlParserNAME-294))|(1<<(tsqlParserNOCOUNT-294))|(1<<(tsqlParserNOEXPAND-294))|(1<<(tsqlParserNORECOMPUTE-294))|(1<<(tsqlParserNTILE-294))|(1<<(tsqlParserNUMBER-294))|(1<<(tsqlParserOFFSET-294))|(1<<(tsqlParserONLINE-294))|(1<<(tsqlParserONLY-294))|(1<<(tsqlParserOPTIMISTIC-294))|(1<<(tsqlParserOPTIMIZE-294))|(1<<(tsqlParserOUT-294))|(1<<(tsqlParserOUTPUT-294)))) != 0) || (((_la-326)&-(0x1f+1)) == 0 && ((1<<uint((_la-326)))&((1<<(tsqlParserOWNER-326))|(1<<(tsqlParserPARAMETERIZATION-326))|(1<<(tsqlParserPARTITION-326))|(1<<(tsqlParserPATH-326))|(1<<(tsqlParserPRECEDING-326))|(1<<(tsqlParserPRIOR-326))|(1<<(tsqlParserPRIVILEGES-326))|(1<<(tsqlParserRANGE-326))|(1<<(tsqlParserRANK-326))|(1<<(tsqlParserREADONLY-326))|(1<<(tsqlParserREAD_ONLY-326))|(1<<(tsqlParserRECOMPILE-326))|(1<<(tsqlParserRELATIVE-326))|(1<<(tsqlParserREMOTE-326))|(1<<(tsqlParserREPEATABLE-326))|(1<<(tsqlParserROBUST-326))|(1<<(tsqlParserROOT-326))|(1<<(tsqlParserROW-326))|(1<<(tsqlParserROWGUID-326))|(1<<(tsqlParserROWS-326))|(1<<(tsqlParserROW_NUMBER-326))|(1<<(tsqlParserSAMPLE-326))|(1<<(tsqlParserSCHEMABINDING-326))|(1<<(tsqlParserSCROLL-326))|(1<<(tsqlParserSCROLL_LOCKS-326)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(tsqlParserSELF-359))|(1<<(tsqlParserSERIALIZABLE-359))|(1<<(tsqlParserSIMPLE-359))|(1<<(tsqlParserSIZE-359))|(1<<(tsqlParserSNAPSHOT-359))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-359))|(1<<(tsqlParserSTATIC-359))|(1<<(tsqlParserSTATS_STREAM-359))|(1<<(tsqlParserSTDEV-359))|(1<<(tsqlParserSTDEVP-359))|(1<<(tsqlParserSUM-359))|(1<<(tsqlParserTEXTIMAGE_ON-359))|(1<<(tsqlParserTHROW-359))|(1<<(tsqlParserTIES-359))|(1<<(tsqlParserTIME-359))|(1<<(tsqlParserTRY-359))|(1<<(tsqlParserTYPE-359))|(1<<(tsqlParserTYPE_WARNING-359))|(1<<(tsqlParserUNBOUNDED-359))|(1<<(tsqlParserUNCOMMITTED-359))|(1<<(tsqlParserUNKNOWN-359))|(1<<(tsqlParserUSING-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(tsqlParserVAR-391))|(1<<(tsqlParserVARP-391))|(1<<(tsqlParserVIEWS-391))|(1<<(tsqlParserVIEW_METADATA-391))|(1<<(tsqlParserWORK-391))|(1<<(tsqlParserXML-391))|(1<<(tsqlParserXMLNAMESPACES-391))|(1<<(tsqlParserID-391)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IComparison_operatorContext is an interface to support dynamic dispatch.
type IComparison_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparison_operatorContext differentiates from other interfaces.
	IsComparison_operatorContext()
}

type Comparison_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparison_operatorContext() *Comparison_operatorContext {
	var p = new(Comparison_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_comparison_operator
	return p
}

func (*Comparison_operatorContext) IsComparison_operatorContext() {}

func NewComparison_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comparison_operatorContext {
	var p = new(Comparison_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_comparison_operator

	return p
}

func (s *Comparison_operatorContext) GetParser() antlr.Parser { return s.parser }
func (s *Comparison_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comparison_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Comparison_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterComparison_operator(s)
	}
}

func (s *Comparison_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitComparison_operator(s)
	}
}

func (p *tsqlParser) Comparison_operator() (localctx IComparison_operatorContext) {
	localctx = NewComparison_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, tsqlParserRULE_comparison_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3123)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 455, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3108)
			p.Match(tsqlParserEQUAL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3109)
			p.Match(tsqlParserGREATER)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3110)
			p.Match(tsqlParserLESS)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3111)
			p.Match(tsqlParserLESS)
		}
		{
			p.SetState(3112)
			p.Match(tsqlParserEQUAL)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3113)
			p.Match(tsqlParserGREATER)
		}
		{
			p.SetState(3114)
			p.Match(tsqlParserEQUAL)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3115)
			p.Match(tsqlParserLESS)
		}
		{
			p.SetState(3116)
			p.Match(tsqlParserGREATER)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3117)
			p.Match(tsqlParserEXCLAMATION)
		}
		{
			p.SetState(3118)
			p.Match(tsqlParserEQUAL)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3119)
			p.Match(tsqlParserEXCLAMATION)
		}
		{
			p.SetState(3120)
			p.Match(tsqlParserGREATER)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3121)
			p.Match(tsqlParserEXCLAMATION)
		}
		{
			p.SetState(3122)
			p.Match(tsqlParserLESS)
		}

	}

	return localctx
}

// IAssignment_operatorContext is an interface to support dynamic dispatch.
type IAssignment_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignment_operatorContext differentiates from other interfaces.
	IsAssignment_operatorContext()
}

type Assignment_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignment_operatorContext() *Assignment_operatorContext {
	var p = new(Assignment_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_assignment_operator
	return p
}

func (*Assignment_operatorContext) IsAssignment_operatorContext() {}

func NewAssignment_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assignment_operatorContext {
	var p = new(Assignment_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_assignment_operator

	return p
}

func (s *Assignment_operatorContext) GetParser() antlr.Parser { return s.parser }
func (s *Assignment_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assignment_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assignment_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterAssignment_operator(s)
	}
}

func (s *Assignment_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitAssignment_operator(s)
	}
}

func (p *tsqlParser) Assignment_operator() (localctx IAssignment_operatorContext) {
	localctx = NewAssignment_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, tsqlParserRULE_assignment_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3125)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(tsqlParserPLUS_ASSIGN-415))|(1<<(tsqlParserMINUS_ASSIGN-415))|(1<<(tsqlParserMULT_ASSIGN-415))|(1<<(tsqlParserDIV_ASSIGN-415))|(1<<(tsqlParserMOD_ASSIGN-415))|(1<<(tsqlParserAND_ASSIGN-415))|(1<<(tsqlParserXOR_ASSIGN-415))|(1<<(tsqlParserOR_ASSIGN-415)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IFile_sizeContext is an interface to support dynamic dispatch.
type IFile_sizeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFile_sizeContext differentiates from other interfaces.
	IsFile_sizeContext()
}

type File_sizeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFile_sizeContext() *File_sizeContext {
	var p = new(File_sizeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_file_size
	return p
}

func (*File_sizeContext) IsFile_sizeContext() {}

func NewFile_sizeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *File_sizeContext {
	var p = new(File_sizeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_file_size

	return p
}

func (s *File_sizeContext) GetParser() antlr.Parser { return s.parser }

func (s *File_sizeContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *File_sizeContext) KB() antlr.TerminalNode {
	return s.GetToken(tsqlParserKB, 0)
}

func (s *File_sizeContext) MB() antlr.TerminalNode {
	return s.GetToken(tsqlParserMB, 0)
}

func (s *File_sizeContext) GB() antlr.TerminalNode {
	return s.GetToken(tsqlParserGB, 0)
}

func (s *File_sizeContext) TB() antlr.TerminalNode {
	return s.GetToken(tsqlParserTB, 0)
}

func (s *File_sizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *File_sizeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *File_sizeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFile_size(s)
	}
}

func (s *File_sizeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFile_size(s)
	}
}

func (p *tsqlParser) File_size() (localctx IFile_sizeContext) {
	localctx = NewFile_sizeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, tsqlParserRULE_file_size)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3127)
		p.Match(tsqlParserDECIMAL)
	}
	p.SetState(3129)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-268)&-(0x1f+1)) == 0 && ((1<<uint((_la-268)))&((1<<(tsqlParserGB-268))|(1<<(tsqlParserKB-268))|(1<<(tsqlParserMB-268)))) != 0) || _la == tsqlParserTB || _la == tsqlParserMODULE {
		{
			p.SetState(3128)
			_la = p.GetTokenStream().LA(1)

			if !((((_la-268)&-(0x1f+1)) == 0 && ((1<<uint((_la-268)))&((1<<(tsqlParserGB-268))|(1<<(tsqlParserKB-268))|(1<<(tsqlParserMB-268)))) != 0) || _la == tsqlParserTB || _la == tsqlParserMODULE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

func (p *tsqlParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 86:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 93:
		var t *Search_conditionContext = nil
		if localctx != nil {
			t = localctx.(*Search_conditionContext)
		}
		return p.Search_condition_Sempred(t, predIndex)

	case 95:
		var t *Query_expressionContext = nil
		if localctx != nil {
			t = localctx.(*Query_expressionContext)
		}
		return p.Query_expression_Sempred(t, predIndex)

	case 112:
		var t *Table_sourceContext = nil
		if localctx != nil {
			t = localctx.(*Table_sourceContext)
		}
		return p.Table_source_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *tsqlParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 12)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *tsqlParser) Search_condition_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 4:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *tsqlParser) Query_expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *tsqlParser) Table_source_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 7:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
